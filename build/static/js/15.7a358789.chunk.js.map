{"version":3,"sources":["node.jsx"],"names":["List","props","listItem","row","node","url","key","id","onClick","changeContent","Info","title","deleteList","elem","setState","content","window","confirm","rest_call","then","result","deleted","data","state","filter","header","thead","trows","this","componentDidMount","rnd","Component","searchInfo","found","hostname","device","device_id","onChange","e","target","name","value","updateInfo","op","old","className","Reload","LogShow","LogClear","msg","modules","map","index","logs","file","Object","entries","log","line","idx"],"mappings":"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","file":"static/js/15.7a358789.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call, rnd } from './infra/Functions.js';\nimport {Spinner, InfoColumns, ContentList, ContentData } from './infra/UI.jsx';\nimport { NavBar } from './infra/Navigation.js';\nimport { TextInput, UrlInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, InfoButton, LogButton, ReloadButton, SaveButton, SearchButton } from './infra/Buttons.jsx';\n\n// ************** List **************\n//\nexport class List extends Component {\n constructor(props){\n  super(props);\n  this.state = {};\n }\n\n componentDidMount(){\n  rest_call('api/master/node_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.url,<Fragment key='node_buttons'>\n   <InfoButton key={'nl_btn_info'+row.id} onClick={() => this.changeContent(<Info key={'node_info_'+row.id} id={row.id} />)} title='Node information' />\n   <DeleteButton key={'nl_btn_delete'+row.id} onClick={() => this.deleteList(row.id)} title='Delete node' />\n  </Fragment>]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete node?') && rest_call('api/master/node_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='node_fragment'>\n   <ContentList key='node_cl' header='Nodes' thead={['Node','URL','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='nl_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<Info key={'node_new_' + rnd()} id='new' />)} title='Add node' />\n   </ContentList>\n   <ContentData key='node_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true, content:null};\n }\n\n componentDidMount(){\n  rest_call('api/master/node_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n searchInfo = () => rest_call('api/device/search',{node:this.state.data.node}).then(result => result.found && this.setState({data:{...this.state.data, hostname:result.device.hostname, device_id:result.device.id}}))\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  rest_call('api/master/node_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render() {\n  if (!this.state.found)\n   return <article>Node with id: {this.props.id} removed</article>\n  else if (this.state.data) {\n   const old = (this.state.data.id !== 'new');\n   return (\n   <Fragment key='node_info_fragment'>\n    <article className='info'>\n     <h1>Node</h1>\n     <InfoColumns key='node_content'>\n      <TextInput key='node' id='node' value={this.state.data.node} onChange={this.onChange} />\n      <UrlInput key='url' id='url' value={this.state.data.url}  onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} />\n     </InfoColumns>\n     <SaveButton key='ni_btn_save' onClick={() => this.updateInfo()} title='Save information' />\n     {old && !this.state.data.hostname && <SearchButton key='ni_btn_srch' onClick={this.searchInfo} title='Try to map node to device' />}\n     {old && <ReloadButton key='ni_btn_reload' onClick={() => this.changeContent(<Reload key={'node_reload'} node={this.state.data.node} />)} />}\n     {old && <LogButton key='ni_btn_logs' onClick={() => this.changeContent(<LogShow key={'node_logs'} node={this.state.data.node} />)} title='View node logs' />}\n     {old && <DeleteButton key='ni_btn_logc' onClick={() => this.changeContent(<LogClear key={'node_logc'} node={this.state.data.node} msg='Really clear logs?' />)} title='Clear logs' />}\n    </article>\n    <NavBar key='node_navigation' id='node_navigation' />\n    {this.state.content}\n   </Fragment>\n   );\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reload ***************\n//\nclass Reload extends Component {\n\n componentDidMount(){\n  rest_call('system/reload/' + this.props.node).then(result => this.setState(result))\n }\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   return (\n    <article className='code'>\n     <h1>Module</h1>\n     {this.state.modules.map((row,index) => <span key={index}>{row}</span> )}\n   </article>\n   )\n  }\n }\n}\n\n// *************** LogClear ***************\n//\nclass LogClear extends Component {\n\n componentDidMount(){\n  rest_call('api/system/logs_clear?node=' + this.props.node).then(result => this.setState({logs:result.file}))\n }\n\n render(){\n  return (!this.state) ? <Spinner /> : <article className='code'><h1>Cleared</h1>{Object.entries(this.state.logs).map(log => <span key={log[0]}>{log[0]}: {log[1]}</span>)}</article>\n }\n}\n\n// *************** LogShow ***************\n//\nexport class LogShow extends Component {\n\n componentDidMount(){\n  rest_call('api/system/logs_get?node=' + this.props.node).then(result => this.setState({logs:result}))\n }\n\n render(){\n  return (!this.state) ? <Spinner /> : <article className='code'>{Object.entries(this.state.logs).map(log => <Fragment><h1>{log[0]}</h1>{log[1].map((line,idx) => <span key={log[0]+'_'+idx}>{line}</span> )}</Fragment>)}</article>\n }\n}\n"],"sourceRoot":""}