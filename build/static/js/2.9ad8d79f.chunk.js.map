{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","key","this","Component","contextType","RimsContext","listItem","row","id","netasc","description","service","onClick","NetworkInfo","title","AddressList","changeSelf","network_id","Layout","deleteList","content","window","confirm","rest_call","then","result","deleted","data","filter","header","thead","trows","componentDidMount","rnd","Leases","onChange","e","target","name","value","updateInfo","op","found","className","label","text","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","extra","start_address","parseInt","split","layout","cnt","hasOwnProperty","start","push","device_id","int2ip","size","mac","hostname","oui","starts","ends","type","domain","a_id","ptr_id","StateMap","AddressInfo","a_domain_id","status","info"],"mappings":"uUAQaA,EAAb,YACC,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KAIPC,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAASD,IAHvC,EAAKE,MAAQ,kBAACC,EAAD,CAAaC,IAAI,iBAFb,EADnB,sEASE,OAAQ,kBAAC,WAAD,CAAUA,IAAI,aAAaC,KAAKH,WAT1C,GAA0BI,aAY1BT,EAAKU,YAAcC,cAIZ,IAAML,EAAb,YACC,WAAYL,GAAO,IAAD,8BACjB,4CAAMA,KAQPW,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIC,GAAGD,EAAIE,OAAOF,EAAIG,YAAYH,EAAII,QAAQ,kBAAC,WAAD,CAAUV,IAAK,mBAAmBM,EAAIC,IACvG,kBAAC,kBAAD,CAAiBP,IAAK,gBAAgBM,EAAIC,GAAII,QAAS,kBAAM,EAAKhB,cAAc,kBAACiB,EAAD,CAAaZ,IAAK,WAAWM,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,4BAC5I,kBAAC,cAAD,CAAab,IAAK,iBAAiBM,EAAIC,GAAII,QAAS,kBAAM,EAAKhB,cAAc,kBAACmB,EAAD,CAAaC,WAAY,EAAKpB,cAAeK,IAAK,gBAAgBM,EAAIC,GAAIS,WAAYV,EAAIC,OAASM,MAAM,mBACtL,kBAAC,aAAD,CAAYb,IAAK,kBAAkBM,EAAIC,GAAII,QAAS,kBAAM,EAAKhB,cAAc,kBAACsB,EAAD,CAAQF,WAAY,EAAKpB,cAAeK,IAAK,kBAAkBM,EAAIC,GAAIS,WAAYV,EAAIC,OAASM,MAAM,mBACnL,kBAAC,eAAD,CAAcb,IAAK,kBAAkBM,EAAIC,GAAII,QAAS,kBAAM,EAAKO,WAAWZ,EAAIC,KAAKM,MAAM,sBAb3E,EAiBlBlB,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACsB,QAAQvB,KAjB/B,EAkBlBsB,WAAa,SAACX,GAAD,OAASa,OAAOC,QAAQ,0BAA4BC,YAAU,0BAA2B,CAACf,GAAGA,IAAKgB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK5B,SAAS,CAAC6B,KAAK,EAAK5B,MAAM4B,KAAKC,QAAO,SAAArB,GAAG,OAAKA,EAAIC,KAAOA,KAAKY,QAAQ,WAhB1N,EAAKrB,MAAQ,GAFI,EADnB,iFAMqB,IAAD,OAClBwB,YAAU,yBAAyBC,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,QAPlE,+BAqBU,IAAD,OACP,OAAO,kBAAC,WAAD,CAAUxB,IAAI,eACpB,kBAAC,cAAD,CAAaA,IAAI,QAAQ4B,OAAO,WAAWC,MAAO,CAAC,KAAK,UAAU,cAAc,OAAO,IAAKC,MAAO7B,KAAKH,MAAM4B,KAAMrB,SAAUJ,KAAKI,SAAUmB,OAAQvB,KAAKH,MAAM0B,QAC/J,kBAAC,eAAD,CAAcxB,IAAI,gBAAiBW,QAAS,kBAAM,EAAKoB,uBACvD,kBAAC,YAAD,CAAW/B,IAAI,aAAaW,QAAS,kBAAM,EAAKhB,cAAc,kBAACiB,EAAD,CAAaZ,IAAK,eAAegC,cAAOzB,GAAG,UAAWM,MAAM,gBAC1H,kBAAC,YAAD,CAAWb,IAAI,aAAaW,QAAS,kBAAM,EAAKhB,cAAc,kBAACsC,EAAD,CAAQjC,IAAI,qBAAsBa,MAAM,2BAEvG,kBAAC,cAAD,CAAab,IAAI,SAASC,KAAKH,MAAMqB,cA5BxC,GAAiCjB,aAmC3BU,E,YACL,WAAYlB,GAAO,IAAD,8BACjB,4CAAMA,KAIPwC,SAAW,SAACC,GAAD,OAAO,EAAKtC,SAAS,CAAC6B,KAAK,eAAI,EAAK5B,MAAM4B,KAAhB,eAAuBS,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,WALlE,EAOlB3C,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACsB,QAAQvB,KAP/B,EASlB2C,WAAa,kBAAMjB,YAAU,wBAAD,aAA0BkB,GAAG,UAAa,EAAK1C,MAAM4B,OAAOH,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,OAPpH,EAAK1B,MAAQ,CAAC4B,KAAK,KAAMe,OAAM,GAFd,E,iFAWE,IAAD,OAClBnB,YAAU,wBAAwB,CAACf,GAAGN,KAAKP,MAAMa,KAAKgB,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,Q,+BAG1E,IAAD,OACR,OAAIvB,KAAKH,MAAM4B,KAEb,6BAASgB,UAAU,QAClB,uCACA,kBAAC,cAAD,CAAa1C,IAAI,mBAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKO,GAAG,KAAKoC,MAAM,KAAKC,KAAM3C,KAAKH,MAAM4B,KAAKnB,KAC5D,kBAAC,YAAD,CAAWP,IAAI,cAAcO,GAAG,cAAe+B,MAAOrC,KAAKH,MAAM4B,KAAKjB,YAAayB,SAAUjC,KAAKiC,WAClG,kBAAC,YAAD,CAAWlC,IAAI,UAAUO,GAAG,UAAU+B,MAAOrC,KAAKH,MAAM4B,KAAKmB,QAASX,SAAUjC,KAAKiC,WACrF,kBAAC,YAAD,CAAWlC,IAAI,OAAOO,GAAG,OAAO+B,MAAOrC,KAAKH,MAAM4B,KAAKoB,KAAMZ,SAAUjC,KAAKiC,WAC5E,kBAAC,YAAD,CAAWlC,IAAI,UAAUO,GAAG,UAAU+B,MAAOrC,KAAKH,MAAM4B,KAAKqB,QAASb,SAAUjC,KAAKiC,WACrF,kBAAC,cAAD,CAAalC,IAAI,YAAYO,GAAG,YAAYoC,MAAM,SAASL,MAAOrC,KAAKH,MAAM4B,KAAKsB,UAAWd,SAAUjC,KAAKiC,UAC1GjC,KAAKH,MAAMmD,QAAQC,KAAI,SAAC5C,EAAI6C,GAAL,OAAa,4BAAQnD,IAAK,UAAUmD,EAAKb,MAAOhC,EAAIC,IAAvC,UAA+CD,EAAII,QAAnD,YAA8DJ,EAAI8C,WAExG,kBAAC,cAAD,CAAapD,IAAI,kBAAkBO,GAAG,kBAAkBoC,MAAM,eAAeL,MAAOrC,KAAKH,MAAM4B,KAAK2B,gBAAiBnB,SAAUjC,KAAKiC,UAClIjC,KAAKH,MAAMwD,QAAQJ,KAAI,SAAC5C,EAAI6C,GAAL,OAAa,4BAAQnD,IAAK,YAAYmD,EAAKb,MAAOhC,EAAIC,IAAzC,UAAiDD,EAAIiD,OAArD,aAAgEjD,EAAI+B,KAApE,WAGvC,kBAAC,aAAD,CAAYrC,IAAI,mBAAmBW,QAAS,kBAAM,EAAK4B,cAAc1B,MAAM,UAItE,kBAAC,UAAD,U,GAtCgBX,aA4CpBe,E,2MAMLtB,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMqB,WAAWnB,I,EAEhD4D,aAAe,SAACjD,GAAD,OAAQ,6BAAuBgB,MAAK,SAAAkC,GAAG,OAAI,EAAK9D,cAAc,kBAAC8D,EAAIC,KAAL,CAAU1D,IAAK,MAAMO,EAAIA,GAAIA,S,EAE1GoD,aAAe,SAACd,EAAQe,GAAT,OAAgB,6BAAuBrC,MAAK,SAAAkC,GAAG,OAAK,EAAK9D,cAAc,kBAAC8D,EAAII,IAAL,CAAS7D,IAAK,SAAU8D,gBAAiBjB,EAASe,GAAIA,S,mFARxH,IAAD,OAClBtC,YAAU,wBAAwB,CAACN,WAAWf,KAAKP,MAAMsB,WAAW+C,KAAK,aAAaC,MAAM,CAAC,eAAezC,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAL,eAAkB2B,EAAlB,CAA0ByC,cAAcC,SAAS1C,EAAOqB,QAAQsB,MAAM,KAAK,Y,+BAS9L,IAAD,OACP,GAAKlE,KAAKH,MAEL,CAEJ,IADA,IAAMsE,EAAS,GADX,WAEKC,GACJ,EAAKvE,MAAM4B,KAAK4C,eAAe,EAAKxE,MAAMyE,MAAQF,GACrDD,EAAOI,KAAK,4BAAQxE,IAAK,OAAS,EAAKF,MAAMyE,MAAQF,EAAK3B,UAAU,gBAAgB/B,QAAS,kBAAM,EAAK6C,aAAa,EAAK1D,MAAM4B,KAAK,EAAK5B,MAAMyE,MAAQF,GAAKI,aAAaJ,EAAI,MAE9KD,EAAOI,KAAK,4BAAQxE,IAAK,OAAS,EAAKF,MAAMyE,MAAQF,EAAK3B,UAAU,kBAAkB/B,QAAS,kBAAM,EAAKgD,aAAa,EAAKjE,MAAMsB,WAAW0D,YAAO,EAAK5E,MAAMyE,MAAQF,MAAQA,EAAI,OAJ5KA,EAAM,EAAGA,GAAOpE,KAAKH,MAAM6E,KAAMN,IAAO,EAAxCA,GAMT,OACC,iCACC,4BAAKpE,KAAKH,MAAM+C,QAAhB,IAA0B5C,KAAKH,MAAMgD,MACpCsB,GAZH,OAAO,kBAAC,UAAD,U,GAdWlE,aAmCf+B,E,YACL,WAAYvC,GAAO,IAAD,8BACjB,4CAAMA,KAQPW,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIsD,GAAGtD,EAAIsE,IAAItE,EAAIuE,SAASvE,EAAIwE,IAAIxE,EAAIyE,OAAOzE,EAAI0E,OAPvE,EAAKlF,MAAQ,GAFI,E,iFAKE,IAAD,OAClBwB,YAAU,yBAAyB,CAAC2D,KAAK,WAAW1D,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,Q,+BAMjF,OAAO,kBAAC,gBAAD,CAAexB,IAAI,WAAW4B,OAAO,SAASC,MAAO,CAAC,KAAK,MAAM,WAAW,MAAM,SAAS,OAAQC,MAAO7B,KAAKH,MAAM4B,KAAMrB,SAAUJ,KAAKI,e,GAb9HH,aAmBfY,E,YACL,WAAYpB,GAAO,IAAD,8BACjB,4CAAMA,KAQPC,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMqB,WAAWnB,IAT9B,EAWlBS,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIC,GAAGD,EAAIsD,GAAGtD,EAAIuE,SAASvE,EAAI4E,OAAO5E,EAAI6E,KAAK7E,EAAI8E,OAAOC,mBAAS,CAACvF,MAAMQ,EAAIR,QAAQ,kBAAC,WAAD,CAAUE,IAAK,aAAaM,EAAIC,IACzI,kBAAC,kBAAD,CAAiBP,IAAK,cAAcM,EAAIC,GAAII,QAAS,kBAAM,EAAKhB,cAAc,kBAAC2F,EAAD,CAAatF,IAAK,gBAAgBM,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,uBAC/I,kBAAC,eAAD,CAAcb,IAAK,gBAAgBM,EAAIC,GAAII,QAAS,kBAAM,EAAKO,WAAWZ,EAAIC,KAAKM,MAAM,4BAbzE,EAgBlBK,WAAa,SAACX,GAAD,OAASa,OAAOC,QAAQ,oBAAsBC,YAAU,0BAA2B,CAACf,GAAGA,IAAKgB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK5B,SAAS,CAAC6B,KAAK,EAAK5B,MAAM4B,KAAKC,QAAO,SAAArB,GAAG,OAAKA,EAAIC,KAAOA,WAdvM,EAAKT,MAAQ,CAAC4B,KAAK,KAAKF,OAAO,MAFd,E,iFAKE,IAAD,OAClBF,YAAU,wBAAwB,CAACN,WAAWf,KAAKP,MAAMsB,WAAWgD,MAAM,CAAC,OAAO,SAAS,WAAW,cAAc,eAAezC,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,Q,+BAYxJ,IAAD,OACP,OAAO,kBAAC,gBAAD,CAAexB,IAAI,QAAQ4B,OAAO,yBAAyBC,MAAO,CAAC,KAAK,KAAK,WAAW,SAAS,IAAI,MAAM,GAAG,IAAKC,MAAO7B,KAAKH,MAAM4B,KAAMrB,SAAUJ,KAAKI,SAAUmB,OAAQvB,KAAKH,MAAM0B,QAC7L,kBAAC,eAAD,CAAcxB,IAAI,gBAAgBW,QAAS,kBAAM,EAAKoB,uBACtD,kBAAC,YAAD,CAAW/B,IAAI,aAAaW,QAAS,kBAAM,EAAKhB,cAAc,kBAAC2F,EAAD,CAAatF,IAAK,eAAiBgC,cAAOhB,WAAY,EAAKtB,MAAMsB,WAAYT,GAAG,UAAWM,MAAM,2B,GAtBxIX,aA6BboF,EAAb,YACC,WAAY5F,GAAO,IAAD,8BACjB,4CAAMA,KAIPwC,SAAW,SAACC,GAAD,OAAO,EAAKtC,SAAS,CAAC6B,KAAK,eAAI,EAAK5B,MAAM4B,KAAhB,eAAuBS,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,WALlE,EAOlBC,WAAa,kBAAMjB,YAAU,wBAAD,aAA0BkB,GAAG,UAAa,EAAK1C,MAAM4B,OAAOH,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,OALpH,EAAK1B,MAAQ,CAAC4B,KAAK,KAAMe,OAAM,GAFd,EADnB,iFAUqB,IAAD,OAClBnB,YAAU,wBAAwB,CAACf,GAAGN,KAAKP,MAAMa,GAAGS,WAAWf,KAAKP,MAAMsB,aAAaO,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS2B,MACpHF,YAAU,sBAAsB,CAAC,OAAS,YAAYC,MAAK,SAAAC,GAAM,OAAI,EAAK3B,SAAS,CAACyD,QAAQ9B,EAAOE,YAZrG,+BAeW,IAAD,OACR,OAAIzB,KAAKH,OAASG,KAAKH,MAAM4B,MAAQzB,KAAKH,MAAMwD,QAE9C,6BAASZ,UAAU,QAClB,0CACA,kBAAC,cAAD,CAAa1C,IAAI,cAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKO,GAAG,KAAKoC,MAAM,KAAKC,KAAM3C,KAAKH,MAAM4B,KAAKnB,KAC5D,kBAAC,WAAD,CAAUP,IAAI,UAAUO,GAAG,UAAUqC,KAAM3C,KAAKH,MAAMkE,MAAMnB,UAC5D,kBAAC,YAAD,CAAW7C,IAAI,KAAKO,GAAG,KAAKoC,MAAM,KAAML,MAAOrC,KAAKH,MAAM4B,KAAKkC,GAAI1B,SAAUjC,KAAKiC,WAClF,kBAAC,YAAD,CAAWlC,IAAI,OAAOO,GAAG,OAAOoC,MAAM,OAAOL,MAAOrC,KAAKH,MAAM4B,KAAKyD,KAAMjD,SAAUjC,KAAKiC,WACzF,kBAAC,YAAD,CAAWlC,IAAI,SAASO,GAAG,SAASoC,MAAM,SAASL,MAAOrC,KAAKH,MAAM4B,KAAK0D,OAAQlD,SAAUjC,KAAKiC,WACjG,kBAAC,YAAD,CAAWlC,IAAI,WAAWO,GAAG,WAAW+B,MAAOrC,KAAKH,MAAM4B,KAAKmD,SAAU3C,SAAUjC,KAAKiC,WACxF,kBAAC,cAAD,CAAalC,IAAI,cAAcO,GAAG,cAAcoC,MAAM,SAASL,MAAOrC,KAAKH,MAAM4B,KAAK6D,YAAarD,SAAUjC,KAAKiC,UAAWjC,KAAKH,MAAMwD,QAAQJ,KAAI,SAAC5C,EAAI6C,GAAL,OAAa,4BAAQnD,IAAK,UAAUmD,EAAKb,MAAOhC,EAAIC,IAAKD,EAAI+B,WAElN,kBAAC,aAAD,CAAYrC,IAAI,UAAUW,QAAS,kBAAM,EAAK4B,cAAc1B,MAAM,SAClE,kBAAC,SAAD,CAAQb,IAAI,eAAewB,OAA+B,OAAtBvB,KAAKH,MAAM0F,OAAmBvF,KAAKH,MAAM2F,KAAO,QAI/E,kBAAC,UAAD,UAlCV,GAAiCvF","file":"static/js/2.9ad8d79f.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport { rest_call, rnd, int2ip } from './infra/Functions.js';\nimport { Spinner, InfoColumns, StateMap, Result, RimsContext, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ViewButton, LogButton, ConfigureButton, ItemsButton, ReloadButton, SaveButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n}\nMain.contextType = RimsContext;\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.netasc,row.description,row.service,<Fragment key={'network_buttons_'+row.id}>\n   <ConfigureButton key={'net_btn_info_'+row.id} onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n   <ItemsButton key={'net_btn_items_'+row.id} onClick={() => this.changeContent(<AddressList changeSelf={this.changeContent} key={'address_list_'+row.id} network_id={row.id} />)} title='View addresses' />\n   <ViewButton key={'net_btn_layout_'+row.id} onClick={() => this.changeContent(<Layout changeSelf={this.changeContent} key={'address_layout_'+row.id} network_id={row.id} />)} title='View usage map' />\n   <DeleteButton key={'net_btn_delete_'+row.id} onClick={() => this.deleteList(row.id)} title='Delete network' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete network') && rest_call('api/ipam/network_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='nl_fragment'>\n   <ContentList key='nl_cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='nl_btn_reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='nl_btn_doc' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='nl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => rest_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/ipam/network_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <article className='info'>\n     <h1>Network</h1>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={'ni_srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={'ni_rzone_'+idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </article>\n   );\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  rest_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id']}).then(result => this.setState({...result, start_address:parseInt(result.network.split('.')[3])}))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const layout = [];\n   for (let cnt = 0; cnt <= this.state.size; cnt++){\n    if (this.state.data.hasOwnProperty(this.state.start + cnt))\n     layout.push(<button key={'btn_' + this.state.start + cnt} className='info ipam red' onClick={() => this.changeDevice(this.state.data[this.state.start + cnt].device_id)}>{cnt%256}</button>)\n    else\n     layout.push(<button key={'btn_' + this.state.start + cnt} className='info ipam green' onClick={() => this.createDevice(this.props.network_id,int2ip(this.state.start + cnt))}>{cnt%256}</button>)\n   }\n   return (\n    <article>\n     <h1>{this.state.network}/{this.state.mask}</h1>\n     {layout}\n    </article>\n   );\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  rest_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['a_id','ptr_id','hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,row.a_id,row.ptr_id,StateMap({state:row.state}),<Fragment key={'ip_button_'+row.id}>\n   <ConfigureButton key={'al_btn_info'+row.id} onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} />)} title='Edit address entry' />\n   <DeleteButton key={'al_btn_delete'+row.id} onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </Fragment>]\n\n deleteList = (id) => (window.confirm('Delete address?') && rest_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','A','PTR','','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => rest_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  rest_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains)\n   return (\n    <article className='info'>\n     <h1>IP Address</h1>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='a_id' id='a_id' label='A_id' value={this.state.data.a_id} onChange={this.onChange} />\n      <TextInput key='ptr_id' id='ptr_id' label='PTR_id' value={this.state.data.ptr_id} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={'ai_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={(this.state.status !== 'OK') ? this.state.info : 'OK'} />\n    </article>\n   );\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}