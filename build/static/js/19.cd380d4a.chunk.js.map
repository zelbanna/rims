{"version":3,"sources":["system.jsx"],"names":["Main","props","compileNavItems","master","context","settings","node","loadNavigation","key","title","onClick","changeImport","window","open","changeContent","Controls","Report","TaskReport","RestList","state","services","length","map","row","idx","name","ServiceInfo","setState","content","navinfo","elem","navitems","logs","rest_call","then","result","Object","assign","this","user_id","id","prevProps","module","func","args","lib","Elem","Component","contextType","RimsContext","listItem","info","value","data","keys","sort","a","b","localeCompare","header","thead","trows","frequency","function","api","text","RestInfo","apilist","forEach","item","functions","push","information","join","RestExecute","JSON","stringify","op","seconds","FileList","loadFiles","hasOwnProperty","mode","directory","files","undefined","fullpath","status","alert","substr","src","path","alt","className","styles","href","target","rel","updateService","spinner","service","inactive","StartButton","StopButton","label","extra"],"mappings":"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","file":"static/js/19.cd380d4a.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call } from './infra/Functions.js';\nimport { RimsContext, Title, Spinner, Article, CodeArticle, LineArticle, ContentReport, ContentList, ContentData } from './infra/UI.jsx';\nimport { StartButton, StopButton, HrefButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton, NavInfo, NavReload } from './infra/Navigation.jsx';\nimport { TextLine } from './infra/Inputs.jsx'\n\nimport styles from './infra/ui.module.css';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = {navinfo:[], navitems:[], logs:[], services:[] }\n }\n\n componentDidMount(){\n  rest_call('api/system/service_list').then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n  rest_call('api/master/inventory',{node:this.context.settings.node, user_id:this.context.settings.id}).then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.compileNavItems();\n }\n\n compileNavItems = () => {\n  const master = (this.context.settings.node === 'master')\n  this.context.loadNavigation(<NavBar key='system_navbar'>\n   {master && <NavButton key='sys_nav_node' title='Nodes' onClick={() => this.changeImport('node','List')} />}\n   {master && <NavButton key='sys_nav_srv' title='Servers' onClick={() => this.changeImport('server','List')} />}\n   {master && <NavButton key='sys_nav_erd' title='ERD'     onClick={() => window.open('erd.pdf','_blank')} />}\n   {master && <NavButton key='sys_nav_user' title='Users'  onClick={() => this.changeImport('user','List')} />}\n   {master && <NavButton key='sys_nav_ctrl' title='Controls' onClick={() => this.changeContent(<Controls key='system_controls' />)} />}\n   <NavDropDown key='sys_nav_reports' title='Reports'>\n    <NavDropButton key='sys_nav_sys' title='System' onClick={() => this.changeContent(<Report key='system_report' />)} />\n    <NavDropButton key='sys_nav_task' title='Tasks' onClick={() => this.changeContent(<TaskReport key='task_report' />)} />\n    {master && <NavDropButton key='sys_nav_act' title='Activities' onClick={() => this.changeImport('activity','Report')} />}\n    {master && <NavDropButton key='sys_nav_resv' title='Reservations' onClick={() => this.changeImport('reservation','Report')} />}\n    {master && <NavDropButton key='sys_nav_dev' title='Devices' onClick={() => this.changeImport('device','Report')} />}\n    {master && <NavDropButton key='sys_nav_inv' title='Inventory' onClick={() => this.changeImport('inventory','Report')} />}\n   </NavDropDown>\n   <NavButton key='sys_nav_logs' title='Logs' onClick={() => this.changeImport('node','LogShow',{node:this.context.settings.node})} />\n   <NavButton key='sys_nav_rest' title='REST' onClick={() => this.changeContent(<RestList key='rest_list' />)} />\n   {this.state.services.length > 0 &&  <NavDropDown key='sys_nav_svcs' title='Services'>{this.state.services.map((row,idx) => <NavDropButton key={'sys_nav_svcs_'+idx} title={row.name} onClick={() => this.changeContent(<ServiceInfo key={row.name} {...row} /> )} />)}</NavDropDown>}\n   <NavReload key='sys_nav_reload' onClick={() => this.setState({content:null})} />\n   {this.state.navinfo.map((row,idx) => <NavInfo key={'sys_nav_ni_'+idx} title={row} />)}\n  </NavBar>)\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n changeImport(module,func,args){\n  import('./'+module+'.jsx').then(lib => {\n   var Elem = lib[func];\n   this.setState({content:<Elem key={module+'_'+func} {...args} />})\n  })\n }\n\n render(){\n  return <Fragment key='main_base'>{this.state.content}</Fragment>\n }\n}\nMain.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/report').then(result => this.setState({data:Object.keys(result).sort((a,b) => a.localeCompare(b)).map(key => ({info:key,value:result[key]})) }))\n }\n\n listItem = (row) => [row.info,row.value]\n\n render(){\n  return <ContentReport key='sys_cr' header='System Report' thead={['Key','Value']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TaskReport **************\n//\nexport class TaskReport extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/task_list',{node:this.context.settings.node}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.frequency,row.module,row.function,row.args]\n\n render(){\n  return <ContentReport key='task_cr' header='Tasks' thead={['Node','Frequency','Module','Function','Arguments']} trows={this.state.data} listItem={this.listItem} />\n }\n}\nTaskReport.contextType = RimsContext;\n\n// ************** RestList **************\n//\nclass RestList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/rest_explore')\n   .then((result) => {\n    var apilist = [];\n    result.data.forEach(item => item.functions.forEach(row => apilist.push({api:item.api, function:row})  ) );\n    this.setState({data:apilist});\n   })\n }\n\n listItem = (row) => [row.api,<HrefButton key={'rest_' + row.api} text={row.function} onClick={() => { this.changeContent(<RestInfo key={`rest_info_${row.api}_${row.function}`} {...row} />)}} />]\n\n changeContent = (elem) => this.setState({content:elem})\n\n render(){\n  return <Fragment key='rest_tp_fragment'>\n   <ContentList key='rest_tp_cl' header='REST API' thead={['API','Function']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='rest_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** RestInfo **************\n//\nclass RestInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/rest_information',{api:this.props.api, function:this.props.function}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.module && this.state.information) {\n   return(\n    <Article key='ri_art' header={this.props.api}>\n     {this.state.module.join('\\n')}\n     <Title text={this.props.function} />\n     {this.state.information.join('\\n')}\n    </Article>\n   )\n  } else\n   return <Spinner />\n }\n}\n\n// ************************ REST Execute ********************\n//\nclass RestExecute extends Component {\n componentDidMount(){\n  rest_call('api/' + this.props.api,this.props.args).then(result => this.setState(result))\n }\n\n render(){\n  return (this.state) ? <CodeArticle key='re_code' header={this.props.text}>{JSON.stringify(this.state,null,2)}</CodeArticle> : <Spinner />\n }\n}\n\n// ************************ Controls ********************\n//\n// TODO: List should be dynamic from config and passed through REST engine\nclass Controls extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:[\n   {api:'ipam/address_events',text:'IPAM clear all status logs',args:{op:'clear'}},\n   {api:'device/log_clear',text:'Device clear all status logs'},\n   {api:'ipam/check',text:'IPAM status check'},\n   {api:'interface/check',text:'Interface status check'},\n   {api:'device/network_info_discover',text:'Discover device system information (sysmac etc)'},\n   {api:'device/model_sync',text:'Sync device model mapping'},\n   {api:'device/vm_mapping',text:'VM UUID mapping'},\n   {api:'master/oui_fetch',text:'Sync OUI database'},\n   {api:'reservation/expiration_status',text:'Check reservation status'},\n   {api:'system/sleep',text:'Sleep Test', args:{seconds:10}}\n  ]}\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n listItem = (row) => [<HrefButton key={'ctrl_' + row.api} text={row.text} onClick={() => { this.changeContent(<RestExecute key={'rest_' + row.api} {...row} />)}} />]\n\n render(){\n  return <Fragment key='ctl_fragment'>\n   <ContentList key='ctl_cl' header='' thead={['API']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='ctl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** File List **************\n//\nexport class FileList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidUpdate(prevProps){\n  if (prevProps !== this.props)\n   this.loadFiles();\n }\n\n componentDidMount(){\n  this.loadFiles()\n }\n\n loadFiles = () => {\n  let state = {};\n  if (this.props.hasOwnProperty('directory'))\n   state = {mode:'directory',args:{directory:this.props.directory},files:undefined}\n  else if (this.props.hasOwnProperty('fullpath'))\n   state = {mode:'fullpath',args:{fullpath:this.props.fullpath},files:undefined}\n  else\n   state = {mode:'images',args:{},files:undefined}\n  rest_call('api/system/file_list',state.args).then(result => {\n   if (result.status === 'OK')\n    this.setState({mode:state.mode,...result})\n   else {\n    window.alert('Error retrieving files:' + result.info);\n    this.setState({files:[]})\n   }\n  })\n }\n\n listItem = (row) => {\n  if (this.state.mode === 'images')\n   return (row.substr(row.length - 4) === '.png') ? [row,<img src={this.state.path +'/'+row} alt={this.state.path +'/'+row} />] : []\n  else\n   return [<Fragment key={row}>{this.state.path + '/'}<a className={styles.href} href={this.state.path + '/' + row} target='_blank' rel='noopener noreferrer'>{row}</a></Fragment>]\n }\n\n render() {\n  return (!this.state.files) ? <Spinner /> : <ContentReport header={this.state.mode} thead={[]} trows={this.state.files} listItem={this.listItem} />\n }\n}\n\n// ************** Service Info **************\n//\nclass ServiceInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {state:'inactive'}\n }\n\n componentDidMount(){\n  this.updateService({})\n }\n\n updateService(args){\n  // Always do a reset (so do a spinner)\n  this.setState({spinner:<Spinner />})\n  rest_call('api/system/service_info',{service:this.props.service,...args}).then(result => {\n   if (result.status === 'OK')\n    this.setState({...result,spinner:null})\n   else\n    window.alert('Error retrieving service state:' + result.info);\n  })\n }\n\n render() {\n  const inactive = (this.state.state === 'inactive');\n  const Elem = (inactive) ? StartButton : StopButton;\n  return <LineArticle key='svc_art'>\n    <TextLine key='service_line' id='service' label={this.props.name} text={this.state.state + ' (' +this.state.extra +')'} /><Elem key={'state_change'} onClick={() => this.updateService({op:(inactive) ? 'start' : 'stop'})} title='Operate service' />\n    {this.state.spinner}\n   </LineArticle>\n }\n}\n"],"sourceRoot":""}