{"version":3,"sources":["system.jsx"],"names":["Main","props","compileNavItems","master","context","cookie","node","loadNavigation","key","title","onClick","changeImport","window","open","changeContent","Controls","Report","TaskReport","RestList","state","services","length","map","row","idx","name","ServiceInfo","setState","content","navinfo","elem","navitems","logs","rest_call","then","result","Object","assign","this","user_id","id","prevProps","module","func","lib","Elem","Component","contextType","RimsContext","listItem","info","value","data","keys","sort","a","b","localeCompare","header","thead","trows","frequency","function","args","api","text","RestInfo","apilist","forEach","item","functions","push","information","className","index","RestExecute","JSON","stringify","op","seconds","FileList","loadFiles","hasOwnProperty","mode","directory","files","undefined","fullpath","status","alert","substr","src","path","alt","href","target","rel","cells","updateService","spinner","service","inactive","StartButton","StopButton","label","extra"],"mappings":"2WASaA,EAAb,YACC,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KAoBPC,gBAAkB,WACjB,IAAMC,EAAuC,WAA7B,EAAKC,QAAQC,OAAOC,KACpC,EAAKF,QAAQG,eAAe,kBAAC,SAAD,CAAQC,IAAI,iBACtCL,GAAU,kBAAC,YAAD,CAAWK,IAAI,eAAeC,MAAM,QAAQC,QAAS,kBAAM,EAAKC,aAAa,OAAO,WAC9FR,GAAU,kBAAC,YAAD,CAAWK,IAAI,cAAcC,MAAM,UAAUC,QAAS,kBAAM,EAAKC,aAAa,SAAS,WACjGR,GAAU,kBAAC,YAAD,CAAWK,IAAI,cAAcC,MAAM,MAAUC,QAAS,kBAAME,OAAOC,KAAK,UAAU,aAC5FV,GAAU,kBAAC,YAAD,CAAWK,IAAI,eAAeC,MAAM,QAASC,QAAS,kBAAM,EAAKC,aAAa,OAAO,WAC/FR,GAAU,kBAAC,YAAD,CAAWK,IAAI,eAAeC,MAAM,WAAWC,QAAS,kBAAM,EAAKI,cAAc,kBAACC,EAAD,CAAUP,IAAI,wBAC1G,kBAAC,cAAD,CAAaA,IAAI,kBAAkBC,MAAM,WACxC,kBAAC,gBAAD,CAAeD,IAAI,cAAcC,MAAM,SAASC,QAAS,kBAAM,EAAKI,cAAc,kBAACE,EAAD,CAAQR,IAAI,sBAC9F,kBAAC,gBAAD,CAAeA,IAAI,eAAeC,MAAM,QAAQC,QAAS,kBAAM,EAAKI,cAAc,kBAACG,EAAD,CAAYT,IAAI,oBACjGL,GAAU,kBAAC,gBAAD,CAAeK,IAAI,cAAcC,MAAM,aAAaC,QAAS,kBAAM,EAAKC,aAAa,WAAW,aAC1GR,GAAU,kBAAC,gBAAD,CAAeK,IAAI,eAAeC,MAAM,eAAeC,QAAS,kBAAM,EAAKC,aAAa,cAAc,aAChHR,GAAU,kBAAC,gBAAD,CAAeK,IAAI,cAAcC,MAAM,UAAUC,QAAS,kBAAM,EAAKC,aAAa,SAAS,aACrGR,GAAU,kBAAC,gBAAD,CAAeK,IAAI,cAAcC,MAAM,YAAYC,QAAS,kBAAM,EAAKC,aAAa,YAAY,cAE5G,kBAAC,YAAD,CAAWH,IAAI,eAAeC,MAAM,OAAOC,QAAS,kBAAM,EAAKI,cAAc,kBAACI,EAAD,CAAUV,IAAI,kBAC1F,EAAKW,MAAMC,SAASC,OAAS,GAAM,kBAAC,cAAD,CAAab,IAAI,eAAeC,MAAM,YAAY,EAAKU,MAAMC,SAASE,KAAI,SAACC,EAAIC,GAAL,OAAa,kBAAC,gBAAD,CAAehB,IAAK,gBAAgBgB,EAAKf,MAAOc,EAAIE,KAAMf,QAAS,kBAAM,EAAKI,cAAc,kBAACY,EAAD,eAAalB,IAAKe,EAAIE,MAAUF,YACvP,kBAAC,YAAD,CAAWf,IAAI,iBAAiBE,QAAS,kBAAM,EAAKiB,SAAS,CAACC,QAAQ,UACrE,EAAKT,MAAMU,QAAQP,KAAI,SAACC,EAAIC,GAAL,OAAa,kBAAC,UAAD,CAAShB,IAAK,cAAcgB,EAAKf,MAAOc,UAxC7D,EA4ClBT,cAAgB,SAACgB,GAAD,OAAU,EAAKH,SAAS,CAACC,QAAQE,KA1ChD,EAAKX,MAAQ,CAACU,QAAQ,GAAIE,SAAS,GAAIC,KAAK,GAAIZ,SAAS,IAFxC,EADnB,iFAMqB,IAAD,OAClBa,YAAU,2BAA2BC,MAAK,SAAAC,GACzCC,OAAOC,OAAO,EAAKlB,MAAMgB,GACzB,EAAKjC,qBAEN+B,YAAU,uBAAuB,CAAC3B,KAAKgC,KAAKlC,QAAQC,OAAOC,KAAMiC,QAAQD,KAAKlC,QAAQC,OAAOmC,KAAKN,MAAK,SAAAC,GACtGC,OAAOC,OAAO,EAAKlB,MAAMgB,GACzB,EAAKjC,uBAbR,yCAiBoBuC,GACfA,IAAcH,KAAKrC,OACrBqC,KAAKpC,oBAnBR,mCA+CcwC,EAAOC,GAAM,IAAD,OACxB,MAAO,KAAKD,EAAO,QAAQR,MAAK,SAAAU,GAC/B,IAAIC,EAAOD,EAAID,GACf,EAAKhB,SAAS,CAACC,QAAQ,kBAACiB,EAAD,CAAMrC,IAAKkC,EAAO,IAAIC,WAlDhD,+BAuDE,OAAO,kBAAC,WAAD,CAAUnC,IAAI,aAAa8B,KAAKnB,MAAMS,aAvD/C,GAA0BkB,aA0D1B9C,EAAK+C,YAAcC,IAIZ,IAAMhC,EAAb,YACC,WAAYf,GAAO,IAAD,8BACjB,4CAAMA,KAQPgD,SAAW,SAAC1B,GAAD,MAAS,CAACA,EAAI2B,KAAK3B,EAAI4B,QAPjC,EAAKhC,MAAQ,GAFI,EADnB,iFAMqB,IAAD,OAClBc,YAAU,iBAAiBC,MAAK,SAAAC,GAAM,OAAI,EAAKR,SAAS,CAACyB,KAAKhB,OAAOiB,KAAKlB,GAAQmB,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,cAAcD,MAAIlC,KAAI,SAAAd,GAAG,MAAK,CAAC0C,KAAK1C,EAAI2C,MAAMhB,EAAO3B,cAPzJ,+BAaE,OAAO,kBAAC,gBAAD,CAAeA,IAAI,SAASkD,OAAO,gBAAgBC,MAAO,CAAC,MAAM,SAAUC,MAAOtB,KAAKnB,MAAMiC,KAAMH,SAAUX,KAAKW,eAb3H,GAA4BH,aAmBf7B,EAAb,YACC,WAAYhB,GAAO,IAAD,8BACjB,4CAAMA,KAQPgD,SAAW,SAAC1B,GAAD,MAAS,CAACA,EAAIjB,KAAKiB,EAAIsC,UAAUtC,EAAImB,OAAOnB,EAAIuC,SAASvC,EAAIwC,OAPvE,EAAK5C,MAAQ,GAFI,EADnB,iFAMqB,IAAD,OAClBc,YAAU,uBAAuB,CAAC3B,KAAKgC,KAAKlC,QAAQC,OAAOC,OAAO4B,MAAK,SAAAC,GAAM,OAAI,EAAKR,SAASQ,QAPjG,+BAaE,OAAO,kBAAC,gBAAD,CAAe3B,IAAI,UAAUkD,OAAO,QAAQC,MAAO,CAAC,OAAO,YAAY,SAAS,WAAW,aAAcC,MAAOtB,KAAKnB,MAAMiC,KAAMH,SAAUX,KAAKW,eAbzJ,GAAgCH,aAgBhC7B,EAAW8B,YAAcC,I,IAInB9B,E,YACL,WAAYjB,GAAO,IAAD,8BACjB,4CAAMA,KAaPgD,SAAW,SAAC1B,GAAD,MAAS,CAACA,EAAIyC,IAAI,kBAAC,aAAD,CAAYxD,IAAK,QAAUe,EAAIyC,IAAKC,KAAM1C,EAAIuC,SAAUpD,QAAS,WAAQ,EAAKI,cAAc,kBAACoD,EAAD,eAAU1D,IAAG,oBAAee,EAAIyC,IAAnB,YAA0BzC,EAAIuC,WAAgBvC,UAdlK,EAgBlBT,cAAgB,SAACgB,GAAD,OAAU,EAAKH,SAAS,CAACC,QAAQE,KAdhD,EAAKX,MAAQ,GAFI,E,iFAKE,IAAD,OAClBc,YAAU,2BACRC,MAAK,SAACC,GACN,IAAIgC,EAAU,GACdhC,EAAOiB,KAAKgB,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,UAAUF,SAAQ,SAAA7C,GAAG,OAAI4C,EAAQI,KAAK,CAACP,IAAIK,EAAKL,IAAKF,SAASvC,UAC/F,EAAKI,SAAS,CAACyB,KAAKe,S,+BAStB,OAAO,kBAAC,WAAD,CAAU3D,IAAI,oBACpB,kBAAC,cAAD,CAAaA,IAAI,aAAakD,OAAO,WAAWC,MAAO,CAAC,MAAM,YAAaC,MAAOtB,KAAKnB,MAAMiC,KAAMH,SAAUX,KAAKW,WAClH,kBAAC,cAAD,CAAazC,IAAI,cAAc8B,KAAKnB,MAAMS,c,GAtBtBkB,aA6BjBoB,E,YACL,WAAYjE,GAAO,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,GAFI,E,iFAKE,IAAD,OAClBc,YAAU,8BAA8B,CAAC+B,IAAI1B,KAAKrC,MAAM+D,IAAKF,SAASxB,KAAKrC,MAAM6D,WAAW5B,MAAK,SAAAC,GAAM,OAAI,EAAKR,SAASQ,Q,+BAIzH,OAAIG,KAAKnB,MAAMuB,QAAUJ,KAAKnB,MAAMqD,YAElC,6BAASC,UAAU,QAClB,oCAAUnC,KAAKrC,MAAM+D,KACpB1B,KAAKnB,MAAMuB,OAAOpB,KAAI,SAACC,EAAImD,GAAW,OAAO,uBAAGlE,IAAK,OAAOkE,GAAQnD,MACrE,yCAAee,KAAKrC,MAAM6D,UACzBxB,KAAKnB,MAAMqD,YAAYlD,KAAI,SAACC,EAAImD,GAAW,OAAO,uBAAGlE,IAAK,OAAOkE,GAAQnD,OAIrE,kBAAC,UAAD,U,GArBauB,aA2BjB6B,E,4LACe,IAAD,OAClB1C,YAAU,OAASK,KAAKrC,MAAM+D,IAAI1B,KAAKrC,MAAM8D,MAAM7B,MAAK,SAAAC,GAAM,OAAI,EAAKR,SAASQ,Q,+BAIhF,OAAQG,KAAKnB,MAAS,6BAASsD,UAAU,QAAO,4BAAKnC,KAAKrC,MAAMgE,MAAU,6BAAMW,KAAKC,UAAUvC,KAAKnB,MAAM,KAAK,KAAsB,kBAAC,UAAD,U,GAN7G2B,aAapB/B,E,YACL,WAAYd,GAAO,IAAD,8BACjB,4CAAMA,KAcPa,cAAgB,SAACgB,GAAD,OAAU,EAAKH,SAAS,CAACC,QAAQE,KAf/B,EAiBlBmB,SAAW,SAAC1B,GAAD,MAAS,CAAC,kBAAC,aAAD,CAAYf,IAAK,QAAUe,EAAIyC,IAAKC,KAAM1C,EAAI0C,KAAMvD,QAAS,WAAQ,EAAKI,cAAc,kBAAC6D,EAAD,eAAanE,IAAK,QAAUe,EAAIyC,KAASzC,UAfrJ,EAAKJ,MAAQ,CAACiC,KAAK,CAClB,CAACY,IAAI,aAAaC,KAAK,qBACvB,CAACD,IAAI,sBAAsBC,KAAK,yBAAyBF,KAAK,CAACe,GAAG,UAClE,CAACd,IAAI,kBAAkBC,KAAK,0BAC5B,CAACD,IAAI,+BAA+BC,KAAK,mDACzC,CAACD,IAAI,oBAAoBC,KAAK,6BAC9B,CAACD,IAAI,oBAAoBC,KAAK,mBAC9B,CAACD,IAAI,mBAAmBC,KAAK,qBAC7B,CAACD,IAAI,gCAAgCC,KAAK,4BAC1C,CAACD,IAAI,eAAeC,KAAK,aAAcF,KAAK,CAACgB,QAAQ,OAXrC,E,sEAoBjB,OAAO,kBAAC,WAAD,CAAUvE,IAAI,gBACpB,kBAAC,cAAD,CAAaA,IAAI,SAASkD,OAAO,GAAGC,MAAO,CAAC,OAAQC,MAAOtB,KAAKnB,MAAMiC,KAAMH,SAAUX,KAAKW,WAC3F,kBAAC,cAAD,CAAazC,IAAI,UAAU8B,KAAKnB,MAAMS,c,GAvBlBkB,aA8BVkC,EAAb,YACC,WAAY/E,GAAO,IAAD,8BACjB,4CAAMA,KAaPgF,UAAY,WACX,IAAI9D,EAAQ,GAEXA,EADG,EAAKlB,MAAMiF,eAAe,aACrB,CAACC,KAAK,YAAYpB,KAAK,CAACqB,UAAU,EAAKnF,MAAMmF,WAAWC,WAAMC,GAC9D,EAAKrF,MAAMiF,eAAe,YAC1B,CAACC,KAAK,WAAWpB,KAAK,CAACwB,SAAS,EAAKtF,MAAMsF,UAAUF,WAAMC,GAE3D,CAACH,KAAK,SAASpB,KAAK,GAAGsB,WAAMC,GACtCrD,YAAU,uBAAuBd,EAAM4C,MAAM7B,MAAK,SAAAC,GAC3B,OAAlBA,EAAOqD,OACV,EAAK7D,SAAL,aAAewD,KAAKhE,EAAMgE,MAAQhD,KAElCvB,OAAO6E,MAAM,0BAA4BtD,EAAOe,MAChD,EAAKvB,SAAS,CAAC0D,MAAM,UA3BN,EAgClBpC,SAAW,SAAC1B,GACX,MAAwB,WAApB,EAAKJ,MAAMgE,KACyB,SAA/B5D,EAAImE,OAAOnE,EAAIF,OAAS,GAAiB,CAACE,EAAI,yBAAKoE,IAAK,EAAKxE,MAAMyE,KAAM,IAAIrE,EAAKsE,IAAK,EAAK1E,MAAMyE,KAAM,IAAIrE,KAAW,GAExH,CAAC,kBAAC,WAAD,CAAUf,IAAKe,GAAM,EAAKJ,MAAMyE,KAAO,IAAI,uBAAGE,KAAM,EAAK3E,MAAMyE,KAAO,IAAMrE,EAAKwE,OAAO,SAASC,IAAI,uBAAuBzE,MAlCrI,EAAKJ,MAAQ,GAFI,EADnB,gFAMoBsB,GACdA,IAAcH,KAAKrC,OACtBqC,KAAK2C,cARR,0CAYE3C,KAAK2C,cAZP,+BAwCW,IAAD,OACR,OAAK3C,KAAKnB,MAAMkE,MAId,6BAASZ,UAAU,SAClB,4BAAKnC,KAAKnB,MAAMgE,MAChB,yBAAKV,UAAU,SACd,yBAAKA,UAAU,SACdnC,KAAKnB,MAAMkE,MAAM/D,KAAI,SAACC,EAAImD,GAAL,OAAe,kBAAC,WAAD,CAAUlE,IAAK,sBAAsBkE,EAAOuB,MAAO,EAAKhD,SAAS1B,WAPlG,kBAAC,UAAD,UA1CV,GAA8BuB,aA2DxBpB,E,YACL,WAAYzB,GAAO,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CAACA,MAAM,YAFH,E,iFAMjBmB,KAAK4D,cAAc,M,oCAGNnC,GAAM,IAAD,OAElBzB,KAAKX,SAAS,CAACwE,QAAQ,kBAAC,UAAD,QACvBlE,YAAU,0BAAD,aAA4BmE,QAAQ9D,KAAKrC,MAAMmG,SAAWrC,IAAO7B,MAAK,SAAAC,GACxD,OAAlBA,EAAOqD,OACV,EAAK7D,SAAL,eAAkBQ,EAAlB,CAAyBgE,QAAQ,QAEjCvF,OAAO6E,MAAM,kCAAoCtD,EAAOe,W,+BAIjD,IAAD,OACFmD,EAAiC,aAArB/D,KAAKnB,MAAMA,MACvB0B,EAAQwD,EAAYC,cAAcC,aACxC,OACC,6BAAS9B,UAAU,aAClB,6BACC,kBAAC,WAAD,CAAUjE,IAAI,eAAegC,GAAG,UAAUgE,MAAOlE,KAAKrC,MAAMwB,KAAMwC,KAAM3B,KAAKnB,MAAMA,MAAQ,KAAMmB,KAAKnB,MAAMsF,MAAO,MAAO,kBAAC5D,EAAD,CAAMrC,IAAK,eAAgBE,QAAS,kBAAM,EAAKwF,cAAc,CAACpB,GAAIuB,EAAY,QAAU,UAAU5F,MAAM,qBAElO6B,KAAKnB,MAAMgF,a,GA7BUrD","file":"static/js/19.b70217f7.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call, RimsContext } from './infra/Functions.js';\nimport { Spinner, TableRow, ContentReport, ContentList, ContentData } from './infra/UI.jsx';\nimport { StartButton, StopButton, HrefButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton, NavInfo, NavReload } from './infra/Navigation.jsx';\nimport { TextLine } from './infra/Inputs.jsx'\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = {navinfo:[], navitems:[], logs:[], services:[] }\n }\n\n componentDidMount(){\n  rest_call('api/system/service_list').then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n  rest_call('api/master/inventory',{node:this.context.cookie.node, user_id:this.context.cookie.id}).then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.compileNavItems();\n }\n\n compileNavItems = () => {\n  const master = (this.context.cookie.node === 'master')\n  this.context.loadNavigation(<NavBar key='system_navbar'>\n   {master && <NavButton key='sys_nav_node' title='Nodes' onClick={() => this.changeImport('node','List')} />}\n   {master && <NavButton key='sys_nav_srv' title='Servers' onClick={() => this.changeImport('server','List')} />}\n   {master && <NavButton key='sys_nav_erd' title='ERD'     onClick={() => window.open('erd.pdf','_blank')} />}\n   {master && <NavButton key='sys_nav_user' title='Users'  onClick={() => this.changeImport('user','List')} />}\n   {master && <NavButton key='sys_nav_ctrl' title='Controls' onClick={() => this.changeContent(<Controls key='system_controls' />)} />}\n   <NavDropDown key='sys_nav_reports' title='Reports'>\n    <NavDropButton key='sys_nav_sys' title='System' onClick={() => this.changeContent(<Report key='system_report' />)} />\n    <NavDropButton key='sys_nav_task' title='Tasks' onClick={() => this.changeContent(<TaskReport key='task_report' />)} />\n    {master && <NavDropButton key='sys_nav_act' title='Activities' onClick={() => this.changeImport('activity','Report')} />}\n    {master && <NavDropButton key='sys_nav_resv' title='Reservations' onClick={() => this.changeImport('reservation','Report')} />}\n    {master && <NavDropButton key='sys_nav_dev' title='Devices' onClick={() => this.changeImport('device','Report')} />}\n    {master && <NavDropButton key='sys_nav_inv' title='Inventory' onClick={() => this.changeImport('inventory','Report')} />}\n   </NavDropDown>\n   <NavButton key='sys_nav_rest' title='REST' onClick={() => this.changeContent(<RestList key='rest_list' />)} />\n   {this.state.services.length > 0 &&  <NavDropDown key='sys_nav_svcs' title='Services'>{this.state.services.map((row,idx) => <NavDropButton key={'sys_nav_svcs_'+idx} title={row.name} onClick={() => this.changeContent(<ServiceInfo key={row.name} {...row} /> )} />)}</NavDropDown>}\n   <NavReload key='sys_nav_reload' onClick={() => this.setState({content:null})} />\n   {this.state.navinfo.map((row,idx) => <NavInfo key={'sys_nav_ni_'+idx} title={row} />)}\n  </NavBar>)\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n changeImport(module,func){\n  import('./'+module+'.jsx').then(lib => {\n   var Elem = lib[func];\n   this.setState({content:<Elem key={module+'_'+func} />})\n  })\n }\n\n render(){\n  return <Fragment key='main_base'>{this.state.content}</Fragment>\n }\n}\nMain.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('system/report').then(result => this.setState({data:Object.keys(result).sort((a,b) => a.localeCompare(b)).map(key => ({info:key,value:result[key]})) }))\n }\n\n listItem = (row) => [row.info,row.value]\n\n render(){\n  return <ContentReport key='sys_cr' header='System Report' thead={['Key','Value']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TaskReport **************\n//\nexport class TaskReport extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/task_list',{node:this.context.cookie.node}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.frequency,row.module,row.function,row.args]\n\n render(){\n  return <ContentReport key='task_cr' header='Tasks' thead={['Node','Frequency','Module','Function','Arguments']} trows={this.state.data} listItem={this.listItem} />\n }\n}\nTaskReport.contextType = RimsContext;\n\n// ************** RestList **************\n//\nclass RestList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/rest_explore')\n   .then((result) => {\n    var apilist = [];\n    result.data.forEach(item => item.functions.forEach(row => apilist.push({api:item.api, function:row})  ) );\n    this.setState({data:apilist});\n   })\n }\n\n listItem = (row) => [row.api,<HrefButton key={'rest_' + row.api} text={row.function} onClick={() => { this.changeContent(<RestInfo key={`rest_info_${row.api}_${row.function}`} {...row} />)}} />]\n\n changeContent = (elem) => this.setState({content:elem})\n\n render(){\n  return <Fragment key='rest_tp_fragment'>\n   <ContentList key='rest_tp_cl' header='REST API' thead={['API','Function']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='rest_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** RestInfo **************\n//\nclass RestInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/rest_information',{api:this.props.api, function:this.props.function}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.module && this.state.information) {\n   return(\n    <article className='text'>\n     <h1>API: {this.props.api}</h1>\n     {this.state.module.map((row,index) => {return <p key={'ria_'+index}>{row}</p> })}\n     <h1>Function: {this.props.function}</h1>\n     {this.state.information.map((row,index) => {return <p key={'rif_'+index}>{row}</p> })}\n    </article>\n   )\n  } else\n   return <Spinner />\n }\n}\n\n// ************************ REST Execute ********************\n//\nclass RestExecute extends Component {\n componentDidMount(){\n  rest_call('api/' + this.props.api,this.props.args).then(result => this.setState(result))\n }\n\n render(){\n  return (this.state) ? <article className='code'><h1>{this.props.text}</h1><pre>{JSON.stringify(this.state,null,2)}</pre></article> : <Spinner />\n }\n}\n\n// ************************ Controls ********************\n//\n// TODO: List should be dynamic from config and passed through REST engine\nclass Controls extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:[\n   {api:'ipam/check',text:'IPAM status check'},\n   {api:'ipam/address_events',text:'IPAM clear status logs',args:{op:'clear'}},\n   {api:'interface/check',text:'Interface status check'},\n   {api:'device/network_info_discover',text:'Discover device system information (sysmac etc)'},\n   {api:'device/model_sync',text:'Sync device model mapping'},\n   {api:'device/vm_mapping',text:'VM UUID mapping'},\n   {api:'master/oui_fetch',text:'Sync OUI database'},\n   {api:'reservation/expiration_status',text:'Check reservation status'},\n   {api:'system/sleep',text:'Sleep Test', args:{seconds:10}}\n  ]}\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n listItem = (row) => [<HrefButton key={'ctrl_' + row.api} text={row.text} onClick={() => { this.changeContent(<RestExecute key={'rest_' + row.api} {...row} />)}} />]\n\n render(){\n  return <Fragment key='ctl_fragment'>\n   <ContentList key='ctl_cl' header='' thead={['API']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='ctl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** File List **************\n//\nexport class FileList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidUpdate(prevProps){\n  if (prevProps !== this.props)\n   this.loadFiles();\n }\n\n componentDidMount(){\n  this.loadFiles()\n }\n\n loadFiles = () => {\n  let state = {};\n  if (this.props.hasOwnProperty('directory'))\n   state = {mode:'directory',args:{directory:this.props.directory},files:undefined}\n  else if (this.props.hasOwnProperty('fullpath'))\n   state = {mode:'fullpath',args:{fullpath:this.props.fullpath},files:undefined}\n  else\n   state = {mode:'images',args:{},files:undefined}\n  rest_call('api/system/file_list',state.args).then(result => {\n   if (result.status === 'OK')\n    this.setState({mode:state.mode,...result})\n   else {\n    window.alert('Error retrieving files:' + result.info);\n    this.setState({files:[]})\n   }\n  })\n }\n\n listItem = (row) => {\n  if (this.state.mode === 'images')\n   return (row.substr(row.length - 4) === '.png') ? [row,<img src={this.state.path +'/'+row} alt={this.state.path +'/'+row} />] : []\n  else\n   return [<Fragment key={row}>{this.state.path + '/'}<a href={this.state.path + '/' + row} target='_blank' rel='noopener noreferrer'>{row}</a></Fragment>]\n }\n\n render() {\n  if (!this.state.files)\n   return <Spinner />\n  else\n   return (\n    <article className='files'>\n     <h1>{this.state.mode}</h1>\n     <div className='table'>\n      <div className='tbody'>\n      {this.state.files.map((row,index) => <TableRow key={'content_trow_files_'+index} cells={this.listItem(row)} /> )}\n      </div>\n     </div>\n    </article>\n   )\n }\n}\n\n// ************** Service Info **************\n//\nclass ServiceInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {state:'inactive'}\n }\n\n componentDidMount(){\n  this.updateService({})\n }\n\n updateService(args){\n  // Always do a reset (so do a spinner)\n  this.setState({spinner:<Spinner />})\n  rest_call('api/system/service_info',{service:this.props.service,...args}).then(result => {\n   if (result.status === 'OK')\n    this.setState({...result,spinner:null})\n   else\n    window.alert('Error retrieving service state:' + result.info);\n  })\n }\n\n render() {\n  const inactive = (this.state.state === 'inactive');\n  const Elem = (inactive) ? StartButton : StopButton;\n  return (\n   <article className='lineinput'>\n    <div>\n     <TextLine key='service_line' id='service' label={this.props.name} text={this.state.state + ' (' +this.state.extra +')'} /><Elem key={'state_change'} onClick={() => this.updateService({op:(inactive) ? 'start' : 'stop'})} title='Operate service' />\n    </div>\n    {this.state.spinner}\n   </article>\n   );\n }\n}\n"],"sourceRoot":""}