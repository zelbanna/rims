{"version":3,"sources":["interface.jsx"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","rest_call","interfaces","then","result","deleted","setState","data","state","filter","row","JSON","stringify","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","listItem","mac","ip","snmp_index","description","class","connection_id","key","text","onClick","ConnectionInfo","id","title","if_state","ip_state","Info","op","this","header","thead","trows","rnd","LLDP","loader","Component","onChange","e","target","value","changeIpam","lib","AddressInfo","deleteIpam","ipam_id","status","updateInfo","updateDNS","hostname","deviceChange","connect","length","found","stateInterface","sort","interfaceChange","type","connectInterface","a_id","b_id","map","disconnectInterface","peer","disconnect","stateIpam","domains","networks","ipam","ipamChange","searchIP","network_id","createIpam","ipam_record","extra","label","idx","netasc","a_domain_id","columns","classes","info","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"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","file":"static/js/1.93b91319.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call, rnd } from './infra/Functions.js';\nimport { Spinner, StateLeds, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, NetworkButton, DeleteButton,ForwardButton, GoButton, InfoButton, LinkButton, ReloadButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && rest_call('api/interface/delete', {interfaces:[interface_id]}).then(result => (result.deleted > 0) && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && rest_call('api/interface/delete',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => rest_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && rest_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n listItem = (row) => [row.interface_id,row.mac,(row.ip) ? row.ip : '-',row.snmp_index,row.name,row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <StateLeds key={'il_if_state_' + row.interface_id} state={[row.if_state,row.ip_state]} />,<Fragment key={'il_btns_'+row.interface_id}>\n    <InfoButton key={'il_btn_info_' + row.interface_id} onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    <DeleteButton key={'il_btn_del_' + row.interface_id} onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && <LinkButton key={'il_btn_sync_' + row.interface_id} onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n   </Fragment>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['ID','MAC','IP','SNMP','Name','Description','Class','Link','','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key={'interface_info_' + rnd()} device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  rest_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, device_id:this.props.device_id, class:this.props.class, extra:['classes']}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />))\n\n deleteIpam = () => (window.confirm('Delete IP mapping?') && rest_call('api/ipam/address_delete',{id:this.state.data.ipam_id}).then(result => ((result.status === 'OK') && this.setState({data:{...this.state.data, ipam_id:null}}))))\n\n updateInfo = () => rest_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n updateDNS = () => (window.confirm('Update DNS with device-interface-name') && rest_call('api/ipam/address_info',{op:'update',hostname:this.state.data.name,id:this.state.data.ipam_id}).then(result => this.setState({result:JSON.stringify(result)})))\n\n deviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   rest_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n\n stateInterface = () => (this.state.connect.found && rest_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'interface'})))\n\n interfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n connectInterface = () => (this.state.connect.interface_id && rest_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n\n disconnectInterface = () => (this.state.peer && rest_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n\n stateIpam = () => {\n  if (this.state.domains && this.state.networks)\n   this.setState({op:'ipam'})\n  else\n   this.setState({op:'wait',ipam:{ip:''}})\n  if (!this.state.domains)\n   rest_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data}));\n  if (!this.state.networks)\n   rest_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:'ipam'}));\n }\n\n ipamChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n\n searchIP = () => {\n  if (this.state.ipam.network_id)\n   rest_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n\n createIpam = () => {\n  rest_call('api/interface/info',{interface_id:this.props.interface_id, op:'update', ipam_record:this.state.ipam}).then(result => this.setState({...result,op:null}))\n }\n\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.deviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'interface')\n     return <LineArticle key='ii_cnct_art'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='ii_cnct_int' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.interfaceChange}>\n       {this.state.interfaces.map(row => <option key={'ii_cnct_int_'+row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='ii_cnct_map' id='map' value={this.state.connect.map} onChange={this.interfaceChange} />\n      <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:'device'})} title='Back' />\n      <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.connectInterface()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ii_ipam_article' header='Create IPAM record'>\n      <InfoColumns key='ii_ipam_create'>\n       <SelectInput key='ii_ipam_net' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamChange}>{this.state.networks.map((row,idx) => <option key={'ii_net_'+idx} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ii_ipam_ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamChange} />\n       <SelectInput key='ii_ipam_dom' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamChange}>{this.state.domains.map((row,idx) => <option key={'ii_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='ii_ipam_btn_back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='ii_ipam_btn_find' onClick={() => this.searchIP()} title='Search IP within network' />\n      <ForwardButton key='ii_ipam_btn_fwd' onClick={() => this.createIpam()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const ipam = (this.state.data.ipam_id);\n    const peer = (this.state.peer);\n    return (<InfoArticle key='ii_article' header='Interface'>\n     <InfoColumns key='ii_columns' columns={3}>\n      <TextInput key='ii_name' id='name' value={this.state.data.name} onChange={this.onChange} /><div>{ipam && <SyncButton key='ii_btn_dns' onClick={() => this.updateDNS()} title='Sync DNS information using name' />}</div>\n      <SelectInput key='ii_class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={'ii_class_'+row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='ii_description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='ii_snmp_index' id='snmp_index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='ii_mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      <TextInput key='ii_ipam_id' id='ipam_id' value={this.state.data.ipam_id} onChange={this.onChange} /><div>\n       {ipam && <GoButton key='ii_ipam' onClick={() => this.changeIpam(this.state.data.ipam_id)} title='View IPAM information' />}\n       {ipam && <DeleteButton key='ii_delete' onClick={() => this.deleteIpam()} title='Delete IPAM entry' />}\n       {!ipam && this.state.data.interface_id !== 'new' && <AddButton key='ii_btn_ipam' onClick={() => this.stateIpam()} title='Create IPAM entry' />}\n      </div>\n      {peer && <Fragment key='ii_frag_peer_int'><TextLine key='ii_peer_int_id' id='peer_interface' label='Peer interface' text={this.state.peer.interface_id} /><UnlinkButton key='ii_peer_unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></Fragment>}\n      {peer && <Fragment key='ii_frag_peer_dev'><TextLine key='ii_peer_dev_id' id='peer_device' text={this.state.peer.device_id} /><div/></Fragment>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <BackButton key='ii_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />}\n     <ReloadButton key='ii_btn_reload' onClick={() => this.componentDidMount()} />\n     <SaveButton key='ii_btn_save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {!peer && this.state.data.interface_id !== 'new' && <NetworkButton key='ii_btn_connect' onClick={() => this.setState({op:'device'})} title='Connect peer interface' />}\n     <Result key='ii_result' result={(this.state.status !== 'OK') ? this.state.info : this.state.result} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => rest_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={'conn_int_'+idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}