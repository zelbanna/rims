{"version":3,"sources":["system.jsx"],"names":["Main","props","changeContent","elem","setState","content","compileNavItems","master","context","cookie","node","loadNavigation","key","title","onClick","changeImport","window","open","Controls","Report","TaskReport","RestList","state","services","length","map","row","idx","name","ServiceInfo","navinfo","navitems","logs","rest_call","then","result","Object","assign","this","user_id","id","module","func","lib","Elem","Component","contextType","RimsContext","listItem","info","value","data","keys","sort","a","b","localeCompare","header","thead","trows","frequency","function","args","api","text","RestInfo","apilist","forEach","item","functions","push","className","index","information","RestExecute","JSON","stringify","op","seconds","FileList","mode","substr","src","path","alt","href","target","rel","files","hasOwnProperty","directory","fullpath","status","alert","cells","updateService","spinner","service","inactive","StartButton","StopButton","extra"],"mappings":"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","file":"static/js/19.6d096570.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call} from './infra/Functions.js';\nimport { Spinner, TableRow, RimsContext, ContentReport, ContentList, ContentData } from './infra/UI.jsx';\nimport { StartButton, StopButton, HrefButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton, NavInfo, NavReload } from './infra/Navigation.js';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = {navinfo:[], navitems:[], logs:[], services:[] }\n }\n\n componentDidMount(){\n  rest_call('api/system/service_list').then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n  rest_call('api/master/inventory',{node:this.context.cookie.node, user_id:this.context.cookie.id}).then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n changeImport(module,func){\n  import('./'+module+'.jsx').then(lib => {\n   var Elem = lib[func];\n   this.setState({content:<Elem key={module+'_'+func} />})\n  })\n }\n\n compileNavItems = () => {\n  const master = (this.context.cookie.node === 'master')\n  this.context.loadNavigation(<NavBar key='system_navbar'>\n   {master && <NavButton key='sys_nav_node' title='Nodes' onClick={() => this.changeImport('node','List')} />}\n   {master && <NavButton key='sys_nav_srv' title='Servers' onClick={() => this.changeImport('server','List')} />}\n   {master && <NavButton key='sys_nav_erd' title='ERD'     onClick={() => window.open('erd.pdf','_blank')} />}\n   {master && <NavButton key='sys_nav_user' title='Users'  onClick={() => this.changeImport('user','List')} />}\n   {master && <NavButton key='sys_nav_ctrl' title='Controls' onClick={() => this.changeContent(<Controls key='system_controls' />)} />}\n   <NavDropDown key='sys_nav_reports' title='Reports'>\n    <NavDropButton key='sys_nav_sys' title='System' onClick={() => this.changeContent(<Report key='system_report' />)} />\n    <NavDropButton key='sys_nav_task' title='Tasks' onClick={() => this.changeContent(<TaskReport key='task_report' />)} />\n    {master && <NavDropButton key='sys_nav_act' title='Activities' onClick={() => this.changeImport('activity','Report')} />}\n    {master && <NavDropButton key='sys_nav_resv' title='Reservations' onClick={() => this.changeImport('reservation','Report')} />}\n    {master && <NavDropButton key='sys_nav_dev' title='Devices' onClick={() => this.changeImport('device','Report')} />}\n    {master && <NavDropButton key='sys_nav_inv' title='Inventory' onClick={() => this.changeImport('inventory','Report')} />}\n   </NavDropDown>\n   <NavButton key='sys_nav_rest' title='REST' onClick={() => this.changeContent(<RestList key='rest_list' />)} />\n   {this.state.services.length > 0 &&  <NavDropDown key='sys_nav_svcs' title='Services'>{this.state.services.map((row,idx) => <NavDropButton key={'sys_nav_svcs_'+idx} title={row.name} onClick={() => this.changeContent(<ServiceInfo key={row.name} {...row} /> )} />)}</NavDropDown>}\n   <NavReload key='sys_nav_reload' onClick={() => this.setState({content:null})} />\n   {this.state.navinfo.map((row,idx) => <NavInfo key={'sys_nav_ni_'+idx} title={row} />)}\n  </NavBar>)\n }\n\n render(){\n  return <Fragment key='main_base'>{this.state.content}</Fragment>\n }\n}\nMain.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('system/report').then(result => this.setState({data:Object.keys(result).sort((a,b) => a.localeCompare(b)).map(key => ({info:key,value:result[key]})) }))\n }\n\n listItem = (row) => [row.info,row.value]\n\n render(){\n  return <ContentReport key='sys_cr' header='System Report' thead={['Key','Value']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TaskReport **************\n//\nexport class TaskReport extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/task_list',{node:this.context.cookie.node}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.frequency,row.module,row.function,row.args]\n\n render(){\n  return <ContentReport key='task_cr' header='Tasks' thead={['Node','Frequency','Module','Function','Arguments']} trows={this.state.data} listItem={this.listItem} />\n }\n}\nTaskReport.contextType = RimsContext;\n\n// ************** RestList **************\n//\nclass RestList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/rest_explore')\n   .then((result) => {\n    var apilist = [];\n    result.data.forEach(item => item.functions.forEach(row => apilist.push({api:item.api, function:row})  ) );\n    this.setState({data:apilist});\n   })\n }\n\n listItem = (row) => [row.api,<HrefButton key={'rest_' + row.api} text={row.function} onClick={() => { this.changeContent(<RestInfo key={`rest_info_${row.api}_${row.function}`} {...row} />)}} />]\n\n changeContent = (elem) => this.setState({content:elem})\n\n render(){\n  return <Fragment key='rest_tp_fragment'>\n   <ContentList key='rest_tp_cl' header='REST API' thead={['API','Function']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='rest_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** RestInfo **************\n//\nclass RestInfo extends Component {\n\n componentDidMount(){\n  rest_call('api/system/rest_information',{api:this.props.api, function:this.props.function}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state) {\n   return(\n    <article className='text'>\n     <h1>API: {this.props.api}</h1>\n     {this.state.module.map((row,index) => {return <p key={'ria_'+index}>{row}</p> })}\n     <h1>Function: {this.props.function}</h1>\n     {this.state.information.map((row,index) => {return <p key={'rif_'+index}>{row}</p> })}\n    </article>\n   )\n  } else\n   return <Spinner />\n }\n}\n\n// ************************ REST Execute ********************\n//\nclass RestExecute extends Component {\n componentDidMount(){\n  rest_call('api/' + this.props.api,this.props.args).then(result => this.setState(result))\n }\n\n render(){\n  return (this.state) ? <article className='code'><h1>{this.props.text}</h1><pre>{JSON.stringify(this.state,null,2)}</pre></article> : <Spinner />\n }\n}\n\n// ************************ Controls ********************\n//\n// TODO: List should be dynamic from config and passed through REST engine\nclass Controls extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:[\n   {api:'monitor/ipam_init',text:'IPAM status check'},\n   {api:'ipam/address_events',text:'IPAM clear status logs',args:{op:'clear'}},\n   {api:'monitor/interface_init',text:'Interface status check'},\n   {api:'device/network_info_discover',text:'Discover device system information (sysmac etc)'},\n   {api:'device/model_sync',text:'Sync device model mapping'},\n   {api:'device/vm_mapping',text:'VM UUID mapping'},\n   {api:'master/oui_fetch',text:'Sync OUI database'},\n   {api:'reservation/expiration_status',text:'Check reservation status'},\n   {api:'system/sleep',text:'Sleep Test', args:{seconds:10}},\n  ]}\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n listItem = (row) => [<HrefButton key={'ctrl_' + row.api} text={row.text} onClick={() => { this.changeContent(<RestExecute key={'rest_' + row.api} {...row} />)}} />]\n\n render(){\n  return <Fragment key='ctl_fragment'>\n   <ContentList key='ctl_cl' header='' thead={['API']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='ctl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** File List **************\n//\nexport class FileList extends Component {\n constructor(props){\n  super(props)\n  this.state = {files:null}\n  if (this.props.hasOwnProperty('directory')){\n   this.state.mode = 'directory'\n   this.state.args = {directory:this.props.directory}\n  } else if (this.props.hasOwnProperty('fullpath')){\n   this.state.mode = 'fullpath'\n   this.state.args = {fullpath:this.props.fullpath}\n  } else {\n   this.state.mode = 'images'\n   this.state.args = {}\n  }\n }\n\n componentDidMount(){\n  rest_call('api/system/file_list',this.state.args).then(result => {\n   if (result.status === 'OK')\n    this.setState(result)\n   else {\n    window.alert('Error retrieving files:' + result.info);\n    this.setState({files:[]})\n   }\n  })\n }\n\n listItem = (row) => {\n  if (this.state.mode === 'images')\n   return (row.substr(row.length - 4) === '.png') ? [row,<img src={this.state.path +'/'+row} alt={this.state.path +'/'+row} />] : []\n  else\n   return [<Fragment key={row}>{this.state.path + '/'}<a href={this.state.path + '/' + row} target='_blank' rel='noopener noreferrer'>{row}</a></Fragment>]\n }\n\n render() {\n  if (!this.state.files)\n   return <Spinner />\n  else\n   return (\n    <article className='files'>\n     <h1>{this.state.mode}</h1>\n     <div className='table'>\n      <div className='tbody'>\n      {this.state.files.map((row,index) => <TableRow key={'content_trow_files_'+index} cells={this.listItem(row)} /> )}\n      </div>\n     </div>\n    </article>\n   )\n }\n}\n\n// ************** Service Info **************\n//\nclass ServiceInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {state:'inactive'}\n }\n\n componentDidMount(){\n  this.updateService({})\n }\n\n updateService(args){\n  // Always do a reset (so do a spinner)\n  this.setState({spinner:<Spinner />})\n  rest_call('api/system/service_info',{service:this.props.service,...args}).then(result => {\n   if (result.status === 'OK')\n    this.setState({...result,spinner:null})\n   else\n    window.alert('Error retrieving service state:' + result.info);\n  })\n }\n\n render() {\n  const inactive = (this.state.state === 'inactive');\n  const Elem = (inactive) ? StartButton : StopButton;\n  return (\n   <article className='lineinput'>\n    <div>\n     <b>{this.props.name}</b>: {this.state.state} ({this.state.extra}) <Elem key={'state_change'} onClick={() => this.updateService({op:(inactive) ? 'start' : 'stop'})} title='Operate service' />\n    </div>\n    {this.state.spinner}\n   </article>\n   );\n }\n}\n"],"sourceRoot":""}