{"version":3,"sources":["activity.jsx"],"names":["Main","props","changeContent","elem","setState","state","List","key","this","context","loadNavigation","title","onClick","TypeList","Report","Component","contextType","RimsContext","listItem","row","date","time","type","id","Info","deleteList","content","window","confirm","rest_call","then","result","deleted","data","filter","header","thead","trows","componentDidMount","rnd","onChange","e","target","name","value","updateInfo","op","found","user_id","cookie","className","label","users","map","idx","alias","type_id","types","htmlFor","event","user","group","mode","TypeInfo","placeholder"],"mappings":"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","file":"static/js/8.fc2936e8.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { rest_call, rnd } from './infra/Functions.js';\nimport { InfoColumns, Spinner, RimsContext, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, SelectInput, DateInput, TimeInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, InfoButton, ReloadButton, SaveButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton } from './infra/Navigation.js';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <List key='activity_list' />\n }\n\n componentDidMount(){\n  this.context.loadNavigation(<NavBar key='activity_navbar'>\n   <NavButton key='act_nav_list' title='Activities' onClick={() => this.changeContent(<List key='activity_list' />)} />\n   <NavButton key='act_nav_types' title='Types' onClick={() => this.changeContent(<TypeList key='activity_type_list' />)} />\n   <NavButton key='act_nav_report' title='Report' onClick={() => this.changeContent(<Report key='activity_report' />)} />\n  </NavBar>)\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n\n}\nMain.contextType = RimsContext;\n\n// ************** List **************\n//\nclass List extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/activity_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.type,<Fragment key={'activity_buttons_'+row.id}>\n   <InfoButton key={'act_info_'+row.id} onClick={() => this.changeContent(<Info key={'activity_'+row.id} id={row.id} />) } title='Activity information' />\n   <DeleteButton key={'act_delete_'+row.id} onClick={() => this.deleteList(row.id) } title='Delete activity' />\n   </Fragment>\n  ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Delete activity') && rest_call('api/master/activity_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='act_fragment'>\n   <ContentList key='act_cl' header='Activities' thead={['Date','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='act_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='act_btn_add' onClick={() => this.changeContent(<Info key={'activity_new_' + rnd()} id='new' />) } title='Add activity' />\n   </ContentList>\n   <ContentData key='act_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () =>  rest_call('api/master/activity_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/master/activity_info',{id:this.props.id}).then(result => {\n   if (result.data.user_id === null)\n    result.data.user_id = this.context.cookie.id;\n   this.setState(result);\n  })\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <article className='info'>\n     <h1>Activity</h1>\n     <InfoColumns key='activity_content'>\n      <SelectInput key='user_id' id='user_id' label='User' value={this.state.data.user_id} onChange={this.onChange}>{this.state.users.map((row,idx) => <option key={'ai_u_'+idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n      <SelectInput key='type_id' id='type_id' label='Type' value={this.state.data.type_id} onChange={this.onChange}>{this.state.types.map((row,idx) => <option key={'ai_t_'+idx} value={row.id}>{row.type}</option>)}</SelectInput>\n      <DateInput key='date' id='date' value={this.state.data.date} onChange={this.onChange} />\n      <TimeInput key='time' id='time' value={this.state.data.time} onChange={this.onChange} />\n     </InfoColumns>\n     <label htmlFor='event'>Info</label><textarea className='info' id='event' name='event' onChange={this.onChange} value={this.state.data.event} />\n     <SaveButton key='activity_save' onClick={() => this.updateInfo()} title='Save' />\n    </article>\n   );\n  else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/activity_list',{group:'month',mode:'full'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.user,row.type,row.event]\n\n render(){\n  return <ContentReport key='act_cr' header='Activities' thead={['Time','User','Type','Event']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TypeList **************\n//\nclass TypeList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/activity_type_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.type,<Fragment key='activity_buttons'>\n   <ConfigureButton key='act_tp_info' onClick={() => this.changeContent(<TypeInfo key={'activity_type_'+row.id} id={row.id} />) } title='Edit type information' />\n   <DeleteButton key='act_tp_delete' onClick={() => this.deleteList(row.id) } title='Delete type' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete type?') && rest_call('api/master/activity_type_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='act_tp_fragment'>\n   <ContentList key='act_tp_cl' header='Activity Types' thead={['ID','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='act_tp_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='act_tp_btn_add' onClick={() => this.changeContent(<TypeInfo key={'act_tp_new_' + rnd()} id='new' />) } title='Add activity type' />\n   </ContentList>\n   <ContentData key='act_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n\n}\n\n// *************** TypeInfo ***************\n//\nclass TypeInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true, content:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  rest_call('api/master/activity_type_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <article className='info'>\n     <h1>Activity Type</h1>\n     <InfoColumns key='activity_type_content'>\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder='name' />\n     </InfoColumns>\n     <SaveButton key='activity_type_save' onClick={() => this.updateInfo()} title='Save' />\n    </article>\n   )\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}