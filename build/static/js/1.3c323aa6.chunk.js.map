{"version":3,"sources":["interface.jsx"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","rest_call","interfaces","then","result","deleted","setState","data","state","filter","row","JSON","stringify","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","listItem","mac","ip","ipam_id","snmp_index","description","class","connection_id","key","text","onClick","ConnectionInfo","id","title","className","if_state","ip_state","Info","op","this","header","thead","trows","rnd","LLDP","loader","Component","onChange","e","target","value","changeIpam","lib","AddressInfo","deleteIpam","status","updateInfo","updateDNS","hostname","deviceChange","connect","length","found","stateInterface","sort","interfaceChange","type","connectInterface","a_id","b_id","map","disconnectInterface","peer","disconnect","stateIpam","domains","networks","ipam","ipamChange","searchIP","network_id","createIpam","ipam_record","extra","label","idx","netasc","a_domain_id","columns","classes","info","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"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","file":"static/js/1.3c323aa6.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call, rnd } from './infra/Functions.js';\nimport { Spinner, StateMap, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, NetworkButton, DeleteButton,ForwardButton, GoButton, InfoButton, LinkButton, ReloadButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && rest_call('api/interface/delete', {interfaces:[interface_id]}).then(result => (result.deleted > 0) && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && rest_call('api/interface/delete',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => rest_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && rest_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n listItem = (row) => [row.interface_id,row.mac,(row.ip) ? `${row.ip} (${row.ipam_id})` : '-',row.snmp_index,row.name,row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <div className='states'><StateMap key={'il_if_state_' + row.interface_id} state={row.if_state} /><StateMap key={'il_ip_state_' + row.interface_id}state={row.ip_state} /></div>,<Fragment key={'il_btns_'+row.interface_id}>\n    <InfoButton key={'il_btn_info_' + row.interface_id} onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    <DeleteButton key={'il_btn_del_' + row.interface_id} onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && <LinkButton key={'il_btn_sync_' + row.interface_id} onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n   </Fragment>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['ID','MAC','IP','SNMP','Name','Description','Class','Link','','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key={'interface_info_' + rnd()} device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  rest_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, device_id:this.props.device_id, class:this.props.class, extra:['classes']}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />))\n\n deleteIpam = () => (window.confirm('Delete IP mapping?') && rest_call('api/ipam/address_delete',{id:this.state.data.ipam_id}).then(result => ((result.status === 'OK') && this.setState({data:{...this.state.data, ipam_id:null}}))))\n\n updateInfo = () => rest_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n updateDNS = () => (window.confirm('Update DNS with device-interface-name') && rest_call('api/ipam/address_info',{op:'update',hostname:this.state.data.name,id:this.state.data.ipam_id}).then(result => this.setState({result:JSON.stringify(result)})))\n\n deviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   rest_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n\n stateInterface = () => (this.state.connect.found && rest_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'interface'})))\n\n interfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n connectInterface = () => (this.state.connect.interface_id && rest_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n\n disconnectInterface = () => (this.state.peer && rest_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n\n stateIpam = () => {\n  if (this.state.domains && this.state.networks)\n   this.setState({op:'ipam'})\n  else\n   this.setState({op:'wait',ipam:{ip:''}})\n  if (!this.state.domains)\n   rest_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data}));\n  if (!this.state.networks)\n   rest_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:'ipam'}));\n }\n\n ipamChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n\n searchIP = () => {\n  if (this.state.ipam.network_id)\n   rest_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n\n createIpam = () => {\n  rest_call('api/interface/info',{interface_id:this.props.interface_id, op:'update', ipam_record:this.state.ipam}).then(result => this.setState({...result,op:null}))\n }\n\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'device')\n     return (<article className='lineinput'>\n     <div>\n      <span>Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.deviceChange} /> with name '{this.state.connect.name}'</span>\n     </div>\n     <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </article>)\n    else if(this.state.op === 'interface')\n     return (<article className='lineinput'>\n     <div>\n      <span>Connect {this.state.data.name} to {this.state.connect.name} on\n       <SelectInput key='ii_cnct_int' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.interfaceChange}>\n       {this.state.interfaces.map(row => <option key={'ii_cnct_int_'+row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n       </SelectInput>\n       <CheckboxInput key='ii_cnct_map' id='map' value={this.state.connect.map} onChange={this.interfaceChange} />\n      </span>\n     </div>\n     <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:'device'})} title='Back' />\n     <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.connectInterface()} title='Complete connection' />\n    </article>)\n    else if (this.state.op === 'ipam'){\n     return <article className='info'>\n      <h1>Create IPAM record</h1>\n      <InfoColumns key='ii_ipam_create'>\n       <SelectInput key='ii_ipam_net' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamChange}>{this.state.networks.map((row,idx) => <option key={'ii_net_'+idx} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ii_ipam_ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamChange} />\n       <SelectInput key='ii_ipam_dom' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamChange}>{this.state.domains.map((row,idx) => <option key={'ii_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='ii_ipam_btn_back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='ii_ipam_btn_find' onClick={() => this.searchIP()} title='Search IP within network' />\n      <ForwardButton key='ii_ipam_btn_fwd' onClick={() => this.createIpam()} title='Create IPAM entry' />\n     </article>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const ipam = (this.state.data.ipam_id);\n    const peer = (this.state.peer);\n    return (<article className='info'>\n     <h1>Interface</h1>\n     <InfoColumns key='ii_columns' columns={3}>\n      <TextInput key='ii_name' id='name' value={this.state.data.name} onChange={this.onChange} /><div>{ipam && <SyncButton key='ii_btn_dns' onClick={() => this.updateDNS()} title='Sync DNS information using name' />}</div>\n      <SelectInput key='ii_class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={'ii_class_'+row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='ii_description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='ii_snmp_index' id='snmp_index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='ii_mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      <TextInput key='ii_ipam_id' id='ipam_id' value={this.state.data.ipam_id} onChange={this.onChange} /><div>\n       {ipam && <GoButton key='ii_ipam' onClick={() => this.changeIpam(this.state.data.ipam_id)} title='View IPAM information' />}\n       {ipam && <DeleteButton key='ii_delete' onClick={() => this.deleteIpam()} title='Delete IPAM entry' />}\n       {!ipam && this.state.data.interface_id !== 'new' && <AddButton key='ii_btn_ipam' onClick={() => this.stateIpam()} title='Create IPAM entry' />}\n      </div>\n      {peer && <Fragment key='ii_frag_peer_int'><TextLine key='ii_peer_int_id' id='peer_interface' label='Peer interface' text={this.state.peer.interface_id} /><UnlinkButton key='ii_peer_unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></Fragment>}\n      {peer && <Fragment key='ii_frag_peer_dev'><TextLine key='ii_peer_dev_id' id='peer_device' text={this.state.peer.device_id} /><div/></Fragment>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <BackButton key='ii_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />}\n     <ReloadButton key='ii_btn_reload' onClick={() => this.componentDidMount()} />\n     <SaveButton key='ii_btn_save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {!peer && this.state.data.interface_id !== 'new' && <NetworkButton key='ii_btn_connect' onClick={() => this.setState({op:'device'})} title='Connect peer interface' />}\n     <Result key='ii_result' result={(this.state.status !== 'OK') ? this.state.info : this.state.result} />\n    </article>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => rest_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <article className='info'>\n    <h1>Connection {this.props.id}</h1>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={'conn_int_'+idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </article>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}