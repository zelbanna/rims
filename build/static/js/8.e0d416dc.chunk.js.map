{"version":3,"sources":["node.jsx","system.jsx"],"names":["List","props","listItem","row","node","url","key","id","onClick","changeContent","Info","title","deleteList","elem","setState","content","window","confirm","rest_call","then","result","deleted","data","state","filter","header","thead","trows","this","componentDidMount","rnd","Component","searchInfo","found","hostname","device","device_id","onChange","e","target","name","value","updateInfo","op","old","className","Reload","LogShow","LogClear","msg","modules","map","index","logs","file","Object","entries","log","line","idx","Main","compileNavItems","master","context","cookie","loadNavigation","changeImport","open","Controls","Report","TaskReport","RestList","services","length","ServiceInfo","navinfo","navitems","assign","user_id","module","func","lib","Elem","contextType","RimsContext","info","keys","sort","a","b","localeCompare","frequency","function","args","api","text","RestInfo","apilist","forEach","item","functions","push","information","RestExecute","JSON","stringify","seconds","FileList","mode","substr","src","path","alt","href","rel","files","hasOwnProperty","directory","fullpath","status","alert","cells","updateService","spinner","service","inactive","StartButton","StopButton","extra"],"mappings":"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","file":"static/js/8.e0d416dc.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { rest_call, rnd } from './infra/Functions.js';\nimport {Spinner, InfoColumns, ContentList, ContentData } from './infra/UI.jsx';\nimport { NavBar } from './infra/Navigation.js';\nimport { TextInput, UrlInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, InfoButton, LogButton, ReloadButton, SaveButton, SearchButton } from './infra/Buttons.jsx';\n\n// ************** List **************\n//\nexport class List extends Component {\n constructor(props){\n  super(props);\n  this.state = {};\n }\n\n componentDidMount(){\n  rest_call('api/master/node_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.url,<Fragment key='node_buttons'>\n   <InfoButton key={'nl_btn_info'+row.id} onClick={() => this.changeContent(<Info key={'node_info_'+row.id} id={row.id} />)} title='Node information' />\n   <DeleteButton key={'nl_btn_delete'+row.id} onClick={() => this.deleteList(row.id)} title='Delete node' />\n  </Fragment>]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete node?') && rest_call('api/master/node_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='node_fragment'>\n   <ContentList key='node_cl' header='Nodes' thead={['Node','URL','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='nl_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<Info key={'node_new_' + rnd()} id='new' />)} title='Add node' />\n   </ContentList>\n   <ContentData key='node_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true, content:null};\n }\n\n componentDidMount(){\n  rest_call('api/master/node_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n searchInfo = () => rest_call('api/device/search',{node:this.state.data.node}).then(result => result.found && this.setState({data:{...this.state.data, hostname:result.device.hostname, device_id:result.device.id}}))\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  rest_call('api/master/node_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render() {\n  if (!this.state.found)\n   return <article>Node with id: {this.props.id} removed</article>\n  else if (this.state.data) {\n   const old = (this.state.data.id !== 'new');\n   return (\n   <Fragment key='node_info_fragment'>\n    <article className='info'>\n     <h1>Node</h1>\n     <InfoColumns key='node_content'>\n      <TextInput key='node' id='node' value={this.state.data.node} onChange={this.onChange} />\n      <UrlInput key='url' id='url' value={this.state.data.url}  onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} />\n     </InfoColumns>\n     <SaveButton key='ni_btn_save' onClick={() => this.updateInfo()} title='Save information' />\n     {old && !this.state.data.hostname && <SearchButton key='ni_btn_srch' onClick={this.searchInfo} title='Try to map node to device' />}\n     {old && <ReloadButton key='ni_btn_reload' onClick={() => this.changeContent(<Reload key={'node_reload'} node={this.state.data.node} />)} />}\n     {old && <LogButton key='ni_btn_logs' onClick={() => this.changeContent(<LogShow key={'node_logs'} node={this.state.data.node} />)} title='View node logs' />}\n     {old && <DeleteButton key='ni_btn_logc' onClick={() => this.changeContent(<LogClear key={'node_logc'} node={this.state.data.node} msg='Really clear logs?' />)} title='Clear logs' />}\n    </article>\n    <NavBar key='node_navigation' id='node_navigation' />\n    {this.state.content}\n   </Fragment>\n   );\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reload ***************\n//\nclass Reload extends Component {\n\n componentDidMount(){\n  rest_call('system/reload/' + this.props.node).then(result => this.setState(result))\n }\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   return (\n    <article className='code'>\n     <h1>Module</h1>\n     {this.state.modules.map((row,index) => <span key={index}>{row}</span> )}\n   </article>\n   )\n  }\n }\n}\n\n// *************** LogClear ***************\n//\nclass LogClear extends Component {\n\n componentDidMount(){\n  rest_call('api/system/logs_clear?node=' + this.props.node).then(result => this.setState({logs:result.file}))\n }\n\n render(){\n  return (!this.state) ? <Spinner /> : <article className='code'><h1>Cleared</h1>{Object.entries(this.state.logs).map(log => <span key={log[0]}>{log[0]}: {log[1]}</span>)}</article>\n }\n}\n\n// *************** LogShow ***************\n//\nexport class LogShow extends Component {\n\n componentDidMount(){\n  rest_call('api/system/logs_get?node=' + this.props.node).then(result => this.setState({logs:result}))\n }\n\n render(){\n  return (!this.state) ? <Spinner /> : <article className='code'>{Object.entries(this.state.logs).map(log => <Fragment><h1>{log[0]}</h1>{log[1].map((line,idx) => <span key={log[0]+'_'+idx}>{line}</span> )}</Fragment>)}</article>\n }\n}\n","import React, { Component, Fragment } from 'react'\nimport { rest_call} from './infra/Functions.js';\nimport { Spinner, TableRow, RimsContext, ContentReport, ContentList, ContentData } from './infra/UI.jsx';\nimport { StartButton, StopButton, HrefButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavInfo, NavReload } from './infra/Navigation.js';\n\nimport { LogShow } from './node.jsx';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = {navinfo:[], navitems:[], logs:[], services:[] }\n }\n\n componentDidMount(){\n  rest_call('api/system/service_list').then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n  rest_call('api/master/inventory',{node:this.context.cookie.node, user_id:this.context.cookie.id}).then(result => {\n   Object.assign(this.state,result)\n   this.compileNavItems()\n  })\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n changeImport(module,func){\n  import('./'+module+'.jsx').then(lib => {\n   var Elem = lib[func];\n   this.setState({content:<Elem key={module+'_'+func} />})\n  })\n }\n\n compileNavItems = () => {\n  const master = (this.context.cookie.node === 'master')\n  this.context.loadNavigation(<NavBar key='system_navbar'>\n   {master && <NavButton key='sys_nav_node' title='Nodes' onClick={() => this.changeImport('node','List')} />}\n   {master && <NavButton key='sys_nav_srv' title='Servers' onClick={() => this.changeImport('server','List')} />}\n   {master && <NavButton key='sys_nav_erd' title='ERD'     onClick={() => window.open('erd.pdf','_blank')} />}\n   {master && <NavButton key='sys_nav_user' title='Users'  onClick={() => this.changeImport('user','List')} />}\n   {master && <NavButton key='sys_nav_ctrl' title='Controls' onClick={() => this.changeContent(<Controls key='system_controls' />)} />}\n   <NavDropDown key='sys_nav_logs' title='Logs'>\n    {this.state.logs.map((row,idx) => <NavButton key={'sys_nav_logs_'+idx} title={row} onClick={() => this.changeContent( <LogShow key={row.name} node={row} /> )} />)}\n   </NavDropDown>\n   <NavDropDown key='sys_nav_reports' title='Reports'>\n    <NavButton key='sys_nav_sys' title='System' onClick={() => this.changeContent(<Report key='system_report' />)} />\n    <NavButton key='sys_nav_task' title='Tasks' onClick={() => this.changeContent(<TaskReport key='task_report' />)} />\n    {master && <NavButton key='sys_nav_act' title='Activities' onClick={() => this.changeImport('activity','Report')} />}\n    {master && <NavButton key='sys_nav_resv' title='Reservations' onClick={() => this.changeImport('reservation','Report')} />}\n    {master && <NavButton key='sys_nav_dev' title='Devices' onClick={() => this.changeImport('device','Report')} />}\n    {master && <NavButton key='sys_nav_inv' title='Inventory' onClick={() => this.changeImport('inventory','Report')} />}\n   </NavDropDown>\n   <NavButton key='sys_nav_rest' title='REST' onClick={() => this.changeContent(<RestList key='rest_list' />)} />\n   {this.state.services.length > 0 &&  <NavDropDown key='sys_nav_svcs' title='Services'>{this.state.services.map((row,idx) => <NavButton key={'sys_nav_svcs_'+idx} title={row.name} onClick={() => this.changeContent(<ServiceInfo key={row.name} {...row} /> )} />)}</NavDropDown>}\n   <NavReload key='sys_nav_reload' onClick={() => this.setState({content:null})} />\n   {this.state.navinfo.map((row,idx) => <NavInfo key={'sys_nav_ni_'+idx} title={row} />)}\n  </NavBar>)\n }\n\n render(){\n  return <Fragment key='main_base'>{this.state.content}</Fragment>\n }\n}\nMain.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('system/report').then(result => this.setState({data:Object.keys(result).sort((a,b) => a.localeCompare(b)).map(key => ({info:key,value:result[key]})) }))\n }\n\n listItem = (row) => [row.info,row.value]\n\n render(){\n  return <ContentReport key='sys_cr' header='System Report' thead={['Key','Value']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TaskReport **************\n//\nexport class TaskReport extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/task_list',{node:this.context.cookie.node}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.frequency,row.module,row.function,row.args]\n\n render(){\n  return <ContentReport key='task_cr' header='Tasks' thead={['Node','Frequency','Module','Function','Arguments']} trows={this.state.data} listItem={this.listItem} />\n }\n}\nTaskReport.contextType = RimsContext;\n\n// ************** RestList **************\n//\nclass RestList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/system/rest_explore')\n   .then((result) => {\n    var apilist = [];\n    result.data.forEach(item => item.functions.forEach(row => apilist.push({api:item.api, function:row})  ) );\n    this.setState({data:apilist});\n   })\n }\n\n listItem = (row) => [row.api,<HrefButton key={'rest_' + row.api} text={row.function} onClick={() => { this.changeContent(<RestInfo key={`rest_info_${row.api}_${row.function}`} {...row} />)}} />]\n\n changeContent = (elem) => this.setState({content:elem})\n\n render(){\n  return <Fragment key='rest_tp_fragment'>\n   <ContentList key='rest_tp_cl' header='REST API' thead={['API','Function']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='rest_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** RestInfo **************\n//\nclass RestInfo extends Component {\n\n componentDidMount(){\n  rest_call('api/system/rest_information',{api:this.props.api, function:this.props.function}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state) {\n   return(\n    <article className='text'>\n     <h1>API: {this.props.api}</h1>\n     {this.state.module.map((row,index) => {return <p key={'ria_'+index}>{row}</p> })}\n     <h1>Function: {this.props.function}</h1>\n     {this.state.information.map((row,index) => {return <p key={'rif_'+index}>{row}</p> })}\n    </article>\n   )\n  } else\n   return <Spinner />\n }\n}\n\n// ************************ REST Execute ********************\n//\nclass RestExecute extends Component {\n componentDidMount(){\n  rest_call('api/' + this.props.api,this.props.args).then(result => this.setState(result))\n }\n\n render(){\n  return (this.state) ? <article className='code'><h1>{this.props.text}</h1><pre>{JSON.stringify(this.state,null,2)}</pre></article> : <Spinner />\n }\n}\n\n// ************************ Controls ********************\n//\n// TODO: List should be dynamic from config and passed through REST engine\nclass Controls extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:[\n   {api:'monitor/ipam_init',text:'IPAM status check'},\n   {api:'ipam/address_events',text:'IPAM clear status logs',args:{op:'clear'}},\n   {api:'monitor/interface_init',text:'Interface status check'},\n   {api:'device/network_info_discover',text:'Discover device system information (sysmac etc)'},\n   {api:'device/model_sync',text:'Sync device model mapping'},\n   {api:'device/vm_mapping',text:'VM UUID mapping'},\n   {api:'master/oui_fetch',text:'Sync OUI database'},\n   {api:'reservation/expiration_status',text:'Check reservation status'},\n   {api:'system/sleep',text:'Sleep Test', args:{seconds:10}},\n  ]}\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n listItem = (row) => [<HrefButton key={'ctrl_' + row.api} text={row.text} onClick={() => { this.changeContent(<RestExecute key={'rest_' + row.api} {...row} />)}} />]\n\n render(){\n  return <Fragment key='ctl_fragment'>\n   <ContentList key='ctl_cl' header='' thead={['API']} trows={this.state.data} listItem={this.listItem} />\n   <ContentData key='ctl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// ************** File List **************\n//\nexport class FileList extends Component {\n constructor(props){\n  super(props)\n  this.state = {files:null}\n  if (this.props.hasOwnProperty('directory')){\n   this.state.mode = 'directory'\n   this.state.args = {directory:this.props.directory}\n  } else if (this.props.hasOwnProperty('fullpath')){\n   this.state.mode = 'fullpath'\n   this.state.args = {fullpath:this.props.fullpath}\n  } else {\n   this.state.mode = 'images'\n   this.state.args = {}\n  }\n }\n\n componentDidMount(){\n  rest_call('api/system/file_list',this.state.args).then(result => {\n   if (result.status === 'OK')\n    this.setState(result)\n   else {\n    window.alert('Error retrieving files:' + result.info);\n    this.setState({files:[]})\n   }\n  })\n }\n\n listItem = (row) => {\n  if (this.state.mode === 'images')\n   return (row.substr(row.length - 4) === '.png') ? [row,<img src={this.state.path +'/'+row} alt={this.state.path +'/'+row} />] : []\n  else\n   return [<Fragment key={row}>{this.state.path + '/'}<a href={this.state.path + '/' + row} target='_blank' rel='noopener noreferrer'>{row}</a></Fragment>]\n }\n\n render() {\n  if (!this.state.files)\n   return <Spinner />\n  else\n   return (\n    <article className='files'>\n     <h1>{this.state.mode}</h1>\n     <div className='table'>\n      <div className='tbody'>\n      {this.state.files.map((row,index) => <TableRow key={'content_trow_files_'+index} cells={this.listItem(row)} /> )}\n      </div>\n     </div>\n    </article>\n   )\n }\n}\n\n// ************** Service Info **************\n//\nclass ServiceInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {state:'inactive'}\n }\n\n componentDidMount(){\n  this.updateService({})\n }\n\n updateService(args){\n  // Always do a reset (so do a spinner)\n  this.setState({spinner:<Spinner />})\n  rest_call('api/system/service_info',{service:this.props.service,...args}).then(result => {\n   if (result.status === 'OK')\n    this.setState({...result,spinner:null})\n   else\n    window.alert('Error retrieving service state:' + result.info);\n  })\n }\n\n render() {\n  const inactive = (this.state.state === 'inactive');\n  const Elem = (inactive) ? StartButton : StopButton;\n  return (\n   <article className='lineinput'>\n    <div>\n     <b>{this.props.name}</b>: {this.state.state} ({this.state.extra}) <Elem key={'state_change'} onClick={() => this.updateService({op:(inactive) ? 'start' : 'stop'})} title='Operate service' />\n    </div>\n    {this.state.spinner}\n   </article>\n   );\n }\n}\n"],"sourceRoot":""}