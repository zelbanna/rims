{"version":3,"sources":["pdu.jsx"],"names":["Manage","changeContent","elem","setState","rest_call","id","this","props","device_id","then","result","context","loadNavigation","key","title","data","onClick","Inventory","type","Info","state","Component","contextType","RimsContext","lookupSlots","op","slots","i","push","label","text","className","JSON","stringify","componentDidMount","content","listItem","row","idx","slotname","unit","Unit","name","Operation","header","thead","trows","undefined","operation","wait","slot","status","off","onChange","e","target","value","updatePDU","info"],"mappings":"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","file":"static/js/15.598ef5c1.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { rest_call } from './infra/Functions.js';\nimport { InfoColumns, Spinner, RimsContext, ContentList, ContentData, Result } from './infra/UI.jsx';\nimport { TextInput, TextLine } from './infra/Inputs.jsx';\nimport { HrefButton, ReloadButton, SaveButton, SearchButton, StartButton, StopButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavInfo } from './infra/Navigation.js';\n\n// ************** Manage **************\n//\nexport class Manage extends Component {\n componentDidMount(){\n  rest_call('api/device/hostname',{id:this.props.device_id}).then(result => {\n   this.context.loadNavigation(<NavBar key='pdu_navbar'>\n    <NavInfo key='pdu_nav_name' title={result.data} />\n    <NavButton key='pdu_nav_inv' title='Inventory' onClick={() => this.changeContent(<Inventory key='pdu_inventory' device_id={this.props.device_id} type={this.props.type} />)} />\n    <NavButton key='pdu_nav_info' title='Info' onClick={() => this.changeContent(<Info key='pdu_info' device_id={this.props.device_id} type={this.props.type} />)} />\n   </NavBar>)\n  })\n  this.setState(<Inventory key='pdu_inventory' device_id={this.props.device_id} type={this.props.type} />);\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='manage_base'>{this.state}</Fragment>\n }\n}\nManage.contextType = RimsContext;\n\n// ************** Info **************\n//\nclass Info extends Component{\n\n componentDidMount(){\n  rest_call('api/'+this.props.type+'/info',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n lookupSlots = () => rest_call('api/'+this.props.type+'/info',{device_id:this.props.device_id,op:'lookup'}).then(result => this.setState(result))\n\n render(){\n  if (this.state){\n   let slots = [];\n   for (let i = 0; i < this.state.data.slots; i++){\n    slots.push(<TextLine key={'pi_slot_name_' + i} id={'pi_slot_name_' + i} label={'Slot ' + i + ' Name'} text={this.state.data[i + '_slot_name']} />);\n    slots.push(<TextLine key={'pi_slot_id_' + i} id={'pi_slot_id_' + i} label={'Slot ' + i + ' ID'} text={this.state.data[i + '_slot_id']} />);\n   }\n   return (<div className='flexdiv centered'>\n    <article className='info'>\n     <h1>PDU Device Info ({this.props.type})</h1>\n     <InfoColumns key='pi_info'>\n      <TextLine key='pi_slots' id='slots' label='Right/Left slots' text={JSON.stringify(this.state.data.slots === 2)} />\n      {slots}\n     </InfoColumns>\n     <ReloadButton key='pi_btn_reload' onClick={() => this.componentDidMount() } />\n     <SearchButton key='pi_btn_search' onClick={() => this.lookupSlots() } />\n    </article>\n   </div>)\n  } else\n   return <Spinner />\n }\n}\n\n// ************** Inventory **************\n//\nexport class Inventory extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/' + this.props.type + '/inventory',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n listItem = (row,idx) => [`${row.slotname}.${row.unit}`,<HrefButton key={'pdu_inv_btn_' + idx} onClick={() => this.changeContent(<Unit key={'pdu_unit_'+idx} device_id={this.props.device_id} type={this.props.type} {...row} />)} text={row.name} title='Edit port info' />,<Operation key={'pdu_state'+idx} idx={idx} device_id={this.props.device_id} type={this.props.type} {...row} />]\n\n render(){\n  if (this.state.data){\n   return <Fragment key='pdu_fragment'>\n    <ContentList key='pdu_cl' header='Inventory' thead={['Position','Device','State']} trows={this.state.data} listItem={this.listItem}>\n     <ReloadButton key='pdu_btn_reload' onClick={() => {this.setState({data:undefined}); this.componentDidMount()} } />\n    </ContentList>\n    <ContentData key='pdu_cd'>{this.state.content}</ContentData>\n   </Fragment>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Operation ***************\n//\nclass Operation extends Component{\n constructor(props){\n  super(props)\n  this.state = {state:this.props.state, status:'',wait:null};\n }\n\n operation = (state) => {\n  this.setState({wait:<Spinner />})\n  rest_call('api/'+this.props.type+'/op',{device_id:this.props.device_id, slot:this.props.slot, unit:this.props.unit, state:state}).then(result => this.setState({...result, wait:null}));\n }\n\n render(){\n   const off = (this.state.state === 'off');\n   return <Fragment key={'pdu_frag_'+this.props.idx}>\n    {off && <StartButton key={'pdu_btn_start_'+this.props.idx} onClick={() => this.operation('on')} title={this.state.status} />}\n    {!off && <StopButton key={'pdu_btn_stop_'+this.props.idx} onClick={() => this.operation('off')} title={this.state.status} />}\n    {!off && <ReloadButton key={'pdu_btn_reload_'+this.props.idx} onClick={() => this.operation('reboot')} title={this.state.status} />}\n    {this.state.wait}\n   </Fragment>\n }\n}\n\n// ************** Unit **************\n//\nclass Unit extends Component {\n constructor(props){\n  super(props)\n  this.state = {text:this.props.name,wait:null}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n updatePDU = () => {\n  this.setState({wait:<Spinner />, info:undefined});\n  rest_call('api/'+this.props.type+'/update',{op:'update',device_id:this.props.device_id,slot:this.props.slot,unit:this.props.unit,text:this.state.text}).then(result => this.setState({...result,wait:null}));\n }\n\n render(){\n  let result = ''\n  if (this.state.status)\n   result = (this.state.status === 'OK') ? 'OK' : this.state.info;\n  return <article className='info'>\n   <InfoColumns key='pu_info'>\n    <TextLine key='pu_slot_unit' id='su' label='Slot.Unit' text={`${this.props.slotname}.${this.props.unit}`} />\n    <TextInput key='pu_slot_text' id='text' value={this.state.text} onChange={this.onChange} />\n   </InfoColumns>\n   <Result key='pu_result' result={result} />\n   <SaveButton key='pu_btn_save' onClick={() => this.updatePDU()} title='Update pdu' />\n   {this.state.wait}\n  </article>\n }\n}\n"],"sourceRoot":""}