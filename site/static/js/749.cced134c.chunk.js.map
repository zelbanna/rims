{"version":3,"file":"static/js/749.cced134c.chunk.js","mappings":"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","sources":["dns.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport { Flex, Spinner, CodeArticle, InfoArticle, InfoColumns, ContentList, ContentData, ContentReport, Result } from './infra/UI.jsx';\nimport { TextLine, SelectInput, TextInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HealthButton, ItemsButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n componentDidMount(){\n  this.setState(<DomainList key='domain_list' />)\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return <>{this.state}</>\n }\n}\n\n// *************** Domain List ***************\n//\nexport class DomainList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/dns/domain_list').then(result => {\n   result.result = 'OK';\n   this.setState(result);\n  })\n }\n\n syncDomains(){\n  post_call('api/dns/domain_list',{sync:true}).then(result => {\n   result.result = 'NS:' + result.ns.status + ', Recursors:' + result.rec.status;\n   this.setState(result);\n  })\n }\n\n listItem = (row) => [row.id,row.name,row.service,<>\n   <ConfigureButton key='info' onClick={() => this.changeContent(<DomainInfo key='domain_info' id={row.id} />) } title='Edit domain information' />\n   <ItemsButton key='items' onClick={() => this.changeContent(<RecordList changeSelf={this.changeContent} key='record_list' domain_id={row.id} />) } title='View domain records' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id) } title='Delete domain' />\n  </>]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete domain') && post_call('api/dns/domain_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Domains' thead={['ID','Domain','Server','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<DomainInfo key='domain_info' id='new' />) } title='Add domain' />\n    <SyncButton key='sync' onClick={() => this.syncDomains()} title='Sync external DNS servers with cache' />\n    <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key='recursor_statistics' />)} title='View DNS statistics' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** Domain Info ***************\n//\nclass DomainInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = { data:null };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/dns/domain_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount()\n }\n\n componentDidMount(){\n  post_call('api/dns/domain_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data) {\n   const old = (this.state.data.id !== 'new');\n   return <InfoArticle key='ia_dom' header='Domain'>\n     <InfoColumns key='ic'>\n      {old && <TextLine key='node' id='node' text={this.state.infra.node} />}\n      {old && <TextLine key='service' id='service' text={this.state.infra.service} />}\n      {old && <TextLine key='foreign_id' id='foreign_id' label='Foreign ID' text={this.state.infra.foreign_id} />}\n      {!old && <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>{this.state.servers.map((row,idx) => <option key={'srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}</SelectInput>}\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      <TextInput key='master' id='master' value={this.state.data.master} onChange={this.onChange} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} />\n      <TextLine  key='serial' id='serial' text={this.state.data.serial} />\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save domain information' />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Status ***************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/dns/statistics').then(result => {\n   const queries = []\n   for (let [node,rows] of Object.entries(result.queries)){\n    const ns = node.split('_');\n    rows.forEach(row => queries.push([ns[0],ns[1],row[0],row[1],row[2]]))\n   }\n   const remotes = []\n   for (let [node,rows] of Object.entries(result.remotes)){\n    const ns = node.split('_');\n    rows.forEach(row => remotes.push([ns[0],ns[1],row[0],row[1]]))\n   }\n   this.setState({queries:queries,remotes:remotes})\n  })\n }\n\n render(){\n  return (this.state.queries && this.state.remotes) ? <Flex key='statistics_flex'>\n    <ContentReport key='queries_cr' header='Looked up FQDN' thead={['Node','Service','Hits','FQDN','Type']} trows={this.state.queries} listItem={(row) => row} />\n    <ContentReport key='remotes_cr' header='Queriers' thead={['Node','Service','Hits','Who']} trows={this.state.remotes} listItem={(row) => row} />\n   </Flex> : <Spinner />\n }\n}\n\n// *************** Record List ***************\n//\nclass RecordList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount();\n }\n\n componentDidMount(){\n  post_call('api/dns/record_list',{domain_id:this.props.domain_id}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n listItem = (row) => [row.name,row.content,row.type,row.ttl,<>\n   <ConfigureButton key='info' onClick={() => this.changeContent(<RecordInfo key='record_info' domain_id={this.props.domain_id} op='info' {...row} />)} title='Configure record' />\n   {['A','AAAA','CNAME','PTR','DHCID'].includes(row.type) && <DeleteButton key='del' onClick={() => this.deleteList(row.name,row.type)} title='Delete record' />}\n  </>]\n\n deleteList = (name,type) => (window.confirm('Delete record?') && post_call('api/dns/record_delete', {domain_id:this.props.domain_id,name:name,type:type}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => !(row.name === name && row.type === type))})))\n\n render(){\n  const status = this.state.status;\n  if (status)\n   if (status === 'OK'){\n    const data = this.state.data;\n    return <ContentReport key='rl_cr' header='Records' thead={['Name','Content','Type','TTL','']} trows={data} listItem={this.listItem} result={this.state.result}>\n     <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='add' onClick={() => this.changeContent(<RecordInfo key='record_info' domain_id={this.props.domain_id} name='new' op='new' />)} title='Add DNS record' />\n    </ContentReport>\n   } else\n    return <CodeArticle key='ca_rl'>Error retrieving record list: {JSON.stringify(this.state.info)}</CodeArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Record Info ***************\n//\nclass RecordInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null,info:undefined };\n  if (this.props.op === 'info'){\n   this.state.data = {domain_id:this.props.domain_id, name:this.props.name, type:this.props.type, ttl:this.props.ttl, content:this.props.content}\n   this.state.op = 'update'\n  } else {\n   this.state.data = {domain_id:this.props.domain_id, name:'', type:'A', ttl:3600, content:''}\n   this.state.op = 'insert'\n  }\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => post_call('api/dns/record_info',{op:this.state.op, ...this.state.data}).then(result => {\n   this.setState({op:(result.status === 'OK') ? 'update' : this.state.op, ...result})\n })\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='rec_art' header='Record'>\n     <InfoColumns key='ic'>\n      <TextInput key='name' id='name' value={this.state.data.name} title='E.g. A:FQDN, PTR:x.y.z.in-addr.arpa' onChange={this.onChange} placeholder='name' />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder={'A, PTR or CNAME typically'} />\n      <TextInput key='ttl' id='ttl' label='TTL' value={this.state.data.ttl} onChange={this.onChange} />\n      <TextInput key='content' id='content' value={this.state.data.content} title='E.g. A:IP, PTR:x.y.x-inaddr.arpa, CNAME:A - remember dot on PTR/CNAME' onChange={this.onChange} placeholder='content' />\n      {this.props.serial && <TextLine key='serial' id='serial' text={this.props.serial} />}\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save record information' />\n     <Result key='result' result={(this.state.status !== 'OK') ? JSON.stringify(this.state.info) : 'OK'} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n"],"names":["Main","Component","constructor","arguments","changeContent","elem","this","setState","componentDidMount","_jsx","DomainList","render","_Fragment","children","state","props","super","listItem","row","id","name","service","_jsxs","ConfigureButton","onClick","DomainInfo","title","ItemsButton","RecordList","changeSelf","domain_id","DeleteButton","deleteList","content","window","confirm","post_call","then","result","deleted","data","filter","syncDomains","sync","ns","status","rec","ContentList","header","thead","trows","ReloadButton","AddButton","SyncButton","HealthButton","Statistics","ContentData","mountUpdate","fun","onChange","e","target","value","updateInfo","op","componentDidUpdate","prevProps","old","InfoArticle","InfoColumns","TextLine","text","infra","node","label","foreign_id","SelectInput","server_id","servers","map","idx","TextInput","master","type","serial","SaveButton","Spinner","queries","rows","Object","entries","split","forEach","push","remotes","Flex","ContentReport","ttl","RecordInfo","includes","CodeArticle","JSON","stringify","info","undefined","placeholder","Result"],"sourceRoot":""}