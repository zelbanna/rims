{"version":3,"sources":["interface.jsx"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","post_call","interfaces","then","result","deleted","setState","data","state","filter","row","JSON","stringify","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","listItem","snmp_index","mac","ip","description","class","connection_id","key","text","onClick","ConnectionInfo","id","title","if_state","ip_state","Info","Statistics","includes","op","this","header","thead","trows","rnd","LLDP","loader","Component","onChange","e","target","value","updateInfo","changeIpam","lib","AddressInfo","deleteIpam","entry","status","clearIpam","swapIpam","deviceChange","connect","length","found","stateInterface","sort","interfaceChange","type","connectInterface","a_id","b_id","map","disconnectInterface","peer","disconnect","stateIpam","domains","networks","ipam","ipamChange","searchIP","network_id","createIpam","ipam_record","extra","label","netasc","a_domain_id","ipam1","ipam_id","ipam2","ipam_alt_id","opresult","undefined","update","columns","classes","updateItems","range","dataset","vis","DataSet","flatMap","time","in8s","out8s","inUPs","outUPs","x","Date","y","group","graph","setItems","fit","rangeChange","checkChange","visibility","checked","setOptions","groups","gotoNow","today","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","ib","ob","canvas","React","createRef","content","options","yAxisOrientation","Graph2d","current","locale","width","height","zoomMin","zoomMax","clickToUse","drawPoints","interpolation","legend","dataAxis","alignZeros","icons","left","right","v","className","styles","graphs","ref","idx","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"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","file":"static/js/1.6d414564.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { post_call, rnd } from './infra/Functions.js';\nimport { Spinner, StateLeds, Article, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton,ForwardButton, GoButton, HealthButton, InfoButton, ItemsButton, LinkButton, ReloadButton, RemoveButton, RevertButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && post_call('api/interface/delete', {interfaces:[interface_id]}).then(result => (result.deleted > 0) && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && post_call('api/interface/delete',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => post_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && post_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n listItem = (row) => [row.snmp_index,row.name,row.mac,(row.ip) ? row.ip : '-',row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <>\n    <StateLeds key='state' state={[row.if_state,row.ip_state]} />\n    <InfoButton key='info' onClick={() => this.changeContent(<Info key={row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    {row.snmp_index && <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key={row.interface_id} device_id={this.props.device_id} interface_id={row.interface_id} name={row.name} />)} title='Interface stats' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && ['wired','optical'].includes(row.class) && <LinkButton key='link' onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n   </>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['SNMP','Name','MAC','IP Address','Description','Type','Link','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key={'interface_info_' + rnd()} device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, device_id:this.props.device_id, class:this.props.class, extra:['classes','ip']}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n updateInfo = () => post_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />));\n deleteIpam = (entry) => (window.confirm('Delete IP mapping?') && post_call('api/ipam/address_delete',{id:this.state.data[entry]}).then(result => ((result.status === 'OK') && this.setState({data:{...this.state.data, [entry]:null}}))));\n clearIpam = (entry) => post_call('api/interface/info',{op:'update', interface_id:this.state.data.interface_id, [entry]:null}).then(result => this.setState(result));\n swapIpam = () => post_call('api/interface/info',{op:'swap', interface_id:this.state.data.interface_id}).then(result => this.setState(result));\n\n deviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   post_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n\n stateInterface = () => (this.state.connect.found && post_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'interface'})))\n\n interfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n connectInterface = () => (this.state.connect.interface_id && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n disconnectInterface = () => (this.state.peer && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n\n stateIpam = (entry) => {\n  if (this.state.domains && this.state.networks)\n   this.setState({op:'ipam', entry:entry, ipam:{ip:'<N/A>'}})\n  else\n   this.setState({op:'wait', entry:entry, ipam:{ip:'<N/A>'}})\n  if (!this.state.domains)\n   post_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data}));\n  if (!this.state.networks)\n   post_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:'ipam'}));\n }\n\n ipamChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n\n searchIP = () => {\n  if (this.state.ipam.network_id)\n   post_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n\n createIpam = () => {\n  post_call('api/interface/info',{interface_id:this.props.interface_id, op:'update', ipam_record:this.state.ipam, entry:this.state.entry}).then(result => this.setState({...result,op:null}))\n }\n\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.deviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'interface')\n     return <LineArticle key='ii_cnct_art'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='ii_cnct_int' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.interfaceChange}>\n       {this.state.interfaces.map(row => <option key={row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='ii_cnct_map' id='map' value={this.state.connect.map} onChange={this.interfaceChange} />\n      <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:'device'})} title='Back' />\n      <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.connectInterface()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ii_ipam_article' header='Create IPAM record'>\n      <InfoColumns key='ii_ipam_create'>\n       <SelectInput key='ii_ipam_net' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamChange}>{this.state.networks.map(row => <option key={row.id} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ii_ipam_ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamChange} />\n       <SelectInput key='ii_ipam_dom' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamChange}>{this.state.domains.map(row => <option key={row.id} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='ii_ipam_btn_back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='ii_ipam_btn_find' onClick={() => this.searchIP()} title='Search IP within network' />\n      <ForwardButton key='ii_ipam_btn_fwd' onClick={() => this.createIpam()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const ipam1 = (this.state.data.ipam_id);\n    const ipam2 = (this.state.data.ipam_alt_id);\n    const peer = (this.state.peer);\n    let opresult = '';\n    if (this.state.update !== undefined) {\n     opresult = 'Updated: ' + JSON.stringify(this.state.update);\n    }\n    return (<InfoArticle key='ii_article' header='Interface'>\n     <InfoColumns key='ii_columns' columns={3}>\n      <TextLine key='ii_id' id='id' label='Local ID' text={this.state.data.interface_id} /><div />\n      <TextInput key='ii_name' id='name' value={this.state.data.name} onChange={this.onChange} /><div />\n      <SelectInput key='ii_class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='ii_description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='ii_snmp_index' id='snmp_index' label='SNMP index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='ii_mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      <TextInput key='ii_ipam1_id' id='ipam_id' label='IPAM id' value={this.state.data.ipam_id} onChange={this.onChange} /><div>\n       {ipam1 && <GoButton key='ii_btn_ipam1' onClick={() => this.changeIpam(ipam1)} title='Edit IPAM entry' />}\n       {ipam1 && <RemoveButton key='ii_btn_remove1' onClick={() => this.clearIpam('ipam_id')} title='Clear IPAM entry' />}\n       {ipam1 && <DeleteButton key='ii_btn_delete1' onClick={() => this.deleteIpam('ipam_id')} title='Delete IPAM entry' />}\n       {!ipam1 && this.state.data.interface_id !== 'new' && <AddButton key='ii_btn_add1' onClick={() => this.stateIpam('ipam_id')} title='Create IPAM entry' />}\n      </div>\n      {ipam1 && <><TextLine key='ii_ipam1' id='IPAM ip'text={this.state.ip[ipam1]} /><div /></>}\n      <TextInput key='ii_ipam2_id' id='ipam_alt_id' label='IPAM alt id' value={this.state.data.ipam_alt_id} onChange={this.onChange} /><div>\n       {ipam2 && <GoButton key='ii_btn_ipam2' onClick={() => this.changeIpam(ipam2)} title='Edit IPAM entry' />}\n       {ipam2 && <RemoveButton key='ii_btn_remove2' onClick={() => this.clearIpam('ipam_alt_id')} title='Clear IPAM entry' />}\n       {ipam2 && <DeleteButton key='ii_btn_delete2' onClick={() => this.deleteIpam('ipam_alt_id')} title='Delete IPAM entry' />}\n       {!ipam2 && this.state.data.interface_id !== 'new' && <AddButton key='ii_btn_add2' onClick={() => this.stateIpam('ipam_alt_id')} title='Create IPAM entry' />}\n      </div>\n      {ipam2 && <><TextLine key='ii_ipam2' id='IPAM alt ip'text={this.state.ip[ipam2]} /><div /></>}\n      {peer && <><TextLine key='ii_peer_int_id' id='peer_interface' label='Peer interface' text={this.state.peer.interface_id} /><UnlinkButton key='ii_peer_unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></>}\n      {peer && <><TextLine key='ii_peer_dev_id' id='peer_device' text={this.state.peer.device_id} /><div/></>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <ItemsButton key='ii_btn_list' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Interfaces' />}\n     <ReloadButton key='ii_btn_reload' onClick={() => this.componentDidMount()} />\n     <SaveButton key='ii_btn_save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {!peer && this.state.data.interface_id !== 'new' && ['wired','optical'].includes(this.state.data.class) && <LinkButton key='ii_btn_connect' onClick={() => this.setState({op:'device'})} title='Connect peer interface' />}\n     {ipam1 && ipam2 && <SyncButton key='ii_btn_swap' onClick={() => this.swapIpam()} title='Swap Primary and Alternative IPAM id' />}\n     <Result key='ii_result' result={opresult} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Statistics ****************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {range:1, visibility: {ib:true, ob:true, ip:true, op:true}}\n  this.canvas = React.createRef()\n  this.graph = null;\n  this.vis = null;\n }\n\n componentDidMount(){\n  import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => {\n   this.vis = vis;\n   const options = { locale:'en', width:'100%', height:'100%', zoomMin:60000, zoomMax:1209600000, clickToUse:true, drawPoints: false, interpolation:false, legend:true, dataAxis:{ alignZeros:false , icons:true, left:{ title:{ text:'kbps' } }, right:{ title:{ text:'packets per second' } } } };\n   const groups = new this.vis.DataSet([{id:'ib', content:'In'}, {id:'ob', content:'Out' }, {id:'ip', content:'In', options: { yAxisOrientation: 'right'}},{id:'op', content:'Out', options: { yAxisOrientation: 'right'}}]);\n   this.graph = new this.vis.Graph2d(this.canvas.current, [], groups, options);\n   this.updateItems(this.state.range);\n  })\n }\n\n updateItems = (range) => post_call('api/statistics/query_interface',{device_id:this.props.device_id, interface_id:this.props.interface_id, range:range}).then(result => {\n  const dataset = new this.vis.DataSet(result.data.flatMap(({time, in8s, out8s, inUPs, outUPs}) => [{x:new Date(time*1000), y:in8s, group:'ib'},{x:new Date(time*1000), y:out8s, group:'ob'}, {x:new Date(time*1000), y:inUPs, group:'ip'},{x:new Date(time*1000), y:outUPs, group:'op'}]));\n  this.graph.setItems(dataset);\n  this.graph.fit();\n });\n\n rangeChange = (e) => {\n  this.setState({[e.target.name]:e.target.value})\n  this.updateItems(e.target.value);\n }\n\n checkChange = (e) => {\n  this.setState({visibility:{...this.state.visibility, [e.target.name]:e.target.checked}});\n  this.graph.setOptions({groups:{visibility:{[e.target.name]:e.target.checked}}})\n }\n\n gotoNow = () => {\n  const today = new Date()\n  this.graph.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  const v = this.state.visibility;\n  return <Article key='is_art' header='Statistics'>\n   <ReloadButton key='reload' onClick={() => this.updateItems(this.state.range)} title='Reload' />\n   <RevertButton key='reset' onClick={() => this.gotoNow()} title='Go to now' />\n   <br />\n   <TextLine key='name' id='name' label='Interface name' text={this.props.name} />\n   <br />\n   <SelectInput key='range' id='range' label='Time range' value={this.state.range} onChange={this.rangeChange}>\n    <option value='1'>1h</option>\n    <option value='4'>4h</option>\n    <option value='8'>8h</option>\n    <option value='24'>24h</option>\n   </SelectInput>\n   <CheckboxInput key='ib' id='ib' label='In bps' value={v.ib} onChange={this.checkChange} />\n   <CheckboxInput key='ob' id='ob' label='Out bps' value={v.ob} onChange={this.checkChange} />\n   <CheckboxInput key='ip' id='ip' label='In pps' value={v.ip} onChange={this.checkChange} />\n   <CheckboxInput key='op' id='op' label='Out pps' value={v.op} onChange={this.checkChange} />\n   <div className={styles.graphs} ref={this.canvas} />\n  </Article>\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => post_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}