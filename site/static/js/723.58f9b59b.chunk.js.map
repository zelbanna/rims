{"version":3,"file":"static/js/723.58f9b59b.chunk.js","mappings":"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","sources":["user.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Flex, Spinner, InfoArticle, InfoColumns, ContentList, ContentData, Result } from './infra/UI.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, ReloadButton, SaveButton } from './infra/Buttons.jsx';\nimport { TextInput, TextLine, PasswordInput, SelectInput } from './infra/Inputs.jsx';\n\n// ************** List **************\n//\nexport class List extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/user_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.alias,row.name,<>\n   <ConfigureButton key='config' onClick={() => this.changeContent(<Info key='user_info' id={row.id} />)} title='Edit user' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete user' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete user?') && post_call('api/master/user_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Users' thead={['ID','Alias','Name','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='add' onClick={() => this.changeContent(<Info key='user_info' id='new' />)} title='Add user' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// ************** Info **************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   post_call('api/master/user_info',{id:this.props.id}).then(result => this.setState(result))\n  }\n }\n\n componentDidMount(){\n  post_call('api/portal/theme_list').then(result => this.setState({themes:result.data}))\n  post_call('api/master/user_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n updateInfo = () => {\n  this.setState({update:false,password_check:''})\n  if(this.context.settings.id === this.state.data.id)\n   this.context.changeTheme(this.state.data.theme);\n  post_call('api/master/user_info',{op:'update', ...this.state.data},{'X-Log':'false'}).then(result => this.setState(result))\n }\n\n render() {\n  if (!this.state.found)\n   return <InfoArticle key='ui_art'>User with id: {this.props.id} removed</InfoArticle>\n  else if (this.state.data && this.state.themes){\n   let result = (this.state.update) ? 'OK - updated' : '';\n   return <InfoArticle key='ui_art' header='User'>\n     <InfoColumns key='ui_content'>\n      {(this.context.settings.id === this.props.id) ?  <TextLine key='alias' id='alias' text={this.state.data.alias} /> : <TextInput key='alias' id='alias' value={this.state.data.alias} onChange={this.onChange} />}\n      <PasswordInput key='password' id='password' placeholder='******' onChange={this.onChange} />\n      {this.context.settings.class === 'admin' && <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>}\n      <TextInput key='email' id='email' label='E-Mail' value={this.state.data.email} onChange={this.onChange} />\n      <TextInput key='name' id='name' label='Full name' value={this.state.data.name} onChange={this.onChange} />\n      <SelectInput key='theme' id='theme' value={this.state.data.theme} onChange={this.onChange}>{this.state.themes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ui_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ui_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// ************** User **************\n//\nexport class User extends Component {\n render() {\n  return <Flex key='flex' style={{justifyContent:'space-evenly'}}><Info key='user_info' id={this.props.id} /></Flex>\n }\n}\n"],"names":["List","Component","constructor","props","super","listItem","row","id","alias","name","_jsxs","_Fragment","children","_jsx","ConfigureButton","onClick","this","changeContent","Info","title","DeleteButton","deleteList","window","confirm","post_call","then","result","deleted","setState","data","state","filter","componentDidMount","render","ContentList","header","thead","trows","ReloadButton","AddButton","ContentData","mountUpdate","fun","onChange","e","target","value","updateInfo","update","password_check","context","settings","changeTheme","theme","op","found","componentDidUpdate","prevProps","themes","InfoArticle","InfoColumns","TextLine","text","TextInput","PasswordInput","placeholder","class","SelectInput","classes","map","label","email","SaveButton","Result","Spinner","contextType","RimsContext","User","Flex","style","justifyContent"],"sourceRoot":""}