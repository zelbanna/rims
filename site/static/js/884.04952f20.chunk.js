"use strict";(self.webpackChunkrims_frontend=self.webpackChunkrims_frontend||[]).push([[884],{884:(t,e,i)=>{i.r(e),i.d(e,{Info:()=>l,List:()=>d,Report:()=>p});var n=i(791),s=i(587),a=i(885),c=i(698),o=i(682),h=i(582),r=i(184);class d extends n.Component{constructor(t){super(t),this.changeContent=t=>this.props.changeSelf(t),this.deleteList=(t,e)=>window.confirm("Really delete interface "+e)&&(0,s.Fh)("api/interface/delete",{interface_id:t}).then((e=>e.deleted&&this.setState({data:this.state.data.filter((e=>e.interface_id!==t)),result:JSON.stringify(e.interfaces)}))),this.cleanUp=()=>window.confirm("Clean up empty interfaces?")&&(0,s.Fh)("api/interface/cleanup",{device_id:this.props.device_id}).then((t=>this.componentDidMount())),this.resetStatus=()=>(0,s.Fh)("api/interface/clear",{device_id:this.props.device_id}).then((t=>this.componentDidMount())),this.discoverInterfaces=()=>window.confirm("Rediscover interfaces?")&&(0,s.Fh)("api/interface/snmp",{device_id:this.props.device_id}).then((t=>this.componentDidMount())),this.unLink=(t,e)=>window.confirm("Really unlink?")&&(0,s.Fh)("api/interface/disconnect",{connection_id:e}).then((t=>{if(t.clear){var i=this.state.data;for(var n of i)if(n.connection_id===e){n.connection_id=null;break}this.setState({data:i,result:"OK"})}else this.setState({result:"NOT_OK"})})),this.listItem=t=>[t.snmp_index,t.name,t.mac,t.ip?t.ip:"-",t.description,t.class,t.connection_id?(0,r.jsx)(o.HrefButton,{text:t.connection_id,onClick:()=>this.changeContent((0,r.jsx)(f,{id:t.connection_id,device_id:this.props.device_id,changeSelf:this.changeContent},"connection_info_"+t.connection_id)),title:"Connection information"},"conn_btn_"+t.interface_id):"-",(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.StateLeds,{state:[t.if_state,t.ip_state],title:"interface and ip state"},"state"),(0,r.jsx)(o.InfoButton,{onClick:()=>this.changeContent((0,r.jsx)(l,{interface_id:t.interface_id,changeSelf:this.props.changeSelf},t.interface_id)),title:"Interface information"},"info"),t.snmp_index>0&&(0,r.jsx)(o.HealthButton,{onClick:()=>this.changeContent((0,r.jsx)(m,{device_id:this.props.device_id,interface_id:t.interface_id,name:t.name},t.interface_id)),title:"Interface stats"},"stats"),(0,r.jsx)(o.DeleteButton,{onClick:()=>this.deleteList(t.interface_id,t.name),title:"Delete interface"},"del"),!t.connection_id&&["wired","optical"].includes(t.class)&&(0,r.jsx)(o.LinkButton,{onClick:()=>this.changeContent((0,r.jsx)(l,{op:"connect_device",interface_id:t.interface_id,name:t.name,changeSelf:this.props.changeSelf},"interface_info_"+t.interface_id)),title:"Connect interface"},"link"),t.connection_id&&(0,r.jsx)(o.UnlinkButton,{onClick:()=>this.unLink(t.interface_id,t.connection_id),title:"Delete Connection"},"unlink")]})],this.state={}}componentDidMount(){(0,s.Fh)("api/interface/list",{device_id:this.props.device_id}).then((t=>this.setState(t)))}render(){return this.state.data?(0,r.jsxs)(a.ContentReport,{header:"Interfaces",thead:["SNMP","Name","MAC","IP Address","Description","Type","Link",""],trows:this.state.data,listItem:this.listItem,result:this.state.result,children:[(0,r.jsx)(o.ReloadButton,{onClick:()=>this.componentDidMount()},"il_btn_reload"),(0,r.jsx)(o.AddButton,{onClick:()=>this.changeContent((0,r.jsx)(l,{device_id:this.props.device_id,interface_id:"new",changeSelf:this.props.changeSelf},"interface_info")),title:"Add interface"},"il_btn_add"),(0,r.jsx)(o.TextButton,{onClick:()=>this.resetStatus(),title:"Reset interface state manually",text:"Reset"},"il_btn_rset"),(0,r.jsx)(o.TextButton,{onClick:()=>this.discoverInterfaces(),title:"Discover device interfaces",text:"Discover"},"il_btn_disc"),(0,r.jsx)(o.TextButton,{onClick:()=>this.changeContent((0,r.jsx)(_,{device_id:this.props.device_id,changeSelf:this.props.changeSelf},"interface_lldp")),title:"Map interface connections",text:"LLDP"},"il_btn_lldp"),(0,r.jsx)(o.TextButton,{onClick:()=>this.cleanUp(),title:"Clean up empty interfaces",text:"Cleanup"},"il_btn_clean"),this.state.loader]},"il_cl"):(0,r.jsx)(a.Spinner,{})}}class p extends n.Component{constructor(){super(...arguments),this.listItem=t=>[t.device_id,t.hostname,t.interface_id,t.class,t.ip,t.mac,t.name,t.description,(0,r.jsx)(a.StateLeds,{state:[t.if_state,t.ip_state],title:"interface and ip state"},"ir_"+t.id)]}componentDidMount(){(0,s.Fh)("api/interface/list").then((t=>this.setState(t)))}render(){return this.state?(0,r.jsx)(a.ContentReport,{header:"Devices",thead:["Dev","Hostname","If","Class","IP","MAC","Name","Description","State"],trows:this.state.data,listItem:this.listItem},"if_cr"):(0,r.jsx)(a.Spinner,{})}}class l extends n.Component{constructor(t){super(t),this.changeContent=t=>this.props.changeSelf(t),this.onChange=t=>this.setState({data:{...this.state.data,[t.target.name]:t.target.value}}),this.updateInfo=()=>(0,s.Fh)("api/interface/info",{op:"update",...this.state.data}).then((t=>this.setState(t))),this.changeIpam=t=>i.e(195).then(i.bind(i,195)).then((e=>this.changeContent((0,r.jsx)(e.AddressInfo,{id:t},"address_info_"+t)))),this.stateIpam=()=>{this.setState({op:this.state.domains&&this.state.networks?"ipam":"wait",ipam:{ip:"<N/A>"}}),this.state.domains||(0,s.Fh)("api/dns/domain_list",{filter:"forward"}).then((t=>this.setState({domains:t.data,op:this.state.networks?"ipam":"wait"}))),this.state.networks||(0,s.Fh)("api/ipam/network_list").then((t=>this.setState({networks:t.data,op:this.state.domains?"ipam":"wait"})))},this.ipamSearchIP=()=>{this.state.ipam.network_id&&(0,s.Fh)("api/ipam/address_find",{network_id:this.state.ipam.network_id}).then((t=>this.setState({ipam:{...this.state.ipam,ip:t.ip}})))},this.ipamOnChange=t=>this.setState({ipam:{...this.state.ipam,[t.target.name]:t.target.value}}),this.ipamCreate=()=>(0,s.Fh)("api/interface/info",{op:"ipam_create",interface_id:this.state.data.interface_id,record:this.state.ipam}).then((t=>this.setState({...t,op:null}))),this.ipamPrimary=t=>(0,s.Fh)("api/interface/info",{op:"ipam_primary",interface_id:this.state.data.interface_id,ipam_id:t}).then((t=>this.setState(t))),this.ipamDelete=t=>window.confirm("Delete IP Address?")&&(0,s.Fh)("api/ipam/address_delete",{id:t}).then((t=>this.componentDidMount())),this.ipamDnsSync=()=>(0,s.Fh)("api/interface/info",{op:"dns_sync",interface_id:this.state.data.interface_id}).then((t=>this.setState(t))),this.connectDeviceChange=t=>{this.setState({connect:{...this.state.connect,[t.target.name]:t.target.value}}),"id"===t.target.name&&t.target.value.length>0&&(0,s.Fh)("api/device/hostname",{id:t.target.value}).then((t=>t&&this.setState({connect:{...this.state.connect,found:"OK"===t.status,name:"OK"===t.status?t.data:"<N/A>"}})))},this.connectInterfaceChange=t=>this.setState({connect:{...this.state.connect,[t.target.name]:t.target["checkbox"!==t.target.type?"value":"checked"]}}),this.disconnectInterface=()=>this.state.peer&&(0,s.Fh)("api/interface/connect",{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:!0}).then((t=>this.setState({peer:null}))),this.stateInterface=()=>this.state.connect.found&&(0,s.Fh)("api/interface/list",{device_id:this.state.connect.id,sort:"name",filter:["connected"]}).then((t=>this.setState({interfaces:t.data,op:"connect_interface"}))),this.connectInterfaceConnect=()=>this.state.connect.interface_id&&(0,s.Fh)("api/interface/connect",{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then((t=>this.setState({connect:{},op:null}))),this.state={op:this.props.op,connect:{name:"<N/A>",map:!1}}}componentDidMount(){(0,s.Fh)("api/interface/info",{interface_id:this.props.interface_id,mac:this.props.mac,name:this.props.name,description:this.props.description,device_id:this.props.device_id,class:this.props.class,extra:["classes","ip"]}).then((t=>this.setState({...t,update:void 0})))}componentDidUpdate(t){t!==this.props&&this.componentDidMount()}render(){if(this.state.data){if(this.state.op)return"connect_device"===this.state.op?(0,r.jsxs)(a.LineArticle,{children:["Connect ",this.state.data.name," to ",(0,r.jsx)(c.TextInput,{id:"id",label:"Device ID",onChange:this.connectDeviceChange},"ii_cnct_dev")," with name '",this.state.connect.name,"'",(0,r.jsx)(o.BackButton,{onClick:()=>this.setState({op:null}),title:"Back"},"back"),(0,r.jsx)(o.ForwardButton,{onClick:()=>this.stateInterface(),title:"Connect interface on "+this.state.connect.name},"fwd")]},"ii_cnct_art"):"connect_interface"===this.state.op?(0,r.jsxs)(a.LineArticle,{children:["Connect ",this.state.data.name," to ",this.state.connect.name," on",(0,r.jsx)(c.SelectInput,{id:"interface_id",label:"Interface",value:this.state.connect.interface_id,onChange:this.connectInterfaceChange,children:this.state.interfaces.map((t=>(0,r.jsx)("option",{value:t.interface_id,children:`${t.interface_id} (${t.name} - ${t.description})`},t.interface_id)))},"interface"),(0,r.jsx)(c.CheckboxInput,{id:"map",value:this.state.connect.map,onChange:this.connectInterfaceChange},"map"),(0,r.jsx)(o.BackButton,{onClick:()=>this.setState({op:"connect_device"}),title:"Back"},"back"),(0,r.jsx)(o.ForwardButton,{onClick:()=>this.connectInterfaceConnect(),title:"Complete connection"},"fwd")]},"la_cnct"):"ipam"===this.state.op?(0,r.jsxs)(a.InfoArticle,{header:"Create IPAM record",children:[(0,r.jsxs)(a.InfoColumns,{children:[(0,r.jsx)(c.SelectInput,{id:"network_id",label:"Network",value:this.state.ipam.network_id,onChange:this.ipamOnChange,children:this.state.networks.map((t=>(0,r.jsx)("option",{value:t.id,children:`${t.netasc} (${t.description})`},t.id)))},"network"),(0,r.jsx)(c.TextInput,{id:"ip",value:this.state.ipam.ip,label:"IP",onChange:this.ipamOnChange},"ip"),(0,r.jsx)(c.SelectInput,{id:"a_domain_id",label:"Domain",value:this.state.ipam.a_domain_id,onChange:this.ipamOnChange,children:this.state.domains.map((t=>(0,r.jsx)("option",{value:t.id,children:t.name},t.id)))},"domain")]},"ic"),(0,r.jsx)(o.BackButton,{onClick:()=>this.setState({op:null}),title:"Back"},"back"),(0,r.jsx)(o.SearchButton,{onClick:()=>this.ipamSearchIP(),title:"Search IP within network"},"find_ip"),(0,r.jsx)(o.ForwardButton,{onClick:()=>this.ipamCreate(),title:"Create IPAM entry"},"fwd")]},"ia_ipam"):"wait"===this.state.op?(0,r.jsx)(a.Spinner,{}):(0,r.jsx)("div",{children:"Intermediate interface operation state"});{const t=this.state.data.ipam_id,e="new"!==this.state.data.interface_id,i=this.state.peer,s=void 0===this.state.update?"":"Updated: "+JSON.stringify(this.state.update);return(0,r.jsxs)(a.InfoArticle,{header:"Interface",children:[(0,r.jsxs)(a.InfoColumns,{columns:3,children:[(0,r.jsx)(c.TextLine,{id:"id",label:"Local ID",text:this.state.data.interface_id},"id"),(0,r.jsx)("div",{}),(0,r.jsx)(c.TextInput,{id:"name",value:this.state.data.name,onChange:this.onChange},"name"),t?(0,r.jsx)(o.SyncButton,{onClick:()=>this.ipamDnsSync(),title:"sync interface name and IP hostname"},"sync"):(0,r.jsx)("div",{}),(0,r.jsx)(c.SelectInput,{id:"class",value:this.state.data.class,onChange:this.onChange,children:this.state.classes.map((t=>(0,r.jsx)("option",{value:t,children:t},t)))},"class"),(0,r.jsx)("div",{}),(0,r.jsx)(c.TextInput,{id:"description",value:this.state.data.description,onChange:this.onChange},"description"),(0,r.jsx)("div",{}),(0,r.jsx)(c.TextInput,{id:"snmp_index",label:"SNMP index",value:this.state.data.snmp_index,onChange:this.onChange},"snmp_index"),(0,r.jsx)("div",{}),(0,r.jsx)(c.TextInput,{id:"mac",value:this.state.data.mac,onChange:this.onChange},"mac"),(0,r.jsx)("div",{}),t&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.TextLine,{id:"ip",label:"Primary IP",text:this.state.primary.ip},"ip"),(0,r.jsxs)("div",{children:[(0,r.jsx)(o.GoButton,{onClick:()=>this.changeIpam(this.state.primary.id),title:"Edit IPAM entry"},"go"),(0,r.jsx)(o.DeleteButton,{onClick:()=>this.ipamDelete(this.state.primary.id),title:"Delete IPAM entry"},"delete")]})]}),this.state.alternatives.map((t=>(0,r.jsxs)(n.Fragment,{children:[(0,r.jsx)(c.TextLine,{id:t.ip,label:"Alternative IP",text:t.ip},"ip"),(0,r.jsxs)("div",{children:[(0,r.jsx)(o.GoButton,{onClick:()=>this.changeIpam(t.id),title:"Edit IPAM entry"},"go"),(0,r.jsx)(o.SyncButton,{onClick:()=>this.ipamPrimary(t.id),title:"Make primary"},"primary"),(0,r.jsx)(o.DeleteButton,{onClick:()=>this.ipamDelete(t.id),title:"Delete IPAM entry"},"delete")]})]},t.ip))),i&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.TextLine,{id:"peer_interface",label:"Peer Interface",text:i.interface_id},"peer_int_id"),(0,r.jsx)(o.UnlinkButton,{onClick:()=>this.disconnectInterface(),title:"Disconnect from peer"},"unlink")]}),i&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.TextLine,{id:"peer_device",label:"Peer Device",text:i.device_id},"peer_dev_id"),(0,r.jsx)("div",{})]})]},"ic"),"changeSelf"in this.props&&(0,r.jsx)(o.ItemsButton,{onClick:()=>this.props.changeSelf((0,r.jsx)(d,{device_id:this.state.data.device_id,changeSelf:this.props.changeSelf},"interface_list")),title:"Interfaces"},"list"),"new"!==this.props.interface_id&&(0,r.jsx)(o.ReloadButton,{onClick:()=>this.componentDidMount()},"reload"),(0,r.jsx)(o.SaveButton,{onClick:()=>this.updateInfo(),title:"Save interface information"},"save"),e&&!i&&["wired","optical"].includes(this.state.data.class)&&(0,r.jsx)(o.LinkButton,{onClick:()=>this.setState({op:"connect_device"}),title:"Connect peer interface"},"connect"),e&&(0,r.jsx)(o.AddButton,{onClick:()=>this.stateIpam(),title:"Add IP"},"add"),(0,r.jsx)(a.Result,{result:s},"result")]},"ia_interface_info")}}return(0,r.jsx)(a.Spinner,{})}}class m extends n.Component{constructor(t){super(t),this.updateItems=t=>(0,s.Fh)("api/statistics/query_interface",{device_id:this.props.device_id,interface_id:this.props.interface_id,range:t}).then((t=>{if("OK"===t.status){const e={},i={in8s:"ib",out8s:"ob",inUPs:"ip",outUPs:"op"};t.header.forEach(((t,i)=>e[t]=i));const n=new this.vis.DataSet(t.data.map((t=>({x:t[e._time],y:t[e._value]*("8s"===t[e._field].substr(-2)?8/1024:1),group:i[t[e._field]]}))));this.graph.setItems(n),this.graph.fit()}})),this.rangeChange=t=>{this.setState({[t.target.name]:t.target.value}),this.updateItems(t.target.value)},this.checkChange=t=>{this.setState({visibility:{...this.state.visibility,[t.target.name]:t.target.checked}}),this.graph.setOptions({groups:{visibility:{[t.target.name]:t.target.checked}}})},this.gotoNow=()=>{const t=new Date;this.graph.moveTo(t.getFullYear()+"-"+(t.getMonth()+1)+"-"+t.getDate()+" "+t.getHours()+":"+t.getMinutes())},this.state={range:1,visibility:{ib:!0,ob:!0,ip:!0,op:!0}},this.canvas=n.createRef(),this.graph=null,this.vis=null}componentDidMount(){i.e(389).then(i.bind(i,389)).then((t=>{this.vis=t;const e=new this.vis.DataSet([{id:"ib",content:"In"},{id:"ob",content:"Out"},{id:"ip",content:"In",options:{yAxisOrientation:"right"}},{id:"op",content:"Out",options:{yAxisOrientation:"right"}}]);this.graph=new this.vis.Graph2d(this.canvas.current,[],e,{locale:"en",width:"100%",height:"100%",zoomMin:6e4,zoomMax:12096e5,clickToUse:!0,drawPoints:!1,interpolation:!1,legend:!0,dataAxis:{alignZeros:!1,icons:!0,left:{title:{text:"kbps"}},right:{title:{text:"packets per second"}}}}),this.updateItems(this.state.range)}))}render(){const t=this.state.visibility;return(0,r.jsxs)(a.Article,{header:"Statistics",children:[(0,r.jsx)(o.ReloadButton,{onClick:()=>this.updateItems(this.state.range),title:"Reload"},"reload"),(0,r.jsx)(o.RevertButton,{onClick:()=>this.gotoNow(),title:"Go to now"},"reset"),(0,r.jsx)("br",{}),(0,r.jsx)(c.TextLine,{id:"name",label:"Interface name",text:this.props.name},"name"),(0,r.jsx)("br",{}),(0,r.jsxs)(c.SelectInput,{id:"range",label:"Time range",value:this.state.range,onChange:this.rangeChange,children:[(0,r.jsx)("option",{value:"1",children:"1h"}),(0,r.jsx)("option",{value:"4",children:"4h"}),(0,r.jsx)("option",{value:"8",children:"8h"}),(0,r.jsx)("option",{value:"24",children:"24h"})]},"range"),(0,r.jsx)(c.CheckboxInput,{id:"ib",label:"In bps",value:t.ib,onChange:this.checkChange},"ib"),(0,r.jsx)(c.CheckboxInput,{id:"ob",label:"Out bps",value:t.ob,onChange:this.checkChange},"ob"),(0,r.jsx)(c.CheckboxInput,{id:"ip",label:"In pps",value:t.ip,onChange:this.checkChange},"ip"),(0,r.jsx)(c.CheckboxInput,{id:"op",label:"Out pps",value:t.op,onChange:this.checkChange},"op"),(0,r.jsx)("div",{className:h.Z.graphs,ref:this.canvas})]},"is_art")}}class f extends n.Component{constructor(t){super(t),this.onChange=t=>this.setState({data:{...this.state.data,[t.target.name]:t.target["checkbox"!==t.target.type?"value":"checked"]}}),this.updateInfo=()=>(0,s.Fh)("api/interface/connection_info",{op:"update",...this.state.data}).then((t=>this.setState(t))),this.state={}}componentDidMount(){(0,s.Fh)("api/interface/connection_info",{connection_id:this.props.id}).then((t=>this.setState(t)))}render(){return this.state.interfaces?(0,r.jsxs)(a.InfoArticle,{header:"Connection "+this.props.id,children:[(0,r.jsxs)(a.InfoColumns,{children:[(0,r.jsx)(c.CheckboxInput,{id:"map",value:this.state.data.map,onChange:this.onChange},"map"),this.state.interfaces.map(((t,e)=>(0,r.jsx)(c.TextLine,{id:"interface_"+e,text:`${t.device_name} - ${t.interface_name} (${t.interface_id})`},e)))]},"ci_columns"),(0,r.jsx)(o.BackButton,{onClick:()=>this.props.changeSelf((0,r.jsx)(d,{device_id:this.props.device_id,changeSelf:this.props.changeSelf},"interface_list")),title:"Back"},"ci_btn_back"),(0,r.jsx)(o.SaveButton,{onClick:()=>this.updateInfo(),title:"Save connection information"},"ci_btn_save")]},"ci_article"):(0,r.jsx)(a.Spinner,{})}}class _ extends n.Component{constructor(t){super(t),this.listItem=t=>[t.chassis_id,t.chassis_type,t.sys_name,t.port_id,t.port_type,t.port_desc,t.snmp_index,t.snmp_name,t.connection_id,t.status],this.state={}}componentDidMount(){(0,s.Fh)("api/interface/lldp_mapping",{device_id:this.props.device_id}).then((t=>this.setState({data:Object.values(t.data)})))}render(){return this.state.data?(0,r.jsx)(a.ContentReport,{header:"Interface",thead:["Chassis","Type","Name","Port ID","Type","Description","SNMP Index","SNMP Name","Conn","Status"],trows:this.state.data,listItem:this.listItem,children:(0,r.jsx)(o.BackButton,{onClick:()=>this.props.changeSelf((0,r.jsx)(d,{device_id:this.props.device_id,changeSelf:this.props.changeSelf},"interface_list")),title:"Back"},"il_btn_back")},"il_cr"):(0,r.jsx)(a.Spinner,{})}}}}]);
//# sourceMappingURL=884.04952f20.chunk.js.map