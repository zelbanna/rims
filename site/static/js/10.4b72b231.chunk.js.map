{"version":3,"sources":["dns.jsx"],"names":["Main","changeContent","elem","setState","this","DomainList","key","state","Component","props","listItem","row","id","name","service","onClick","DomainInfo","title","RecordList","changeSelf","domain_id","deleteList","content","window","confirm","rest_call","then","result","deleted","data","filter","sync","JSON","stringify","header","thead","trows","componentDidMount","rnd","syncDomains","Statistics","onChange","e","target","value","updateInfo","op","old","text","infra","node","label","foreign_id","server_id","servers","map","idx","master","type","serial","queries","rows","ns","split","forEach","push","Object","entries","remotes","ttl","RecordInfo","includes","status","info","undefined","placeholder"],"mappings":"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","file":"static/js/10.4b72b231.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport { rest_call, rnd,  } from './infra/Functions.js';\nimport { Flex, Spinner, InfoArticle, InfoColumns, ContentList, ContentData, ContentReport, Result } from './infra/UI.jsx';\nimport { TextLine, SelectInput, TextInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, LogButton, ConfigureButton, ItemsButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n componentDidMount(){\n  this.setState(<DomainList key='domain_list' />)\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n}\n\n// *************** Domain List ***************\n//\nexport class DomainList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/dns/domain_list').then(result => {\n   result.result = 'OK';\n   this.setState(result);\n  })\n }\n\n syncDomains(){\n  rest_call('api/dns/domain_list',{sync:true}).then(result => {\n   result.result = JSON.stringify(result.result);\n   this.setState(result);\n  })\n }\n\n listItem = (row) => [row.id,row.name,row.service,<Fragment key={'domain_buttons_'+row.id}>\n   <ConfigureButton key={'net_info_'+row.id} onClick={() => this.changeContent(<DomainInfo key={'domain_'+row.id} id={row.id} />) } title='Edit domain information' />\n   <ItemsButton key={'net_items_'+row.id} onClick={() => this.changeContent(<RecordList changeSelf={this.changeContent} key={'items_'+row.id} domain_id={row.id} />) } title='View domain records' />\n   <DeleteButton key={'net_delete_'+row.id} onClick={() => this.deleteList(row.id) } title='Delete domain' />\n   </Fragment>\n  ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete domain') && rest_call('api/dns/domain_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='dl_fragment'>\n   <ContentList key='dl_cl' header='Domains' thead={['ID','Domain','Server','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='dl_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='dl_btn_add' onClick={() => this.changeContent(<DomainInfo key={'domain_new_' + rnd()} id='new' />) } title='Add domain' />\n    <SyncButton key='dl_btn_sync' onClick={() => this.syncDomains()} title='Sync external DNS servers with cache' />\n    <LogButton key='dl_btn_document' onClick={() => this.changeContent(<Statistics key='recursor_statistics' />)} title='View DNS statistics' />\n   </ContentList>\n   <ContentData key='dl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** Domain Info ***************\n//\nclass DomainInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = { data:null };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  rest_call('api/dns/domain_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/dns/domain_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data) {\n   const old = (this.state.data.id !== 'new');\n   return <InfoArticle key='dom_art' header='Domain'>\n     <InfoColumns key='domain_content'>\n      {old && <TextLine key='node' id='node' text={this.state.infra.node} />}\n      {old && <TextLine key='service' id='service' text={this.state.infra.service} />}\n      {old && <TextLine key='foreign_id' id='foreign_id' label='Foreign ID' text={this.state.infra.foreign_id} />}\n      {!old && <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>{this.state.servers.map((row,idx) => <option key={'srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}</SelectInput>}\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      <TextInput key='master' id='master' value={this.state.data.master} onChange={this.onChange} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} />\n      <TextLine  key='serial' id='serial' text={this.state.data.serial} />\n     </InfoColumns>\n     <SaveButton key='domain_save' onClick={() => this.updateInfo()} title='Save domain information' />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Status ***************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/dns/statistics').then(result => {\n   const queries = []\n   for (let [node,rows] of Object.entries(result.queries)){\n    const ns = node.split('_');\n    rows.forEach(row => queries.push([ns[0],ns[1],row[0],row[1],row[2]]))\n   }\n   const remotes = []\n   for (let [node,rows] of Object.entries(result.remotes)){\n    const ns = node.split('_');\n    rows.forEach(row => remotes.push([ns[0],ns[1],row[0],row[1]]))\n   }\n   this.setState({queries:queries,remotes:remotes})\n  })\n }\n\n render(){\n  return (this.state.queries && this.state.remotes) ? <Flex key='statistics_flex'>\n    <ContentReport key='queries_cr' header='Looked up FQDN' thead={['Node','Service','Hits','FQDN','Type']} trows={this.state.queries} listItem={(row) => row} />\n    <ContentReport key='remotes_cr' header='Queriers' thead={['Node','Service','Hits','Who']} trows={this.state.remotes} listItem={(row) => row} />\n   </Flex> : <Spinner />\n }\n}\n\n// *************** Record List ***************\n//\nclass RecordList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/dns/record_list',{domain_id:this.props.domain_id}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n listItem = (row,idx) => [row.name,row.content,row.type,row.ttl,<Fragment key={'rl_buttons_'+idx}>\n   <ConfigureButton key={'record_info_btn_' + idx} onClick={() => this.changeContent(<RecordInfo key={'record_info_'+idx} domain_id={this.props.domain_id} op='info' {...row} />)} title='Configure record' />\n   {['A','CNAME','PTR'].includes(row.type) && <DeleteButton key={'record_del_btn_' + idx} onClick={() => this.deleteList(row.name,row.type)} title='Delete record' />}\n  </Fragment>]\n\n deleteList = (name,type) => (window.confirm('Delete record?') && rest_call('api/dns/record_delete', {domain_id:this.props.domain_id,name:name,type:type}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => !(row.name === name && row.type === type))})))\n\n render(){\n  return <ContentReport key='rl_cr' header='Records' thead={['Name','Content','Type','TTL','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='rl_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='rl_btn_add' onClick={() => this.changeContent(<RecordInfo key={'record_new_' + rnd()} domain_id={this.props.domain_id} name='new' op='new' />)} title='Add DNS record' />\n  </ContentReport>\n }\n}\n\n// *************** Record Info ***************\n//\nclass RecordInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null,info:undefined };\n  if (this.props.op === 'info'){\n   this.state.data = {domain_id:this.props.domain_id, name:this.props.name, type:this.props.type, ttl:this.props.ttl, content:this.props.content}\n   this.state.op = 'update'\n  } else {\n   this.state.data = {domain_id:this.props.domain_id, name:'', type:'A', ttl:3600, content:''}\n   this.state.op = 'insert'\n  }\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => rest_call('api/dns/record_info',{op:this.state.op, ...this.state.data}).then(result => {\n   this.setState({op:(result.status === 'OK') ? 'update' : this.state.op, ...result})\n })\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='rec_art' header='Record'>\n     <InfoColumns key='record_content'>\n      <TextInput key='name' id='name' value={this.state.data.name} title='E.g. A:FQDN, PTR:x.y.z.in-addr.arpa' onChange={this.onChange} placeholder='name' />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder={'A, PTR or CNAME typically'} />\n      <TextInput key='ttl' id='ttl' label='TTL' value={this.state.data.ttl} onChange={this.onChange} />\n      <TextInput key='content' id='content' value={this.state.data.content} title='E.g. A:IP, PTR:x.y.x-inaddr.arpa, CNAME:A - remember dot on PTR/CNAME' onChange={this.onChange} placeholder='content' />\n      {this.props.serial && <TextLine key='serial' id='serial' text={this.props.serial} />}\n     </InfoColumns>\n     <SaveButton key='record_save' onClick={() => this.updateInfo()} title='Save record information' />\n     <Result key='record_result' result={(this.state.status !== 'OK') ? JSON.stringify(this.state.info) : 'OK'} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}