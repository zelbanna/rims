{"version":3,"file":"static/js/631.fac600b4.chunk.js","mappings":"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","sources":["console.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Flex, InfoArticle, InfoColumns, Spinner, ContentList, ContentData } from './infra/UI.jsx';\nimport { TextInput } from './infra/Inputs.jsx';\nimport { ReloadButton, SaveButton, TermButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavInfo } from './infra/Navigation.jsx';\n\n// ************** Manage **************\n//\nexport class Manage extends Component {\n componentDidMount(){\n  post_call('api/device/hostname',{id:this.props.device_id}).then(result => {\n   this.context.loadNavigation(<NavBar key='cons_navbar'>\n    <NavInfo key='cons_nav_name' title={result.data} />\n    <NavButton key='cons_nav_inv' title='Inventory' onClick={() => this.changeContent(<Inventory key='cons_inventory' device_id={this.props.device_id} type={this.props.type} />)} />\n    <NavButton key='con_nav_info' title='Info' onClick={() => this.changeContent(<Info key='con_info' device_id={this.props.device_id} type={this.props.type} />)} />\n   </NavBar>)\n  })\n  this.setState(<Inventory key='cons_inventory' device_id={this.props.device_id} type={this.props.type} />);\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return <>{this.state}</>\n }\n}\nManage.contextType = RimsContext;\n\n// ************** Info **************\n//\nclass Info extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/devices/'+this.props.type+'/info',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => post_call('api/devices/'+this.props.type+'/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if (this.state.data){\n   return <Flex key='ci_flex' style={{justifyContent:'space-evenly'}}>\n    <InfoArticle key='ci_article' header={'Console Info - ' + this.props.type}>\n     <InfoColumns key='ci_info'>\n      <TextInput key='ci_access_url' id='access_url' label='Access URL' value={this.state.data.access_url} onChange={this.onChange} title='URL used as base together with port' />\n      <TextInput key='ci_port' id='port' value={this.state.data.port} onChange={this.onChange} />\n     </InfoColumns>\n     <ReloadButton key='ci_btn_reload' onClick={() => this.componentDidMount() } />\n     <SaveButton key='ci_btn_save' onClick={() => this.updateInfo() } />\n    </InfoArticle>\n   </Flex>\n  } else\n   return <Spinner />\n }\n}\n// ************** Inventory **************\n//\nexport class Inventory extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/devices/' + this.props.type + '/inventory',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n cnctFunction = (intf) => {\n  const port = parseInt(intf) + parseInt(this.state.extra.port);\n  window.open(`${this.state.extra.access_url}:${port}`,'_self');\n }\n\n listItem = (row) => [row.interface,row.name,<TermButton key={'con_inv_btn_cnct_' + row.interface} onClick={() => this.cnctFunction(row.interface)} title='Connect' />]\n\n render(){\n  if (this.state.data){\n   return <>\n    <ContentList key='cl' header='Inventory' thead={['Port','Device','']} trows={this.state.data} listItem={this.listItem}>\n     <ReloadButton key='reload' onClick={() => {this.setState({data:undefined}); this.componentDidMount()} } />\n    </ContentList>\n    <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n   </>\n  } else\n   return <Spinner />\n }\n}\n\n"],"names":["Manage","Component","constructor","arguments","changeContent","elem","this","setState","componentDidMount","post_call","id","props","device_id","then","result","context","loadNavigation","_jsxs","NavBar","children","_jsx","NavInfo","title","data","NavButton","onClick","Inventory","type","Info","render","_Fragment","state","contextType","RimsContext","super","onChange","e","target","name","value","updateInfo","op","Flex","style","justifyContent","InfoArticle","header","InfoColumns","TextInput","label","access_url","port","ReloadButton","SaveButton","Spinner","cnctFunction","intf","parseInt","extra","window","open","listItem","row","interface","TermButton","ContentList","thead","trows","undefined","ContentData","mountUpdate","fun"],"sourceRoot":""}