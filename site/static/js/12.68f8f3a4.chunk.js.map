{"version":3,"sources":["console.jsx"],"names":["Manage","changeContent","elem","setState","post_call","id","this","props","device_id","then","result","context","loadNavigation","key","title","data","onClick","Inventory","type","Info","state","Component","contextType","RimsContext","onChange","e","target","name","value","updateInfo","op","style","justifyContent","header","label","access_url","port","componentDidMount","content","cnctFunction","intf","parseInt","extra","window","open","listItem","row","interface","thead","trows","undefined"],"mappings":"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","file":"static/js/12.68f8f3a4.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Flex, InfoArticle, InfoColumns, Spinner, ContentList, ContentData } from './infra/UI.jsx';\nimport { TextInput } from './infra/Inputs.jsx';\nimport { ReloadButton, SaveButton, TermButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavInfo } from './infra/Navigation.jsx';\n\n// ************** Manage **************\n//\nexport class Manage extends Component {\n componentDidMount(){\n  post_call('api/device/hostname',{id:this.props.device_id}).then(result => {\n   this.context.loadNavigation(<NavBar key='cons_navbar'>\n    <NavInfo key='cons_nav_name' title={result.data} />\n    <NavButton key='cons_nav_inv' title='Inventory' onClick={() => this.changeContent(<Inventory key='cons_inventory' device_id={this.props.device_id} type={this.props.type} />)} />\n    <NavButton key='con_nav_info' title='Info' onClick={() => this.changeContent(<Info key='con_info' device_id={this.props.device_id} type={this.props.type} />)} />\n   </NavBar>)\n  })\n  this.setState(<Inventory key='cons_inventory' device_id={this.props.device_id} type={this.props.type} />);\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='manage_base'>{this.state}</Fragment>\n }\n}\nManage.contextType = RimsContext;\n\n// ************** Info **************\n//\nclass Info extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/devices/'+this.props.type+'/info',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => post_call('api/devices/'+this.props.type+'/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if (this.state.data){\n   return <Flex key='ci_flex' style={{justifyContent:'space-evenly'}}>\n    <InfoArticle key='ci_article' header={'Console Info - ' + this.props.type}>\n     <InfoColumns key='ci_info'>\n      <TextInput key='ci_access_url' id='access_url' label='Access URL' value={this.state.data.access_url} onChange={this.onChange} title='URL used as base together with port' />\n      <TextInput key='ci_port' id='port' value={this.state.data.port} onChange={this.onChange} />\n     </InfoColumns>\n     <ReloadButton key='ci_btn_reload' onClick={() => this.componentDidMount() } />\n     <SaveButton key='ci_btn_save' onClick={() => this.updateInfo() } />\n    </InfoArticle>\n   </Flex>\n  } else\n   return <Spinner />\n }\n}\n// ************** Inventory **************\n//\nexport class Inventory extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/devices/' + this.props.type + '/inventory',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n cnctFunction = (intf) => {\n  const port = parseInt(intf) + parseInt(this.state.extra.port);\n  window.open(`${this.state.extra.access_url}:${port}`,'_self');\n }\n\n listItem = (row) => [row.interface,row.name,<TermButton key={'con_inv_btn_cnct_' + row.interface} onClick={() => this.cnctFunction(row.interface)} title='Connect' />]\n\n render(){\n  if (this.state.data){\n   return <Fragment key='con_fragment'>\n    <ContentList key='con_cl' header='Inventory' thead={['Port','Device','']} trows={this.state.data} listItem={this.listItem}>\n     <ReloadButton key='con_btn_reload' onClick={() => {this.setState({data:undefined}); this.componentDidMount()} } />\n    </ContentList>\n    <ContentData key='con_cd'>{this.state.content}</ContentData>\n   </Fragment>\n  } else\n   return <Spinner />\n }\n}\n\n"],"sourceRoot":""}