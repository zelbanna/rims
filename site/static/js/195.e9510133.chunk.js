"use strict";(self.webpackChunkrims_frontend=self.webpackChunkrims_frontend||[]).push([[195],{195:(t,e,s)=>{s.r(e),s.d(e,{AddressInfo:()=>x,Main:()=>h,NetworkList:()=>l});var n=s(791),i=s(587),a=s(885),o=s(698),d=s(682),r=s(184);class h extends n.Component{constructor(t){super(t),this.changeContent=t=>this.setState(t),this.state=(0,r.jsx)(l,{},"network_list")}render(){return(0,r.jsx)(r.Fragment,{children:this.state})}}class l extends n.Component{constructor(t){super(t),this.listItem=t=>[t.id,t.netasc,t.description,t.service,(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(d.ConfigureButton,{onClick:()=>this.changeContent((0,r.jsx)(p,{id:t.id},"network_"+t.id)),title:"Edit network properties"},"conf"),(0,r.jsx)(d.ItemsButton,{onClick:()=>this.changeContent((0,r.jsx)(_,{network_id:t.id,changeSelf:this.changeContent},"address_list_"+t.id)),title:"View addresses"},"items"),"v4"===t.class&&(0,r.jsx)(d.ViewButton,{onClick:()=>this.changeContent((0,r.jsx)(c,{network_id:t.id,changeSelf:this.changeContent},"address_layout_"+t.id)),title:"View usage map"},"layout"),"v4"===t.class&&(0,r.jsx)(d.CheckButton,{onClick:()=>this.changeContent((0,r.jsx)(m,{network_id:t.id,changeSelf:this.changeContent},"resv_list_"+t.id)),title:"Reserved addresses for network"},"resv"),(0,r.jsx)(d.DeleteButton,{onClick:()=>this.deleteList(t.id),title:"Delete network"},"del"),(0,r.jsx)(d.ReloadButton,{onClick:()=>this.resetStatus(t.id),title:"Reset state for network addresses"},"reset")]})],this.deleteList=t=>window.confirm("Really delete network")&&(0,i.Fh)("api/ipam/network_delete",{id:t}).then((e=>{e.deleted&&(this.setState({data:this.state.data.filter((e=>e.id!==t))}),this.changeContent(null))})),this.resetStatus=t=>(0,i.Fh)("api/ipam/clear",{network_id:t}).then((t=>this.setState({result:t.count}))),this.state={}}componentDidMount(){(0,i.Fh)("api/ipam/network_list").then((t=>this.setState(t)))}render(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.ContentList,{header:"Networks",thead:["ID","Network","Description","DHCP",""],trows:this.state.data,listItem:this.listItem,result:this.state.result,children:[(0,r.jsx)(d.ReloadButton,{onClick:()=>this.componentDidMount()},"reload"),(0,r.jsx)(d.AddButton,{onClick:()=>this.changeContent((0,r.jsx)(p,{id:"new"},"network_new_"+(0,i.P4)())),title:"Add network"},"add"),(0,r.jsx)(d.LogButton,{onClick:()=>this.changeContent((0,r.jsx)(u,{},"network_leases")),title:"View IPAM/DHCP leases"},"leases")]},"cl"),(0,r.jsx)(a.ContentData,{mountUpdate:t=>this.changeContent=t},"cda")]})}}class p extends n.Component{constructor(t){super(t),this.onChange=t=>this.setState({data:{...this.state.data,[t.target.name]:t.target.value}}),this.changeContent=t=>this.setState({content:t}),this.updateInfo=()=>(0,i.Fh)("api/ipam/network_info",{op:"update",...this.state.data}).then((t=>this.setState(t))),this.state={data:null,found:!0}}componentDidMount(){(0,i.Fh)("api/ipam/network_info",{id:this.props.id,extra:["servers","domains"]}).then((t=>this.setState(t)))}render(){return this.state.data?(0,r.jsxs)(a.InfoArticle,{header:"Network",children:[(0,r.jsxs)(a.InfoColumns,{children:[(0,r.jsx)(o.TextLine,{id:"id",label:"ID",text:this.state.data.id},"id"),(0,r.jsx)(o.TextInput,{id:"description",value:this.state.data.description,onChange:this.onChange},"description"),(0,r.jsx)(o.TextInput,{id:"network",value:this.state.data.network,onChange:this.onChange},"network"),(0,r.jsx)(o.TextInput,{id:"mask",value:this.state.data.mask,onChange:this.onChange},"mask"),(0,r.jsx)(o.TextInput,{id:"gateway",value:this.state.data.gateway,onChange:this.onChange},"gateway"),(0,r.jsx)(o.SelectInput,{id:"server_id",label:"Server",value:this.state.data.server_id,onChange:this.onChange,children:this.state.servers.map(((t,e)=>(0,r.jsx)("option",{value:t.id,children:`${t.service}@${t.node}`},e)))},"server_id"),(0,r.jsx)(o.SelectInput,{id:"reverse_zone_id",label:"Reverse Zone",value:this.state.data.reverse_zone_id,onChange:this.onChange,children:this.state.domains.map(((t,e)=>(0,r.jsx)("option",{value:t.id,children:`${t.server} (${t.name})`},e)))},"reverse_zone_id")]},"network_content"),(0,r.jsx)(d.SaveButton,{onClick:()=>this.updateInfo(),title:"Save"},"network_btn_save")]},"net_article"):(0,r.jsx)(a.Spinner,{})}}class c extends n.Component{constructor(){super(...arguments),this.changeContent=t=>this.props.changeSelf(t),this.changeDevice=t=>s.e(531).then(s.bind(s,531)).then((e=>this.changeContent((0,r.jsx)(e.Info,{id:t},"di_"+t)))),this.createDevice=(t,e)=>s.e(531).then(s.bind(s,531)).then((s=>this.changeContent((0,r.jsx)(s.New,{ipam_network_id:t,ip:e},"dn_new"))))}componentDidMount(){(0,i.Fh)("api/ipam/address_list",{network_id:this.props.network_id,dict:"ip_integer",extra:["device_id","reservation","ip_integer"]}).then((t=>this.setState(t)))}render(){if(this.state){const t=this.state.data,e=(0,i.$Y)(this.state.network),s=[];for(let n=0;n<this.state.size;n++){const a=e+n;a in t?t[a].device_id?s.push((0,r.jsx)(d.IpamRedButton,{onClick:()=>this.changeDevice(t[a].device_id),text:n%256},"btn_"+a)):s.push((0,r.jsx)(d.IpamGreyButton,{text:n%256},"btn_"+a)):s.push((0,r.jsx)(d.IpamGreenButton,{onClick:()=>this.createDevice(this.props.network_id,(0,i._v)(a)),text:n%256},"btn_"+a))}return(0,r.jsx)(a.Article,{header:this.state.network+"/"+this.state.mask,children:s},"il_art")}return(0,r.jsx)(a.Spinner,{})}}class u extends n.Component{constructor(t){super(t),this.listItem=t=>[t.ip,t.mac,t.hostname,t.oui,t.starts,t.ends],this.state={}}componentDidMount(){(0,i.Fh)("api/ipam/server_leases",{type:"active"}).then((t=>this.setState(t)))}render(){return(0,r.jsx)(a.ContentReport,{header:"Leases",thead:["IP","Mac","Hostname","OUI","Starts","End"],trows:this.state.data,listItem:this.listItem},"lease_cr")}}class _ extends n.Component{constructor(t){super(t),this.changeContent=t=>this.props.changeSelf(t),this.listItem=t=>[t.id,t.ip,t.hostname,t.domain,(0,r.jsxs)(r.Fragment,{children:["true"===t.monitor?(0,r.jsx)(a.StateLeds,{state:t.state},"state"):"",(0,r.jsx)(d.ConfigureButton,{onClick:()=>this.changeContent((0,r.jsx)(x,{id:t.id,changeSelf:this.changeContent},"address_info_"+t.id)),title:"Edit address entry"},"info"),(0,r.jsx)(d.DeleteButton,{onClick:()=>this.deleteList(t.id),title:"Delete address entry"},"del")]})],this.deleteList=t=>window.confirm("Delete address?")&&(0,i.Fh)("api/ipam/address_delete",{id:t}).then((e=>e.deleted&&this.setState({data:this.state.data.filter((e=>e.id!==t))}))),this.state={data:null,result:null}}componentDidMount(){(0,i.Fh)("api/ipam/address_list",{network_id:this.props.network_id,extra:["hostname","a_domain_id","device_id"]}).then((t=>this.setState(t)))}render(){return(0,r.jsxs)(a.ContentReport,{header:"Allocated IP Addresses",thead:["ID","IP","Hostname","Domain",""],trows:this.state.data,listItem:this.listItem,result:this.state.result,children:[(0,r.jsx)(d.ReloadButton,{onClick:()=>this.componentDidMount()},"al_btn_reload"),(0,r.jsx)(d.AddButton,{onClick:()=>this.changeContent((0,r.jsx)(x,{network_id:this.props.network_id,id:"new"},"address_new_"+(0,i.P4)())),title:"Add address entry"},"al_btn_add")]},"al_cr")}}class x extends n.Component{constructor(t){super(t),this.onChange=t=>this.setState({data:{...this.state.data,[t.target.name]:t.target["checkbox"!==t.target.type?"value":"checked"]}}),this.updateInfo=()=>{this.setState({status:void 0}),(0,i.Fh)("api/ipam/address_info",{op:"update",...this.state.data}).then((t=>this.setState(t)))},this.state={data:null}}componentDidMount(){(0,i.Fh)("api/ipam/address_info",{id:this.props.id,network_id:this.props.network_id}).then((t=>this.setState(t))),(0,i.Fh)("api/dns/domain_list",{filter:"forward"}).then((t=>this.setState({domains:t.data})))}render(){if(this.state&&this.state.data&&this.state.domains){let t="";return this.state.status&&(t="OK"===this.state.status?"OK":this.state.info),(0,r.jsxs)(a.InfoArticle,{header:"IP Address",children:[(0,r.jsxs)(a.InfoColumns,{children:[(0,r.jsx)(o.TextLine,{id:"id",label:"ID",text:this.state.data.id},"id"),(0,r.jsx)(o.TextLine,{id:"network",text:this.state.extra.network},"network"),(0,r.jsx)(o.TextInput,{id:"ip",label:"IP",value:this.state.data.ip,onChange:this.onChange},"ip"),(0,r.jsx)(o.TextInput,{id:"hostname",value:this.state.data.hostname,onChange:this.onChange,title:"Hostname when creating FQDN for DNS entry"},"hostname"),(0,r.jsx)(o.SelectInput,{id:"a_domain_id",label:"Domain",value:this.state.data.a_domain_id,onChange:this.onChange,children:this.state.domains.map(((t,e)=>(0,r.jsx)("option",{value:t.id,children:t.name},e)))},"a_domain_id"),(0,r.jsx)(o.CheckboxInput,{id:"monitor",value:this.state.data.monitor,onChange:this.onChange},"monitor")]},"ip_content"),(0,r.jsx)(d.SaveButton,{onClick:()=>this.updateInfo(),title:"Save"},"ip_btn_save"),(0,r.jsx)(a.Result,{result:t},"ip_operation")]},"ip_article")}return(0,r.jsx)(a.Spinner,{})}}class m extends n.Component{constructor(t){super(t),this.deleteList=t=>(0,i.Fh)("api/ipam/reservation_delete",{id:t}).then((e=>e.deleted&&this.setState({data:this.state.data.filter((e=>e.id!==t))}))),this.listItem=(t,e)=>[t.ip,t.type,(0,r.jsx)(d.DeleteButton,{onClick:()=>this.deleteList(t.id)},"resv_list_delete_"+t.id)],this.addEntry=()=>this.props.changeSelf((0,r.jsx)(C,{network_id:this.props.network_id,changeSelf:this.props.changeSelf},"resv_new_"+this.props.network_id)),this.state={}}componentDidMount(){(0,i.Fh)("api/ipam/reservation_list",{network_id:this.props.network_id}).then((t=>this.setState(t)))}render(){return this.state.data?(0,r.jsx)(a.ContentReport,{header:"Reservations",thead:["IP","Type",""],trows:this.state.data,listItem:this.listItem,children:(0,r.jsx)(d.AddButton,{onClick:()=>this.addEntry()},"resv_list_add_btn")},"resv_list_"+this.props.server_id):(0,r.jsx)(a.Spinner,{})}}class C extends n.Component{constructor(t){super(t),this.onChange=t=>this.setState({[t.target.name]:t.target.value}),this.updateInfo=()=>(0,i.Fh)("api/ipam/reservation_new",{network_id:this.props.network_id,ip:this.state.ip,type:this.state.type,a_domain_id:this.state.a_domain_id,start:this.state.start,end:this.state.end}).then((t=>this.setState({result:t}))),this.state={ip:"",start:"",end:"",result:void 0,type:"dhcp"}}componentDidMount(){(0,i.Fh)("api/ipam/network_info",{id:this.props.network_id}).then((t=>this.setState({...t.data}))),(0,i.Fh)("api/dns/domain_list",{filter:"forward"}).then((t=>this.setState({domains:t.data})))}render(){if(this.state.domains){const t=this.props.network_id,e=this.state.result?JSON.stringify(this.state.result.resv):"";return(0,r.jsxs)(a.InfoArticle,{header:"Reservation Address/Scope",children:[(0,r.jsx)("span",{children:"Allocate address with either 'ip' or 'start' to 'end' (e.g. a scope)"}),(0,r.jsxs)(a.InfoColumns,{children:[(0,r.jsx)(o.TextLine,{id:"network_id",label:"Network ID",text:t},"id"),(0,r.jsx)(o.TextLine,{id:"network",text:this.state.network+"/"+this.state.mask},"network"),(0,r.jsx)(o.TextInput,{id:"ip",label:"IP",value:this.state.ip,onChange:this.onChange},"ip"),(0,r.jsx)(o.TextInput,{id:"start",label:"Start IP",value:this.state.start,onChange:this.onChange},"start"),(0,r.jsx)(o.TextInput,{id:"end",label:"End IP",value:this.state.end,onChange:this.onChange},"end"),(0,r.jsxs)(o.SelectInput,{id:"type",label:"Type",value:this.state.type,onChange:this.onChange,children:[(0,r.jsx)("option",{value:"dhcp",children:"dhcp"},"dhcp"),(0,r.jsx)("option",{value:"reservation",children:"reservation"},"reservation")]},"type"),(0,r.jsx)(o.SelectInput,{id:"a_domain_id",label:"Domain",value:this.state.a_domain_id,onChange:this.onChange,children:this.state.domains.map(((t,e)=>(0,r.jsx)("option",{value:t.id,children:t.name},e)))},"a_domain_id")]},"dn_content"),this.props.changeSelf&&(0,r.jsx)(d.BackButton,{onClick:()=>this.props.changeSelf((0,r.jsx)(m,{network_id:t,changeSelf:this.props.changeSelf},"resv_list_"+t))},"dn_btn_back"),(0,r.jsx)(d.SaveButton,{onClick:()=>this.updateInfo(),title:"Save"},"dn_btn_save"),(0,r.jsx)(a.Result,{result:e},"dn_operation")]},"dn_article")}return(0,r.jsx)(a.Spinner,{})}}}}]);
//# sourceMappingURL=195.e9510133.chunk.js.map