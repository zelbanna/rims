{"version":3,"file":"static/js/617.77da979b.chunk.js","mappings":"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","sources":["interface.jsx"],"sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport { Spinner, StateLeds, Article, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton,ForwardButton, GoButton, HealthButton, InfoButton, ItemsButton, LinkButton, ReloadButton, RevertButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && post_call('api/interface/delete', {interface_id:interface_id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && post_call('api/interface/cleanup',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => post_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && post_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n unLink = (interface_id, connection_id) => (window.confirm('Really unlink?') && post_call('api/interface/disconnect', {connection_id:connection_id}).then(result => {\n  if (result.clear){\n   var data = this.state.data;\n   for (var iif of data){\n    if (iif.connection_id === connection_id){\n     iif.connection_id = null;\n     break;\n    }\n   }\n   this.setState({data:data,result:'OK'})\n  } else {\n   this.setState({result:'NOT_OK'})\n  }\n }))\n\n \n listItem = (row) => [row.snmp_index,row.name,row.mac,(row.ip) ? row.ip : '-',row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <>\n    <StateLeds key='state' state={[row.if_state,row.ip_state]} title='interface and ip state' />\n    <InfoButton key='info' onClick={() => this.changeContent(<Info key={row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    {row.snmp_index > 0 && <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key={row.interface_id} device_id={this.props.device_id} interface_id={row.interface_id} name={row.name} />)} title='Interface stats' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && ['wired','optical'].includes(row.class) && <LinkButton key='link' onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='connect_device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n    {row.connection_id && <UnlinkButton key='unlink' onClick={() => this.unLink(row.interface_id,row.connection_id)} title='Delete Connection' />}\n   </>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['SNMP','Name','MAC','IP Address','Description','Type','Link','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key='interface_info' device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Report ****************\n//\nexport class Report extends Component {\n componentDidMount(){\n  post_call('api/interface/list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.device_id,row.hostname,row.interface_id,row.class,row.ip,row.mac,row.name,row.description,<StateLeds key={'ir_'+row.id} state={[row.if_state,row.ip_state]} title='interface and ip state' />]\n\n render(){\n  return (!this.state) ? <Spinner /> : <ContentReport key='if_cr' header='Devices' thead={['Dev','Hostname','If','Class','IP','MAC','Name','Description','State']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}, domains:undefined, networks:undefined}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, description:this.props.description, device_id:this.props.device_id, class:this.props.class, extra:['classes','ip']}).then(result => this.setState({...result, update:undefined}));\n  post_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data}));\n  post_call('api/ipam/network_list').then(result => this.setState({networks:result.data}));\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount();\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n updateInfo = () => post_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />));\n\n // IPAM\n stateIpam = () => {\n  this.setState({op:'ipam', ipam:{ip:'<N/A>'}})\n }\n ipamSearchIP = () => {\n  if (this.state.ipam.network_id)\n   post_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n ipamOnChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n ipamCreate = () => post_call('api/interface/info',{op:'ipam_create',     interface_id:this.state.data.interface_id, record:this.state.ipam}).then(result => this.setState({...result,op:null}))\n ipamPrimary = (id) => post_call('api/interface/info',{op:'ipam_primary', interface_id:this.state.data.interface_id, ipam_id:id}).then(result => this.setState(result));\n ipamDelete = (id) => (window.confirm('Delete IP Address?') && post_call('api/ipam/address_delete',{id:id}).then(result => this.componentDidMount()));\n ipamDnsSync = () => post_call('api/interface/info',{op:'dns_sync',       interface_id:this.state.data.interface_id}).then(result => this.setState(result));\n\n // Connections\n connectDeviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   post_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n connectInterfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n disconnectInterface = () => (this.state.peer && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n stateInterface = () => (this.state.connect.found && post_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'connect_interface'})))\n connectInterfaceConnect = () => (this.state.connect.interface_id && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n\n // Render\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'connect_device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.connectDeviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'connect_interface')\n     return <LineArticle key='la_cnct'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='interface' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.connectInterfaceChange}>\n       {this.state.interfaces.map(row => <option key={row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='map' id='map' value={this.state.connect.map} onChange={this.connectInterfaceChange} />\n      <BackButton key='back' onClick={() => this.setState({op:'connect_device'})} title='Back' />\n      <ForwardButton key='fwd' onClick={() => this.connectInterfaceConnect()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ia_ipam' header='Create IPAM record'>\n      <InfoColumns key='ic'>\n       <SelectInput key='network' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamOnChange}>{this.state.networks.map(row => <option key={row.id} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamOnChange} />\n       <SelectInput key='domain' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamOnChange}>{this.state.domains.map(row => <option key={row.id} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='find_ip' onClick={() => this.ipamSearchIP()} title='Search IP within network' />\n      <ForwardButton key='fwd' onClick={() => this.ipamCreate()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const primary = (this.state.data.ipam_id);\n    const old = (this.state.data.interface_id !== 'new');\n    const peer = this.state.peer;\n    const opresult = (this.state.update === undefined) ? '' : 'Updated: ' + JSON.stringify(this.state.update)\n    return (<InfoArticle key='ia_interface_info' header='Interface'>\n     <InfoColumns key='ic' columns={3}>\n      <TextLine key='id' id='id' label='Local ID' text={this.state.data.interface_id} /><div />\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      {(primary) ? <SyncButton key='sync' onClick={() => this.ipamDnsSync()} title='sync interface name and IP hostname' /> : <div />}\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='snmp_index' id='snmp_index' label='SNMP index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      {primary && <><TextLine key='ip' id='ip' label='Primary IP' text={this.state.primary.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(this.state.primary.id)} title='Edit IPAM entry' /><DeleteButton key='delete' onClick={() => this.ipamDelete(this.state.primary.id)} title='Delete IPAM entry' /></div></>}\n      {this.state.alternatives.map(row => <Fragment key={row.ip}><TextLine key='ip' id={row.ip} label='Alternative IP' text={row.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(row.id)} title='Edit IPAM entry' /><SyncButton key='primary' onClick={() => this.ipamPrimary(row.id)} title='Make primary' /><DeleteButton key='delete' onClick={() => this.ipamDelete(row.id)} title='Delete IPAM entry' /></div></Fragment>)}\n      {peer && <><TextLine key='peer_int_id' id='peer_interface' label='Peer Interface' text={peer.interface_id} /><UnlinkButton key='unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></>}\n      {peer && <><TextLine key='peer_dev_id' id='peer_device' label='Peer Device' text={peer.device_id} /><div/></>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <ItemsButton key='list' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Interfaces' />}\n     {this.props.interface_id !== 'new' && <ReloadButton key='reload' onClick={() => this.componentDidMount()} />}\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {old && !peer && ['wired','optical'].includes(this.state.data.class) && <LinkButton key='connect' onClick={() => this.setState({op:'connect_device'})} title='Connect peer interface' />}\n     {old && <AddButton key='add' onClick={() => this.stateIpam()} title='Add IP' />}\n     <Result key='result' result={opresult} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Statistics ****************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {range:1, visibility: {ib:true, ob:true, ip:true, op:true}}\n  this.canvas = React.createRef()\n  this.graph = null;\n  this.vis = null;\n }\n\n componentDidMount(){\n  import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => {\n   this.vis = vis;\n   const options = { locale:'en', width:'100%', height:'100%', zoomMin:60000, zoomMax:1209600000, clickToUse:true, drawPoints: false, interpolation:false, legend:true, dataAxis:{ alignZeros:false , icons:true, left:{ title:{ text:'kbps' } }, right:{ title:{ text:'packets per second' } } } };\n   const groups = new this.vis.DataSet([{id:'ib', content:'In'}, {id:'ob', content:'Out' }, {id:'ip', content:'In', options: { yAxisOrientation: 'right'}},{id:'op', content:'Out', options: { yAxisOrientation: 'right'}}]);\n   this.graph = new this.vis.Graph2d(this.canvas.current, [], groups, options);\n   this.updateItems(this.state.range);\n  })\n }\n\n updateItems = (range) => post_call('api/statistics/query_interface',{device_id:this.props.device_id, interface_id:this.props.interface_id, range:range}).then(result => {\n  if (result.status === 'OK') {\n   const pos = {};\n   const names = {'in8s':'ib','out8s':'ob','inUPs':'ip','outUPs':'op'};\n   result.header.forEach((item,index) => pos[item] = index);\n   const dataset = new this.vis.DataSet(result.data.map(params => ({ x:params[pos['_time']], y:params[pos['_value']] * (params[pos['_field']].substr(-2) === '8s' ? 8/1024 : 1), group:names[params[pos['_field']]] })));\n   this.graph.setItems(dataset);\n   this.graph.fit();\n  }\n });\n\n rangeChange = (e) => {\n  this.setState({[e.target.name]:e.target.value})\n  this.updateItems(e.target.value);\n }\n\n checkChange = (e) => {\n  this.setState({visibility:{...this.state.visibility, [e.target.name]:e.target.checked}});\n  this.graph.setOptions({groups:{visibility:{[e.target.name]:e.target.checked}}})\n }\n\n gotoNow = () => {\n  const today = new Date()\n  this.graph.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  const v = this.state.visibility;\n  return <Article key='is_art' header='Statistics'>\n   <ReloadButton key='reload' onClick={() => this.updateItems(this.state.range)} title='Reload' />\n   <RevertButton key='reset' onClick={() => this.gotoNow()} title='Go to now' />\n   <br />\n   <TextLine key='name' id='name' label='Interface name' text={this.props.name} />\n   <br />\n   <SelectInput key='range' id='range' label='Time range' value={this.state.range} onChange={this.rangeChange}>\n    <option value='1'>1h</option>\n    <option value='4'>4h</option>\n    <option value='8'>8h</option>\n    <option value='24'>24h</option>\n   </SelectInput>\n   <CheckboxInput key='ib' id='ib' label='In bps' value={v.ib} onChange={this.checkChange} />\n   <CheckboxInput key='ob' id='ob' label='Out bps' value={v.ob} onChange={this.checkChange} />\n   <CheckboxInput key='ip' id='ip' label='In pps' value={v.ip} onChange={this.checkChange} />\n   <CheckboxInput key='op' id='op' label='Out pps' value={v.op} onChange={this.checkChange} />\n   <div className={styles.graphs} ref={this.canvas} />\n  </Article>\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => post_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"names":["List","Component","constructor","props","super","changeContent","elem","this","changeSelf","deleteList","interface_id","name","window","confirm","post_call","then","result","deleted","setState","data","state","filter","row","JSON","stringify","interfaces","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","unLink","connection_id","clear","iif","listItem","snmp_index","mac","ip","description","class","_jsx","HrefButton","text","onClick","ConnectionInfo","id","title","_jsxs","_Fragment","children","StateLeds","if_state","ip_state","InfoButton","Info","HealthButton","Statistics","DeleteButton","includes","LinkButton","op","UnlinkButton","render","ContentReport","header","thead","trows","ReloadButton","AddButton","TextButton","LLDP","loader","Spinner","Report","arguments","hostname","onChange","e","target","value","updateInfo","changeIpam","lib","AddressInfo","stateIpam","ipam","ipamSearchIP","network_id","ipamOnChange","ipamCreate","record","ipamPrimary","ipam_id","ipamDelete","ipamDnsSync","connectDeviceChange","connect","length","found","status","connectInterfaceChange","type","disconnectInterface","peer","a_id","b_id","disconnect","stateInterface","sort","connectInterfaceConnect","map","domains","undefined","networks","extra","update","componentDidUpdate","prevProps","LineArticle","TextInput","label","BackButton","ForwardButton","SelectInput","CheckboxInput","InfoArticle","InfoColumns","netasc","a_domain_id","SearchButton","primary","old","opresult","columns","TextLine","SyncButton","classes","GoButton","alternatives","Fragment","ItemsButton","SaveButton","Result","updateItems","range","pos","names","forEach","item","index","dataset","vis","DataSet","params","x","y","substr","group","graph","setItems","fit","rangeChange","checkChange","visibility","checked","setOptions","groups","gotoNow","today","Date","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","ib","ob","canvas","React","content","options","yAxisOrientation","Graph2d","current","locale","width","height","zoomMin","zoomMax","clickToUse","drawPoints","interpolation","legend","dataAxis","alignZeros","icons","left","right","v","Article","RevertButton","className","styles","graphs","ref","idx","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"sourceRoot":""}