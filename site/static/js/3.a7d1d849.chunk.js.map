{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","key","this","Component","listItem","row","id","netasc","description","service","onClick","NetworkInfo","title","AddressList","network_id","changeSelf","class","Layout","ReservationList","deleteList","resetStatus","content","window","confirm","post_call","then","result","deleted","data","filter","count","header","thead","trows","componentDidMount","rnd","Leases","onChange","e","target","name","value","updateInfo","op","found","extra","label","text","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","start","ip2int","layout","cnt","pos","device_id","push","int2ip","size","mac","hostname","oui","starts","ends","type","domain","AddressInfo","AddressLogs","status","undefined","info","a_domain_id","time","clearList","events","addEntry","ReservationNew","end","JSON","stringify","resv"],"mappings":"iUASaA,EAAb,kDACC,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAIPC,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAASD,IAHvC,EAAKE,MAAQ,kBAACC,EAAD,CAAaC,IAAI,iBAFb,EADnB,qDASE,OAAQ,kBAAC,WAAD,KAAWC,KAAKH,WAT1B,GAA0BI,aAebH,EAAb,kDACC,WAAYL,GAAO,IAAD,8BACjB,cAAMA,IAQPS,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIC,GACvBD,EAAIE,OACJF,EAAIG,YACJH,EAAII,QACJ,kBAAC,WAAD,KACC,kBAAC,kBAAD,CAAiBR,IAAK,gBAAgBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACe,EAAD,CAAaV,IAAK,WAAWI,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,4BAC5I,kBAAC,cAAD,CAAaX,IAAK,kBAAkBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACiB,EAAD,CAAaZ,IAAK,gBAAgBI,EAAIC,GAAIQ,WAAYT,EAAIC,GAAIS,WAAY,EAAKnB,kBAAoBgB,MAAM,mBACxK,OAAdP,EAAIW,OAAkB,kBAAC,aAAD,CAAYf,IAAK,kBAAkBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACqB,EAAD,CAAQhB,IAAK,kBAAkBI,EAAIC,GAAIQ,WAAYT,EAAIC,GAAIS,WAAY,EAAKnB,kBAAoBgB,MAAM,mBAC3L,OAAdP,EAAIW,OAAkB,kBAAC,cAAD,CAAaf,IAAK,gBAAgBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACsB,EAAD,CAAiBjB,IAAK,aAAaI,EAAIC,GAAIQ,WAAYT,EAAIC,GAAIS,WAAY,EAAKnB,kBAAoBgB,MAAM,mCAC7M,kBAAC,eAAD,CAAcX,IAAK,kBAAkBI,EAAIC,GAAII,QAAS,kBAAM,EAAKS,WAAWd,EAAIC,KAAKM,MAAM,mBAC3F,kBAAC,eAAD,CAAcX,IAAK,gBAAgBI,EAAIC,GAAII,QAAS,kBAAM,EAAKU,YAAYf,EAAIC,KAAKM,MAAM,yCAnB3E,EAsBlBhB,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACuB,QAAQxB,KAtB/B,EAuBlBsB,WAAa,SAACb,GAAD,OAASgB,OAAOC,QAAQ,0BAA4BC,YAAU,0BAA2B,CAAClB,GAAGA,IAAKmB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK7B,SAAS,CAAC8B,KAAK,EAAK7B,MAAM6B,KAAKC,QAAO,SAAAxB,GAAG,OAAKA,EAAIC,KAAOA,KAAKe,QAAQ,WAvBzM,EAyBlBD,YAAc,SAACd,GAAD,OAAQkB,YAAU,iBAAiB,CAACV,WAAWR,IAAKmB,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS,CAAC4B,OAAOA,EAAOI,YAvB7G,EAAK/B,MAAQ,GAFI,EADnB,gEAMqB,IAAD,OAClByB,YAAU,yBAAyBC,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,QAPlE,+BA4BU,IAAD,OACP,OAAO,kBAAC,WAAD,KACN,kBAAC,cAAD,CAAazB,IAAI,QAAQ8B,OAAO,WAAWC,MAAO,CAAC,KAAK,UAAU,cAAc,OAAO,IAAKC,MAAO/B,KAAKH,MAAM6B,KAAMxB,SAAUF,KAAKE,SAAUsB,OAAQxB,KAAKH,MAAM2B,QAC/J,kBAAC,eAAD,CAAczB,IAAI,gBAAiBS,QAAS,kBAAM,EAAKwB,uBACvD,kBAAC,YAAD,CAAWjC,IAAI,aAAaS,QAAS,kBAAM,EAAKd,cAAc,kBAACe,EAAD,CAAaV,IAAK,eAAekC,cAAO7B,GAAG,UAAWM,MAAM,gBAC1H,kBAAC,YAAD,CAAWX,IAAI,aAAaS,QAAS,kBAAM,EAAKd,cAAc,kBAACwC,EAAD,CAAQnC,IAAI,qBAAsBW,MAAM,2BAEvG,kBAAC,cAAD,CAAaX,IAAI,SAASC,KAAKH,MAAMsB,cAnCxC,GAAiClB,aA0C3BQ,E,kDACL,WAAYhB,GAAO,IAAD,8BACjB,cAAMA,IAIP0C,SAAW,SAACC,GAAD,OAAO,EAAKxC,SAAS,CAAC8B,KAAK,eAAI,EAAK7B,MAAM6B,KAAhB,eAAuBU,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,WALlE,EAOlB7C,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACuB,QAAQxB,KAP/B,EASlB6C,WAAa,kBAAMlB,YAAU,wBAAD,aAA0BmB,GAAG,UAAa,EAAK5C,MAAM6B,OAAOH,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,OAPpH,EAAK3B,MAAQ,CAAC6B,KAAK,KAAMgB,OAAM,GAFd,E,gEAWE,IAAD,OAClBpB,YAAU,wBAAwB,CAAClB,GAAGJ,KAAKP,MAAMW,GAAIuC,MAAM,CAAC,UAAU,aAAapB,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,Q,+BAGvG,IAAD,OACR,OAAIxB,KAAKH,MAAM6B,KACP,kBAAC,cAAD,CAAa3B,IAAI,cAAc8B,OAAO,WAC3C,kBAAC,cAAD,CAAa9B,IAAI,mBAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKK,GAAG,KAAKwC,MAAM,KAAKC,KAAM7C,KAAKH,MAAM6B,KAAKtB,KAC5D,kBAAC,YAAD,CAAWL,IAAI,cAAcK,GAAG,cAAemC,MAAOvC,KAAKH,MAAM6B,KAAKpB,YAAa6B,SAAUnC,KAAKmC,WAClG,kBAAC,YAAD,CAAWpC,IAAI,UAAUK,GAAG,UAAUmC,MAAOvC,KAAKH,MAAM6B,KAAKoB,QAASX,SAAUnC,KAAKmC,WACrF,kBAAC,YAAD,CAAWpC,IAAI,OAAOK,GAAG,OAAOmC,MAAOvC,KAAKH,MAAM6B,KAAKqB,KAAMZ,SAAUnC,KAAKmC,WAC5E,kBAAC,YAAD,CAAWpC,IAAI,UAAUK,GAAG,UAAUmC,MAAOvC,KAAKH,MAAM6B,KAAKsB,QAASb,SAAUnC,KAAKmC,WACrF,kBAAC,cAAD,CAAapC,IAAI,YAAYK,GAAG,YAAYwC,MAAM,SAASL,MAAOvC,KAAKH,MAAM6B,KAAKuB,UAAWd,SAAUnC,KAAKmC,UAC1GnC,KAAKH,MAAMqD,QAAQC,KAAI,SAAChD,EAAIiD,GAAL,OAAa,4BAAQrD,IAAKqD,EAAKb,MAAOpC,EAAIC,IAA7B,UAAqCD,EAAII,QAAzC,YAAoDJ,EAAIkD,WAE9F,kBAAC,cAAD,CAAatD,IAAI,kBAAkBK,GAAG,kBAAkBwC,MAAM,eAAeL,MAAOvC,KAAKH,MAAM6B,KAAK4B,gBAAiBnB,SAAUnC,KAAKmC,UAClInC,KAAKH,MAAM0D,QAAQJ,KAAI,SAAChD,EAAIiD,GAAL,OAAa,4BAAQrD,IAAKqD,EAAKb,MAAOpC,EAAIC,IAA7B,UAAqCD,EAAIqD,OAAzC,aAAoDrD,EAAImC,KAAxD,WAGvC,kBAAC,aAAD,CAAYvC,IAAI,mBAAmBS,QAAS,kBAAM,EAAKgC,cAAc9B,MAAM,UAGtE,kBAAC,UAAD,U,GAnCgBT,aAyCpBc,E,4MAMLrB,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMoB,WAAWlB,I,EAEhD8D,aAAe,SAACrD,GAAD,OAAQ,6BAAuBmB,MAAK,SAAAmC,GAAG,OAAI,EAAKhE,cAAc,kBAACgE,EAAIC,KAAL,CAAU5D,IAAK,MAAMK,EAAIA,GAAIA,S,EAE1GwD,aAAe,SAACd,EAAQe,GAAT,OAAgB,6BAAuBtC,MAAK,SAAAmC,GAAG,OAAK,EAAKhE,cAAc,kBAACgE,EAAII,IAAL,CAAS/D,IAAK,SAAUgE,gBAAiBjB,EAASe,GAAIA,S,kEARxH,IAAD,OAClBvC,YAAU,wBAAwB,CAACV,WAAWZ,KAAKP,MAAMmB,WAAWoD,KAAK,aAAarB,MAAM,CAAC,YAAY,cAAc,gBAAgBpB,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,Q,+BAS5J,IAAD,OACP,IAAKxB,KAAKH,MACT,OAAO,kBAAC,UAAD,MACF,IAAD,aAIJ,IAHA,IAAM6B,EAAO,EAAK7B,MAAM6B,KAClBuC,EAAQC,YAAO,EAAKrE,MAAMiD,SAC1BqB,EAAS,GAHX,WAIKC,GACR,IAAMC,EAAMJ,EAAQG,EACdC,KAAO3C,EAEJA,EAAK2C,GAAKC,UAClBH,EAAOI,KAAK,kBAAC,gBAAD,CAAexE,IAAK,OAASsE,EAAK7D,QAAS,kBAAM,EAAKiD,aAAa/B,EAAK2C,GAAKC,YAAYzB,KAAMuB,EAAI,OAE/GD,EAAOI,KAAK,kBAAC,iBAAD,CAAgBxE,IAAK,OAASsE,EAAKxB,KAAMuB,EAAI,OAJzDD,EAAOI,KAAK,kBAAC,kBAAD,CAAiBxE,IAAK,OAASsE,EAAK7D,QAAS,kBAAM,EAAKoD,aAAa,EAAKnE,MAAMmB,WAAW4D,YAAOH,KAAOxB,KAAMuB,EAAI,QAHxHA,EAAM,EAAGA,EAAM,EAAKvE,MAAM4E,KAAML,IAAO,EAAvCA,GAST,MAAM,CAAN,EAAO,kBAAC,UAAD,CAASrE,IAAI,SAAS8B,OAAQ,EAAKhC,MAAMiD,QAAU,IAAM,EAAKjD,MAAMkD,MACzEoB,IAdE,4C,GAfclE,aAqCfiC,E,kDACL,WAAYzC,GAAO,IAAD,8BACjB,cAAMA,IAQPS,SAAW,SAACC,GAAD,MAAS,CAACA,EAAI0D,GAAG1D,EAAIuE,IAAIvE,EAAIwE,SAASxE,EAAIyE,IAAIzE,EAAI0E,OAAO1E,EAAI2E,OAPvE,EAAKjF,MAAQ,GAFI,E,gEAKE,IAAD,OAClByB,YAAU,yBAAyB,CAACyD,KAAK,WAAWxD,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,Q,+BAMjF,OAAO,kBAAC,gBAAD,CAAezB,IAAI,WAAW8B,OAAO,SAASC,MAAO,CAAC,KAAK,MAAM,WAAW,MAAM,SAAS,OAAQC,MAAO/B,KAAKH,MAAM6B,KAAMxB,SAAUF,KAAKE,e,GAb9HD,aAmBfU,E,kDACL,WAAYlB,GAAO,IAAD,8BACjB,cAAMA,IAQPC,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMoB,WAAWlB,IAT9B,EAWlBO,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIC,GAAGD,EAAI0D,GAAG1D,EAAIwE,SAASxE,EAAI6E,OAAO,kBAAC,WAAD,KACzD,kBAAC,YAAD,CAAWnF,MAAOM,EAAIN,QACtB,kBAAC,kBAAD,CAAiBE,IAAK,eAAeI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACuF,EAAD,CAAalF,IAAK,gBAAgBI,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,uBAChJ,kBAAC,YAAD,CAAWX,IAAK,eAAiBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACwF,EAAD,CAAanF,IAAK,gBAAgBI,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,oBAC5I,kBAAC,eAAD,CAAcX,IAAK,iBAAiBI,EAAIC,GAAII,QAAS,kBAAM,EAAKS,WAAWd,EAAIC,KAAKM,MAAM,4BAf1E,EAkBlBO,WAAa,SAACb,GAAD,OAASgB,OAAOC,QAAQ,oBAAsBC,YAAU,0BAA2B,CAAClB,GAAGA,IAAKmB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK7B,SAAS,CAAC8B,KAAK,EAAK7B,MAAM6B,KAAKC,QAAO,SAAAxB,GAAG,OAAKA,EAAIC,KAAOA,WAhBvM,EAAKP,MAAQ,CAAC6B,KAAK,KAAKF,OAAO,MAFd,E,gEAKE,IAAD,OAClBF,YAAU,wBAAwB,CAACV,WAAWZ,KAAKP,MAAMmB,WAAW+B,MAAM,CAAC,WAAW,cAAc,eAAepB,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,Q,+BAcxI,IAAD,OACP,OAAO,kBAAC,gBAAD,CAAezB,IAAI,QAAQ8B,OAAO,yBAAyBC,MAAO,CAAC,KAAK,KAAK,WAAW,SAAS,IAAKC,MAAO/B,KAAKH,MAAM6B,KAAMxB,SAAUF,KAAKE,SAAUsB,OAAQxB,KAAKH,MAAM2B,QAChL,kBAAC,eAAD,CAAczB,IAAI,gBAAgBS,QAAS,kBAAM,EAAKwB,uBACtD,kBAAC,YAAD,CAAWjC,IAAI,aAAaS,QAAS,kBAAM,EAAKd,cAAc,kBAACuF,EAAD,CAAalF,IAAK,eAAiBkC,cAAOrB,WAAY,EAAKnB,MAAMmB,WAAYR,GAAG,UAAWM,MAAM,2B,GAxBxIT,aA+BbgF,EAAb,kDACC,WAAYxF,GAAO,IAAD,8BACjB,cAAMA,IAIP0C,SAAW,SAACC,GAAD,OAAO,EAAKxC,SAAS,CAAC8B,KAAK,eAAI,EAAK7B,MAAM6B,KAAhB,eAAuBU,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,WALlE,EAOlBC,WAAa,WACZ,EAAK5C,SAAS,CAACuF,YAAOC,IACtB9D,YAAU,wBAAD,aAA0BmB,GAAG,UAAa,EAAK5C,MAAM6B,OAAOH,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,OAPlG,EAAK3B,MAAQ,CAAC6B,KAAK,MAFF,EADnB,gEAaqB,IAAD,OAClBJ,YAAU,wBAAwB,CAAClB,GAAGJ,KAAKP,MAAMW,GAAGQ,WAAWZ,KAAKP,MAAMmB,aAAaW,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,MACpHF,YAAU,sBAAsB,CAAC,OAAS,YAAYC,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS,CAAC2D,QAAQ/B,EAAOE,YAfrG,+BAkBW,IAAD,OACR,GAAI1B,KAAKH,OAASG,KAAKH,MAAM6B,MAAQ1B,KAAKH,MAAM0D,QAAQ,CACvD,IAAI/B,EAAS,GAOb,OANIxB,KAAKH,MAAMsF,SAEb3D,EADyB,OAAtBxB,KAAKH,MAAMsF,OACL,KAEAnF,KAAKH,MAAMwF,MAEf,kBAAC,cAAD,CAAatF,IAAI,aAAa8B,OAAO,cAC1C,kBAAC,cAAD,CAAa9B,IAAI,cAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKK,GAAG,KAAKwC,MAAM,KAAKC,KAAM7C,KAAKH,MAAM6B,KAAKtB,KAC5D,kBAAC,WAAD,CAAUL,IAAI,UAAUK,GAAG,UAAUyC,KAAM7C,KAAKH,MAAM8C,MAAMG,UAC5D,kBAAC,YAAD,CAAW/C,IAAI,KAAKK,GAAG,KAAKwC,MAAM,KAAML,MAAOvC,KAAKH,MAAM6B,KAAKmC,GAAI1B,SAAUnC,KAAKmC,WAClF,kBAAC,YAAD,CAAWpC,IAAI,WAAWK,GAAG,WAAWmC,MAAOvC,KAAKH,MAAM6B,KAAKiD,SAAUxC,SAAUnC,KAAKmC,SAAUzB,MAAM,8CACxG,kBAAC,cAAD,CAAaX,IAAI,cAAcK,GAAG,cAAcwC,MAAM,SAASL,MAAOvC,KAAKH,MAAM6B,KAAK4D,YAAanD,SAAUnC,KAAKmC,UAAWnC,KAAKH,MAAM0D,QAAQJ,KAAI,SAAChD,EAAIiD,GAAL,OAAa,4BAAQrD,IAAKqD,EAAKb,MAAOpC,EAAIC,IAAKD,EAAImC,WAExM,kBAAC,aAAD,CAAYvC,IAAI,UAAUS,QAAS,kBAAM,EAAKgC,cAAc9B,MAAM,SAClE,kBAAC,SAAD,CAAQX,IAAI,eAAeyB,OAAQA,KAGrC,OAAO,kBAAC,UAAD,UAvCV,GAAiCvB,aA6C3BiF,E,kDACL,WAAYzF,GAAO,IAAD,8BACjB,cAAMA,IAQPS,SAAW,SAACC,EAAIiD,GAAL,MAAa,CAACjD,EAAIoF,KAAK,kBAAC,YAAD,CAAW1F,MAAOM,EAAIN,UATtC,EAWlB2F,UAAY,kBAAMlE,YAAU,0BAA0B,CAACmB,GAAG,QAASrC,GAAG,EAAKX,MAAMW,KAAKmB,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS,CAAC6F,OAAO,SAT1H,EAAK5F,MAAQ,GAFI,E,gEAKE,IAAD,OAClByB,YAAU,0BAA0B,CAAClB,GAAGJ,KAAKP,MAAMW,KAAKmB,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,Q,+BAO7E,IAAD,OACP,OAAO,kBAAC,gBAAD,CAAezB,IAAK,UAAUC,KAAKP,MAAMW,GAAIyB,OAAO,gBAAgBC,MAAO,CAAC,OAAO,IAAKC,MAAO/B,KAAKH,MAAM4F,OAAQvF,SAAUF,KAAKE,UACvI,kBAAC,eAAD,CAAcH,IAAI,gBAAgBS,QAAS,kBAAM,EAAKgF,aAAa9E,MAAM,oB,GAhBlDT,aAuBpBe,E,kDACL,WAAYvB,GAAO,IAAD,8BACjB,cAAMA,IAQPwB,WAAa,SAACb,GAAD,OAAQkB,YAAU,8BAA+B,CAAClB,GAAGA,IAAKmB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK7B,SAAS,CAAC8B,KAAK,EAAK7B,MAAM6B,KAAKC,QAAO,SAAAxB,GAAG,OAAKA,EAAIC,KAAOA,WATpJ,EAWlBF,SAAW,SAACC,EAAIiD,GAAL,MAAa,CAACjD,EAAI0D,GAAG1D,EAAI4E,KAAK,kBAAC,eAAD,CAAchF,IAAK,oBAAoBI,EAAIC,GAAII,QAAS,kBAAM,EAAKS,WAAWd,EAAIC,SAXzG,EAalBsF,SAAW,kBAAM,EAAKjG,MAAMoB,WAAW,kBAAC8E,EAAD,CAAgB5F,IAAK,YAAY,EAAKN,MAAMmB,WAAYA,WAAY,EAAKnB,MAAMmB,WAAYC,WAAY,EAAKpB,MAAMoB,eAXxJ,EAAKhB,MAAQ,GAFI,E,gEAKE,IAAD,OAClByB,YAAU,4BAA4B,CAACV,WAAWZ,KAAKP,MAAMmB,aAAaW,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS4B,Q,+BAS9F,IAAD,OACR,OAAGxB,KAAKH,MAAM6B,KACN,kBAAC,gBAAD,CAAe3B,IAAK,aAAaC,KAAKP,MAAMwD,UAAWpB,OAAO,eAAeC,MAAO,CAAC,KAAK,OAAO,IAAKC,MAAO/B,KAAKH,MAAM6B,KAAMxB,SAAUF,KAAKE,UACnJ,kBAAC,YAAD,CAAWH,IAAI,oBAAoBS,QAAS,kBAAM,EAAKkF,eAGjD,kBAAC,UAAD,U,GAtBoBzF,aA4BxB0F,E,kDACJ,WAAYlG,GAAO,IAAD,8BAClB,cAAMA,IAIP0C,SAAW,SAACC,GAAD,OAAO,EAAKxC,SAAL,eAAgBwC,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,SALvC,EAYnBC,WAAa,kBAAMlB,YAAU,2BAA2B,CAACV,WAAW,EAAKnB,MAAMmB,WAAYiD,GAAG,EAAKhE,MAAMgE,GAAIkB,KAAK,EAAKlF,MAAMkF,KAAMO,YAAY,EAAKzF,MAAMyF,YAAarB,MAAM,EAAKpE,MAAMoE,MAAO2B,IAAI,EAAK/F,MAAM+F,MAAMrE,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS,CAAC4B,OAAOA,QAVxP,EAAK3B,MAAQ,CAACgE,GAAG,GAAGI,MAAM,GAAG2B,IAAI,GAAIpE,YAAO4D,EAAUL,KAAK,QAFzC,E,gEAOC,IAAD,OAClBzD,YAAU,wBAAwB,CAAC,GAAKtB,KAAKP,MAAMmB,aAAaW,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAL,eAAkB4B,EAAOE,UACxGJ,YAAU,sBAAsB,CAAC,OAAS,YAAYC,MAAK,SAAAC,GAAM,OAAI,EAAK5B,SAAS,CAAC2D,QAAQ/B,EAAOE,Y,+BAK1F,IAAD,OACR,GAAI1B,KAAKH,MAAM0D,QAAQ,CACtB,IAAM3C,EAAaZ,KAAKP,MAAMmB,WACxBY,EAAUxB,KAAKH,MAAM2B,OAAUqE,KAAKC,UAAU9F,KAAKH,MAAM2B,OAAOuE,MAAQ,GAC9E,OAAO,kBAAC,cAAD,CAAahG,IAAI,aAAa8B,OAAO,6BAC3C,sGACA,kBAAC,cAAD,CAAa9B,IAAI,cAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKK,GAAG,aAAawC,MAAM,aAAaC,KAAMjC,IAC5D,kBAAC,WAAD,CAAUb,IAAI,UAAUK,GAAG,UAAUyC,KAAM7C,KAAKH,MAAMiD,QAAU,IAAM9C,KAAKH,MAAMkD,OACjF,kBAAC,YAAD,CAAWhD,IAAI,KAAKK,GAAG,KAAKwC,MAAM,KAAKL,MAAOvC,KAAKH,MAAMgE,GAAI1B,SAAUnC,KAAKmC,WAC5E,kBAAC,YAAD,CAAWpC,IAAI,QAAQK,GAAG,QAAQwC,MAAM,WAAWL,MAAOvC,KAAKH,MAAMoE,MAAO9B,SAAUnC,KAAKmC,WAC3F,kBAAC,YAAD,CAAWpC,IAAI,MAAMK,GAAG,MAAMwC,MAAM,SAASL,MAAOvC,KAAKH,MAAM+F,IAAKzD,SAAUnC,KAAKmC,WACnF,kBAAC,cAAD,CAAapC,IAAI,OAAOK,GAAG,OAAOwC,MAAM,OAAOL,MAAOvC,KAAKH,MAAMkF,KAAM5C,SAAUnC,KAAKmC,UACrF,4BAAQpC,IAAI,OAAOwC,MAAM,QAAzB,QACA,4BAAQxC,IAAI,cAAcwC,MAAM,eAAhC,gBAED,kBAAC,cAAD,CAAaxC,IAAI,cAAcK,GAAG,cAAcwC,MAAM,SAASL,MAAOvC,KAAKH,MAAMyF,YAAanD,SAAUnC,KAAKmC,UAAWnC,KAAKH,MAAM0D,QAAQJ,KAAI,SAAChD,EAAIiD,GAAL,OAAa,4BAAQrD,IAAKqD,EAAKb,MAAOpC,EAAIC,IAAKD,EAAImC,WAElMtC,KAAKP,MAAMoB,YAAc,kBAAC,aAAD,CAAYd,IAAI,cAAcS,QAAS,kBAAM,EAAKf,MAAMoB,WAAW,kBAACG,EAAD,CAAiBjB,IAAK,aAAea,EAAYA,WAAYA,EAAYC,WAAY,EAAKpB,MAAMoB,iBAC7L,kBAAC,aAAD,CAAYd,IAAI,cAAcS,QAAS,kBAAM,EAAKgC,cAAc9B,MAAM,SACtE,kBAAC,SAAD,CAAQX,IAAI,eAAeyB,OAAQA,KAGpC,OAAO,kBAAC,UAAD,U,GAtCmBvB","file":"static/js/3.a7d1d849.chunk.js","sourcesContent":["\nimport React, { Fragment, Component } from 'react'\nimport { post_call, rnd, int2ip, ip2int } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DocButton, DeleteButton, ViewButton, LogButton, ConfigureButton, ItemsButton, ReloadButton, CheckButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment>{this.state}</Fragment>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,\n   row.netasc,\n   row.description,\n   row.service,\n   <Fragment>\n    <ConfigureButton key={'net_btn_info_'+row.id} onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n    <ItemsButton key={'net_btn_items2_'+row.id} onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n    {row.class === 'v4' && <ViewButton key={'net_btn_layout_'+row.id} onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />}\n    {row.class === 'v4' && <CheckButton key={'net_btn_resv_'+row.id} onClick={() => this.changeContent(<ReservationList key={'resv_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='Reserved addresses for network' />}\n    <DeleteButton key={'net_btn_delete_'+row.id} onClick={() => this.deleteList(row.id)} title='Delete network' />\n    <ReloadButton key={'net_btn_rset_'+row.id} onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </Fragment>]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <Fragment>\n   <ContentList key='nl_cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='nl_btn_reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='nl_btn_doc' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='nl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id, extra:['servers','domains']}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','reservation','ip_integer']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = ip2int(this.state.network);\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<Fragment>\n   <StateLeds state={row.state} />\n   <ConfigureButton key={'al_btn_info_'+row.id} onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} />)} title='Edit address entry' />\n   <DocButton key={'al_btn_logs_' + row.id} onClick={() => this.changeContent(<AddressLogs key={'address_logs_'+row.id} id={row.id} />)} title='IPAM state logs' />\n   <DeleteButton key={'al_btn_delete_'+row.id} onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </Fragment>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Address Logs ***************\n//\nclass AddressLogs extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_events',{id:this.props.id}).then(result => this.setState(result))\n }\n\n listItem = (row,idx) => [row.time,<StateLeds state={row.state} />]\n\n clearList = () => post_call('api/ipam/address_events',{op:'clear', id:this.props.id}).then(result => this.setState({events:[]}))\n\n render(){\n  return <ContentReport key={'alo_cr_'+this.props.id} header='State changes' thead={['Time','']} trows={this.state.events} listItem={this.listItem}>\n   <DeleteButton key='alo_btn_clear' onClick={() => this.clearList()} title='clear logs' />\n  </ContentReport>\n }\n}\n\n// *************** Reservation List ***************\n//\nclass ReservationList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/reservation_list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => post_call('api/ipam/reservation_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))}))\n\n listItem = (row,idx) => [row.ip,row.type,<DeleteButton key={'resv_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<ReservationNew key={'resv_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'resv_list_'+this.props.server_id} header='Reservations' thead={['IP','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='resv_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation New ****************\n//\nclass ReservationNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {ip:'',start:'',end:'', result:undefined,type:'dhcp'}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{'id':this.props.network_id}).then(result => this.setState({...result.data}))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n updateInfo = () => post_call('api/ipam/reservation_new',{network_id:this.props.network_id, ip:this.state.ip, type:this.state.type, a_domain_id:this.state.a_domain_id, start:this.state.start, end:this.state.end}).then(result => this.setState({result:result}))\n\n render() {\n  if (this.state.domains){\n   const network_id = this.props.network_id;\n   const result = (this.state.result) ? JSON.stringify(this.state.result.resv) : '';\n   return <InfoArticle key='dn_article' header='Reservation Address/Scope'>\n    <span>Allocate address with either 'ip' or 'start' to 'end' (e.g. a scope)</span>\n    <InfoColumns key='dn_content'>\n     <TextLine key='id' id='network_id' label='Network ID' text={network_id} />\n     <TextLine key='network' id='network' text={this.state.network + '/' + this.state.mask} />\n     <TextInput key='ip' id='ip' label='IP' value={this.state.ip} onChange={this.onChange} />\n     <TextInput key='start' id='start' label='Start IP' value={this.state.start} onChange={this.onChange} />\n     <TextInput key='end' id='end' label='End IP' value={this.state.end} onChange={this.onChange} />\n     <SelectInput key='type' id='type' label='Type' value={this.state.type} onChange={this.onChange}>\n      <option key='dhcp' value='dhcp'>dhcp</option>\n      <option key='reservation' value='reservation'>reservation</option>\n     </SelectInput>\n     <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n    </InfoColumns>\n    {this.props.changeSelf && <BackButton key='dn_btn_back' onClick={() => this.props.changeSelf(<ReservationList key={'resv_list_' + network_id} network_id={network_id} changeSelf={this.props.changeSelf} />)} />}\n    <SaveButton key='dn_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    <Result key='dn_operation' result={result} />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}