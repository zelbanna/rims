{"version":3,"file":"static/js/275.7ad34c0f.chunk.js","mappings":"uNASO,MAAMA,UAAaC,EAAAA,UACzBC,YAAYC,GACXC,MAAMD,GAAM,KAcbE,gBAAkB,IAAMC,KAAKC,QAAQC,gBAAeC,EAAAA,EAAAA,MAACC,EAAAA,OAAM,CAAAC,SAAA,EACzDF,EAAAA,EAAAA,MAACG,EAAAA,YAAW,CAAeC,MAAM,aAAYF,SAAA,EAC7CG,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAmBF,MAAM,MAAMG,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACI,EAAI,CAAqBC,GAAG,OAAnB,mBAAtE,gBACnBL,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAmBF,MAAM,QAAQG,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACM,EAAK,CAAsBC,WAAYf,KAAKW,eAAlC,oBAAzE,gBACnBH,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAoBF,MAAM,OAAOG,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACQ,EAAI,GAAK,mBAAxE,kBAHF,YAKjBR,EAAAA,EAAAA,KAACS,EAAAA,UAAS,CAAqBV,MAAM,QAAQG,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACU,EAAQ,GAAK,wBAA9E,kBACfV,EAAAA,EAAAA,KAACS,EAAAA,UAAS,CAAsBV,MAAM,SAASG,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACW,EAAM,GAAK,qBAA9E,oBAP+C,oBAQrD,KAEXR,cAAiBS,GAASpB,KAAKqB,SAASD,GAvBvCpB,KAAKsB,OAAQd,EAAAA,EAAAA,KAACM,EAAK,CAAsBC,WAAYf,KAAKW,eAAlC,iBACzB,CAEAY,oBACCvB,KAAKD,iBACN,CAEAyB,mBAAmBC,GACfA,IAAczB,KAAKH,OACrBG,KAAKD,iBAEP,CAcA2B,SACC,OAAOlB,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,CAAAtB,SAAGL,KAAKsB,OAChB,EAGD5B,EAAKkC,YAAcC,EAAAA,YAInB,MAAMb,UAAarB,EAAAA,UAClBC,YAAYC,GACXC,MAAMD,GAAM,KAQbiC,SAAYC,GAAQ,CAACA,EAAIC,KAAO,MAAQD,EAAIE,MAAKzB,EAAAA,EAAAA,KAAC0B,EAAAA,WAAU,CAAsBxB,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACI,EAAI,CAAgBC,GAAIkB,EAAIlB,IAAnB,aAA4BsB,KAAMJ,EAAIK,MAAlG,QAAQL,EAAIlB,KAA+FV,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAtB,SAAA,EAC3KG,EAAAA,EAAAA,KAAC6B,EAAAA,WAAU,CAAY3B,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACI,EAAI,CAAqBC,GAAIkB,EAAIlB,IAAxB,kBAAkCN,MAAM,wBAA3F,SAChBC,EAAAA,EAAAA,KAAC8B,EAAAA,aAAY,CAAW5B,QAASA,IAAMV,KAAKuC,WAAWR,EAAIlB,IAAMN,MAAM,mBAArD,WACf,KAGLgC,WAAc1B,GAAQ2B,OAAOC,QAAQ,qBAAsBC,EAAAA,EAAAA,IAAU,6BAA8B,CAAC7B,GAAGA,IAAK8B,MAAKC,IAC5GA,EAAOC,UACV7C,KAAKqB,SAAS,CAACyB,KAAK9C,KAAKsB,MAAMwB,KAAKC,QAAOhB,GAAQA,EAAIlB,KAAOA,MAC9Db,KAAKW,cAAc,MACpB,IAjBAX,KAAKsB,MAAQ,CAAC0B,YAAY,GAC3B,CAEAzB,qBACCmB,EAAAA,EAAAA,IAAU,4BAA4BC,MAAKC,GAAU5C,KAAKqB,SAASuB,IACpE,CAcAlB,SACC,GAAI1B,KAAKsB,MAAMwB,KAAM,CACpB,IAAIG,EAA8C,IAAlCjD,KAAKsB,MAAM0B,YAAYE,OAAgBlD,KAAKsB,MAAMwB,KAAO9C,KAAKsB,MAAMwB,KAAKC,QAAOhB,GAAOA,EAAIK,KAAKe,SAASnD,KAAKsB,MAAM0B,eACpI,OAAO7C,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAtB,SAAA,EACNF,EAAAA,EAAAA,MAACiD,EAAAA,YAAW,CAAUC,OAAO,aAAaC,MAAO,CAAC,OAAO,OAAO,IAAKC,MAAON,EAAUnB,SAAU9B,KAAK8B,SAASzB,SAAA,EAC7GG,EAAAA,EAAAA,KAACgD,EAAAA,aAAY,CAAc9C,QAASA,IAAMV,KAAKuB,qBAA7B,WAClBf,EAAAA,EAAAA,KAACiD,EAAAA,UAAS,CAAW/C,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACI,EAAI,CAAqBC,GAAG,OAAnB,kBAA+BN,MAAM,gBAAvF,QACfC,EAAAA,EAAAA,KAACkD,EAAAA,YAAW,CAAcC,WAAaC,GAAM5D,KAAKqB,SAAS,CAAC2B,YAAYY,IAAKC,YAAY,qBAAxE,YAHD,OAKjBrD,EAAAA,EAAAA,KAACsD,EAAAA,YAAW,CAAWC,YAAcC,GAAQhE,KAAKW,cAAgBqD,GAAjD,SAEnB,CACC,OAAOxD,EAAAA,EAAAA,KAACyD,EAAAA,QAAO,GACjB,EAKD,MAAMrD,UAAajB,EAAAA,UAClBC,YAAYC,GACXC,MAAMD,GAAO,KAIdqE,SAAYC,GAAMnE,KAAKqB,SAAS,CAACyB,KAAK,IAAI9C,KAAKsB,MAAMwB,KAAM,CAACqB,EAAEC,OAAOC,MAAMF,EAAEC,OAAOE,SAAS,KAE7FC,WAAa,MACZ7B,EAAAA,EAAAA,IAAU,2BAA2B,CAAC8B,GAAG,YAAaxE,KAAKsB,MAAMwB,OAAOH,MAAKC,GAAU5C,KAAKqB,SAASuB,IAAQ,EAN7G5C,KAAKsB,MAAQ,CAACwB,KAAK,KACpB,CAQAtB,mBAAmBC,GACfA,IAAczB,KAAKH,QACrB6C,EAAAA,EAAAA,IAAU,2BAA2B,CAAC7B,GAAGb,KAAKH,MAAMgB,KAAK8B,MAAKC,IACjC,OAAxBA,EAAOE,KAAK2B,UACf7B,EAAOE,KAAK2B,QAAUzE,KAAKC,QAAQyE,SAAS7D,IAC7Cb,KAAKqB,SAASuB,EAAO,GAExB,CAEArB,qBACCmB,EAAAA,EAAAA,IAAU,2BAA2B,CAAC7B,GAAGb,KAAKH,MAAMgB,GAAI8D,OAAO,CAAC,QAAQ,WAAWhC,MAAKC,IAC3D,OAAxBA,EAAOE,KAAK2B,UACf7B,EAAOE,KAAK2B,QAAUzE,KAAKC,QAAQyE,SAAS7D,IAC7Cb,KAAKqB,SAASuB,EAAO,GAEvB,CAEAlB,SACC,OAAI1B,KAAKsB,MAAMwB,MACP3C,EAAAA,EAAAA,MAACyE,EAAAA,YAAW,CAAcvB,OAAO,WAAUhD,SAAA,EAChDF,EAAAA,EAAAA,MAAC0E,EAAAA,YAAW,CAAAxE,SAAA,EACXG,EAAAA,EAAAA,KAACsE,EAAAA,SAAQ,CAAajE,GAAG,KAAKkE,MAAM,KAAK5C,KAAMnC,KAAKsB,MAAMwB,KAAKjC,IAAjD,UACdL,EAAAA,EAAAA,KAACwE,EAAAA,YAAW,CAAkBnE,GAAG,UAAUkE,MAAM,OAAOT,MAAOtE,KAAKsB,MAAMwB,KAAK2B,QAASP,SAAUlE,KAAKkE,SAAS7D,SAAEL,KAAKsB,MAAM2D,MAAMC,KAAI,CAACnD,EAAIoD,KAAQ3E,EAAAA,EAAAA,KAAA,UAAkB8D,MAAOvC,EAAIlB,GAAGR,SAAE0B,EAAIqD,OAAzBD,MAAhJ,eACjB3E,EAAAA,EAAAA,KAACwE,EAAAA,YAAW,CAAkBnE,GAAG,UAAUkE,MAAM,OAAOT,MAAOtE,KAAKsB,MAAMwB,KAAKuC,QAASnB,SAAUlE,KAAKkE,SAAS7D,SAAEL,KAAKsB,MAAMgE,MAAMJ,KAAI,CAACnD,EAAIoD,KAAQ3E,EAAAA,EAAAA,KAAA,UAAkB8D,MAAOvC,EAAIlB,GAAGR,SAAE0B,EAAIK,MAAzB+C,MAAhJ,eACjB3E,EAAAA,EAAAA,KAAC+E,EAAAA,UAAS,CAAe1E,GAAG,OAAOyD,MAAOtE,KAAKsB,MAAMwB,KAAKd,KAAMkC,SAAUlE,KAAKkE,UAAhE,YACf1D,EAAAA,EAAAA,KAACgF,EAAAA,UAAS,CAAe3E,GAAG,OAAOyD,MAAOtE,KAAKsB,MAAMwB,KAAKb,KAAMiC,SAAUlE,KAAKkE,UAAhE,aALC,eAOjB1D,EAAAA,EAAAA,KAACiF,EAAAA,cAAa,CAAgB5E,GAAG,QAAQyD,MAAOtE,KAAKsB,MAAMwB,KAAK4C,MAAOxB,SAAUlE,KAAKkE,UAAnE,aACnB1D,EAAAA,EAAAA,KAACmF,EAAAA,WAAU,CAAmBjF,QAASA,IAAMV,KAAKuE,aAAchE,MAAM,QAAtD,gBAChBC,EAAAA,EAAAA,KAACoF,EAAAA,OAAM,CAAiBhD,OAAQiD,KAAKC,UAAU9F,KAAKsB,MAAMyE,SAA9C,eAVU,WAajBvF,EAAAA,EAAAA,KAACyD,EAAAA,QAAO,GACjB,EAEDrD,EAAKgB,YAAcC,EAAAA,YAInB,MAAMf,UAAcnB,EAAAA,UACnBC,YAAYC,GACXC,MAAMD,GAAO,KAKdc,cAAiBS,GAASpB,KAAKH,MAAMkB,WAAWK,GAAM,KAMtDmB,WAAcyD,GAAiBxD,OAAOC,QAAQ,qBAAsBC,EAAAA,EAAAA,IAAU,6BAA8B,CAAC7B,GAAGmF,IAAcrD,MAAKC,IAClI,GAAGA,EAAOC,QAAQ,CACjB,MAAMsC,EAAMnF,KAAKsB,MAAMwB,KAAKmD,WAAUC,GAAOA,EAAIC,SAAWH,IACtDlD,EAAO9C,KAAKsB,MAAMwB,KAAKqC,GAC7BiB,OAAOC,OAAOvD,EAAK,CAAC2B,QAAQ,KAAMiB,MAAM,KAAMS,OAAO,OACrDnG,KAAKqB,SAAS,CAACyB,KAAK9C,KAAKsB,MAAMwB,MAChC,KACE,KAEHoB,SAAYC,IACX,MAAMmC,EAAQnC,EAAEC,OAAOC,KACjBC,EAAQH,EAAEC,OAAOE,MACjBiC,EAAO,CAACvE,KAAgB,SAAVsE,EAAoBhC,EAAQtE,KAAKsB,MAAMU,OAC3DU,EAAAA,EAAAA,IAAU,4BAA4B6D,GAAM5D,MAAKC,GAAU5C,KAAKqB,SAAS,IAAIuB,EAAQ,CAAC0D,GAAOhC,KAAQ,EACrG,KAEDkC,UAAY,CAACnB,EAAQW,KACpBtD,EAAAA,EAAAA,IAAU,2BAA2B,CAAC8B,GAAG,SAAU3D,GAAImF,GAA6B,MAAOvB,QAAQzE,KAAKsB,MAAMmD,QAASY,QAAQA,EAASK,MAAM,OAAQ1D,KAAKhC,KAAKsB,MAAMU,OAAOW,MAAKC,IACjL,GAAGA,EAAOmD,OAAO,CAChB,MAAMZ,EAAMnF,KAAKsB,MAAMwB,KAAKmD,WAAUC,GAAOA,EAAIrF,KAAOwE,IAClDvC,EAAO9C,KAAKsB,MAAMwB,KAAKqC,GAC7BiB,OAAOC,OAAOvD,EAAK,CAAC2B,QAAQzE,KAAKsB,MAAMmD,QAASiB,MAAM,OAAQS,OAAOvD,EAAOE,KAAKjC,KACjFb,KAAKqB,SAAS,CAACyB,KAAK9C,KAAKsB,MAAMwB,MAChC,KACC,KAEHhB,SAAYC,GAAQ,CAACA,EAAIK,KAAOL,EAAI0C,QAAWzE,KAAKsB,MAAM2D,MAAMlD,EAAI0C,SAASW,MAAQ,IAAMrD,EAAI2D,MAAS3D,EAAI2D,MAAQ,KAAIvF,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAtB,SAAA,EACpH0B,EAAI0C,UAAWjE,EAAAA,EAAAA,KAACiD,EAAAA,UAAS,CAAW/C,QAASA,IAAMV,KAAKwG,UAAUzE,EAAIlB,GAAGkB,EAAIoE,SAA/C,OAC/BpE,EAAI0C,SAAW1C,EAAI0C,UAAYgC,SAASzG,KAAKsB,MAAMmD,WAAYjE,EAAAA,EAAAA,KAACkG,EAAAA,WAAU,CAAYhG,QAASA,IAAMV,KAAKwG,UAAUzE,EAAIlB,GAAGkB,EAAIoE,SAAhD,QAC/EpE,EAAIoE,SAAU3F,EAAAA,EAAAA,KAAC6B,EAAAA,WAAU,CAAY3B,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAACI,EAAI,CAA8BC,GAAIkB,EAAIoE,QAAhC,YAAYpE,EAAIoE,UAApE,QAC9BpE,EAAIoE,SAAU3F,EAAAA,EAAAA,KAAC8B,EAAAA,aAAY,CAAW5B,QAASA,IAAMV,KAAKuC,WAAWR,EAAIoE,SAAzC,WAxClC,MAAMnE,EAAO,IAAI2E,KAAKA,KAAKC,OAC3B5G,KAAKsB,MAAQ,CAACwB,KAAK,GAAId,KAAKA,EAAK6E,cAAcC,UAAU,EAAE,IAAKrC,aAAQsC,EAAW9B,MAAM,CAAC,EAC3F,CAIA1D,qBACCmB,EAAAA,EAAAA,IAAU,4BAA4B,CAACiC,OAAO,CAAC,WAAWhC,MAAKC,GAAU5C,KAAKqB,SAAS,IAAIuB,EAAQ6B,QAAQzE,KAAKC,QAAQyE,SAAS7D,MAClI,CAmCAa,SACC,OAAI1B,KAAKsB,MAAMwB,MACP3C,EAAAA,EAAAA,MAAC6G,EAAAA,cAAa,CAAU3D,OAAO,aAAaC,MAAO,CAAC,OAAO,OAAO,QAAQ,IAAKC,MAAOvD,KAAKsB,MAAMwB,KAAMhB,SAAU9B,KAAK8B,SAASzB,SAAA,EACrIG,EAAAA,EAAAA,KAACgD,EAAAA,aAAY,CAAc9C,QAASA,IAAMV,KAAKuB,qBAA7B,WAClBf,EAAAA,EAAAA,KAACwE,EAAAA,YAAW,CAAenE,GAAG,UAAUkE,MAAM,OAAOT,MAAOtE,KAAKsB,MAAMmD,QAASP,SAAUlE,KAAKkE,SAAS7D,SAAE+F,OAAOa,OAAOjH,KAAKsB,MAAM2D,OAAOC,KAAI,CAACnD,EAAIoD,KAAQ3E,EAAAA,EAAAA,KAAA,UAAkB8D,MAAOvC,EAAIlB,GAAGR,SAAE0B,EAAIqD,OAAzBD,MAAvJ,YACjB3E,EAAAA,EAAAA,KAAC+E,EAAAA,UAAS,CAAY1E,GAAG,OAAOyD,MAAOtE,KAAKsB,MAAMU,KAAMkC,SAAUlE,KAAKkE,UAAxD,UAHU,OAMnB1D,EAAAA,EAAAA,KAACyD,EAAAA,QAAO,GACjB,EAEDnD,EAAMc,YAAcC,EAAAA,YAIb,MAAMV,UAAexB,EAAAA,UAC3BC,YAAYC,GACXC,MAAMD,GAAM,KAQbiC,SAAYC,GAAQ,CAACA,EAAIC,KAAO,MAAQD,EAAIE,KAAKF,EAAImF,KAAKnF,EAAIK,KAAKL,EAAIoF,MAAMpF,EAAI2D,OAPhF1F,KAAKsB,MAAQ,CAAC,CACf,CAEAC,qBACCmB,EAAAA,EAAAA,IAAU,2BAA2B,CAAC0E,MAAM,QAAQC,KAAK,SAAS1E,MAAKC,GAAU5C,KAAKqB,SAASuB,IAChG,CAIAlB,SACC,OAAOlB,EAAAA,EAAAA,KAACwG,EAAAA,cAAa,CAAc3D,OAAO,aAAaC,MAAO,CAAC,OAAO,OAAO,OAAO,QAAQ,SAAUC,MAAOvD,KAAKsB,MAAMwB,KAAMhB,SAAU9B,KAAK8B,UAAnH,SAC3B,EAKD,MAAMZ,UAAiBvB,EAAAA,UACtBC,YAAYC,GACXC,MAAMD,GAAO,KAQdiC,SAAYC,GAAQ,CAACA,EAAIlB,GAAGkB,EAAIK,KAAKL,EAAIoF,OAAMhH,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAtB,SAAA,EAC7CG,EAAAA,EAAAA,KAAC8G,EAAAA,gBAAe,CAAY5G,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAAC+G,EAAQ,CAAc1G,GAAIkB,EAAIlB,IAAjB,WAA2BN,MAAM,yBAAxF,SACrBC,EAAAA,EAAAA,KAAC8B,EAAAA,aAAY,CAAc5B,QAASA,IAAMV,KAAKuC,WAAWR,EAAIlB,IAAMN,MAAM,eAAxD,cACf,KAELgC,WAAc1B,GAAQ2B,OAAOC,QAAQ,yBAA0BC,EAAAA,EAAAA,IAAU,kCAAmC,CAAC7B,GAAGA,IAAK8B,MAAKC,IACrHA,EAAOC,UACV7C,KAAKqB,SAAS,CAACyB,KAAK9C,KAAKsB,MAAMwB,KAAKC,QAAOhB,GAAQA,EAAIlB,KAAOA,MAC9Db,KAAKW,cAAc,MACpB,IAhBAX,KAAKsB,MAAQ,CAAC,CACf,CAEAC,qBACCmB,EAAAA,EAAAA,IAAU,iCAAiCC,MAAKC,GAAU5C,KAAKqB,SAASuB,IACzE,CAaAlB,SACC,OAAOvB,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAtB,SAAA,EACNF,EAAAA,EAAAA,MAACiD,EAAAA,YAAW,CAAUC,OAAO,iBAAiBC,MAAO,CAAC,KAAK,OAAO,QAAQ,IAAKC,MAAOvD,KAAKsB,MAAMwB,KAAMhB,SAAU9B,KAAK8B,SAASzB,SAAA,EAC9HG,EAAAA,EAAAA,KAACgD,EAAAA,aAAY,CAAc9C,QAASA,IAAMV,KAAKuB,qBAA7B,WAClBf,EAAAA,EAAAA,KAACiD,EAAAA,UAAS,CAAW/C,QAASA,IAAMV,KAAKW,eAAcH,EAAAA,EAAAA,KAAC+G,EAAQ,CAAc1G,GAAG,OAAZ,WAAwBN,MAAM,qBAApF,SAFC,OAIjBC,EAAAA,EAAAA,KAACsD,EAAAA,YAAW,CAAWC,YAAcC,GAAQhE,KAAKW,cAAgBqD,GAAjD,SAEnB,EAKD,MAAMuD,UAAiB5H,EAAAA,UACtBC,YAAYC,GACXC,MAAMD,GAAO,KAIdqE,SAAYC,GAAMnE,KAAKqB,SAAS,CAACyB,KAAK,IAAI9C,KAAKsB,MAAMwB,KAAM,CAACqB,EAAEC,OAAOC,MAAMF,EAAEC,OAAOE,SAAS,KAE7F3D,cAAiBS,GAASpB,KAAKqB,SAAS,CAACmG,QAAQpG,IAAM,KAEvDmD,WAAa,KAAO7B,EAAAA,EAAAA,IAAU,gCAAgC,CAAC8B,GAAG,YAAaxE,KAAKsB,MAAMwB,OAAOH,MAAKC,GAAU5C,KAAKqB,SAASuB,KAP7H5C,KAAKsB,MAAQ,CAACwB,KAAK,KAAM0E,QAAQ,KAClC,CAQAhG,mBAAmBC,GACfA,IAAczB,KAAKH,QACrB6C,EAAAA,EAAAA,IAAU,gCAAgC,CAAC7B,GAAGb,KAAKH,MAAMgB,KAAK8B,MAAKC,GAAU5C,KAAKqB,SAASuB,IAC7F,CAEArB,qBACCmB,EAAAA,EAAAA,IAAU,gCAAgC,CAAC7B,GAAGb,KAAKH,MAAMgB,KAAK8B,MAAKC,GAAU5C,KAAKqB,SAASuB,IAC5F,CAEAlB,SACC,OAAI1B,KAAKsB,MAAMwB,MAEb3C,EAAAA,EAAAA,MAACyE,EAAAA,YAAW,CAAavB,OAAO,gBAAehD,SAAA,EAC9CF,EAAAA,EAAAA,MAAC0E,EAAAA,YAAW,CAAAxE,SAAA,EACXG,EAAAA,EAAAA,KAACsE,EAAAA,SAAQ,CAAUjE,GAAG,KAAKsB,KAAMnC,KAAKsB,MAAMwB,KAAKjC,IAAnC,OACdL,EAAAA,EAAAA,KAACiH,EAAAA,UAAS,CAAY5G,GAAG,OAAOyD,MAAOtE,KAAKsB,MAAMwB,KAAKV,KAAM8B,SAAUlE,KAAKkE,SAAUL,YAAY,QAAnF,SACfrD,EAAAA,EAAAA,KAACwE,EAAAA,YAAW,CAAanE,GAAG,QAAQyD,MAAOtE,KAAKsB,MAAMwB,KAAKqE,MAAOjD,SAAUlE,KAAKkE,SAAS7D,SAAEL,KAAKsB,MAAMoG,QAAQxC,KAAInD,IAAOvB,EAAAA,EAAAA,KAAA,UAAkB8D,MAAOvC,EAAI1B,SAAE0B,GAAlBA,MAAtH,WAHD,OAKjBvB,EAAAA,EAAAA,KAACmF,EAAAA,WAAU,CAAYjF,QAASA,IAAMV,KAAKuE,aAAchE,MAAM,QAA/C,UANA,UAUXC,EAAAA,EAAAA,KAACyD,EAAAA,QAAO,GACjB,E","sources":["activity.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Result, InfoArticle, InfoColumns, Spinner, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextLine, TextAreaInput, TextInput, SelectInput, DateInput, TimeInput, SearchField } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HrefButton, InfoButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton } from './infra/Navigation.jsx';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <Daily key='activity_daily' changeSelf={this.changeContent} />\n }\n\n componentDidMount(){\n  this.compileNavItems()\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   this.compileNavItems()\n  }\n }\n\n compileNavItems = () => this.context.loadNavigation(<NavBar key='activity_navbar'>\n   <NavDropDown key='act_nav' title='Activities'>\n   <NavDropButton key='act_nav_new' title='New' onClick={() => this.changeContent(<Info key='activity_info' id='new' />)} />\n   <NavDropButton key='act_nav_day' title='Daily' onClick={() => this.changeContent(<Daily key='activity_daily' changeSelf={this.changeContent} />)} />\n   <NavDropButton key='act_nav_list' title='List' onClick={() => this.changeContent(<List key='activity_list' />)} />\n   </NavDropDown>\n   <NavButton key='act_nav_types' title='Types' onClick={() => this.changeContent(<TypeList key='activity_type_list' />)} />\n   <NavButton key='act_nav_report' title='Report' onClick={() => this.changeContent(<Report key='activity_report' />)} />\n  </NavBar>)\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return <>{this.state}</>\n }\n\n}\nMain.contextType = RimsContext;\n\n// ************** List **************\n//\nclass List extends Component {\n constructor(props){\n  super(props)\n  this.state = {searchfield:''}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,<HrefButton key={'info_'+row.id} onClick={() => this.changeContent(<Info key='activity' id={row.id} />)} text={row.type} />,<>\n   <InfoButton key='info' onClick={() => this.changeContent(<Info key='activity_info' id={row.id} />) } title='Activity information' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id) } title='Delete activity' />\n  </>]\n\n\n deleteList = (id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  if (this.state.data) {\n   let act_list = (this.state.searchfield.length === 0) ? this.state.data : this.state.data.filter(row => row.type.includes(this.state.searchfield));\n   return <>\n    <ContentList key='cl' header='Activities' thead={['Date','Type','']} trows={act_list} listItem={this.listItem}>\n     <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='add' onClick={() => this.changeContent(<Info key='activity_info' id='new' />) } title='Add activity' />\n     <SearchField key='search' searchFire={(s) => this.setState({searchfield:s})} placeholder='Search activities' />\n    </ContentList>\n    <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n   </>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  post_call('api/master/activity_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   post_call('api/master/activity_info',{id:this.props.id}).then(result => {\n    if (result.data.user_id === null)\n     result.data.user_id = this.context.settings.id;\n    this.setState(result);\n   })\n }\n\n componentDidMount(){\n  post_call('api/master/activity_info',{id:this.props.id, extras:['types','users']}).then(result => {\n   if (result.data.user_id === null)\n    result.data.user_id = this.context.settings.id;\n   this.setState(result);\n  })\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='ai_art' header='Activity'>\n     <InfoColumns key='ai_content'>\n      <TextLine key='ai_id' id='id' label='ID' text={this.state.data.id} />\n      <SelectInput key='ai_user_id' id='user_id' label='User' value={this.state.data.user_id} onChange={this.onChange}>{this.state.users.map((row,idx) => <option key={idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n      <SelectInput key='ai_type_id' id='type_id' label='Type' value={this.state.data.type_id} onChange={this.onChange}>{this.state.types.map((row,idx) => <option key={idx} value={row.id}>{row.type}</option>)}</SelectInput>\n      <DateInput key='ai_date' id='date' value={this.state.data.date} onChange={this.onChange} />\n      <TimeInput key='ai_time' id='time' value={this.state.data.time} onChange={this.onChange} />\n     </InfoColumns>\n     <TextAreaInput key='ai_event' id='event' value={this.state.data.event} onChange={this.onChange} />\n     <SaveButton key='ai_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ai_result' result={JSON.stringify(this.state.update)} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// *************** Daily ***************\n//\nclass Daily extends Component {\n constructor(props){\n  super(props);\n  const date = new Date(Date.now());\n  this.state = {data:[], date:date.toISOString().substring(0,10), user_id:undefined, users:{}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/master/activity_daily',{extras:['users']}).then(result => this.setState({...result, user_id:this.context.settings.id}));\n }\n\n deleteList = (activity_id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:activity_id}).then(result => {\n  if(result.deleted){\n   const idx = this.state.data.findIndex(obj => obj.act_id === activity_id);\n   const data = this.state.data[idx];\n   Object.assign(data,{user_id:null, event:null, act_id:null});\n   this.setState({data:this.state.data})\n  }\n }))\n\n onChange = (e) => {\n  const field = e.target.name;\n  const value = e.target.value;\n  const args = {date:(field === 'date') ? value : this.state.date};\n  post_call('api/master/activity_daily',args).then(result => this.setState({...result, [field]:value}));\n }\n\n syncEvent = (type_id,activity_id) =>\n  post_call('api/master/activity_info',{op:'update', id:(activity_id) ? activity_id : 'new', user_id:this.state.user_id, type_id:type_id, event:'auto', date:this.state.date}).then(result => {\n   if(result.update){\n    const idx = this.state.data.findIndex(obj => obj.id === type_id);\n    const data = this.state.data[idx];\n    Object.assign(data,{user_id:this.state.user_id, event:'auto', act_id:result.data.id});\n    this.setState({data:this.state.data})\n   }\n  })\n\n listItem = (row) => [row.type, (row.user_id) ? this.state.users[row.user_id].alias : '-', (row.event) ? row.event : '-',<>\n   {!row.user_id && <AddButton key='add' onClick={() => this.syncEvent(row.id,row.act_id)} />}\n   {row.user_id && row.user_id !== parseInt(this.state.user_id) && <SyncButton key='sync' onClick={() => this.syncEvent(row.id,row.act_id)} />}\n   {row.act_id && <InfoButton key='info' onClick={() => this.changeContent(<Info key={'activity_'+row.act_id} id={row.act_id} />)} />}\n   {row.act_id && <DeleteButton key='del' onClick={() => this.deleteList(row.act_id)} />}\n  </>]\n\n render(){\n  if (this.state.data)\n   return <ContentReport key='cr' header='Activities' thead={['Type','User','Event','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount()} />\n    <SelectInput key='user_id' id='user_id' label='User' value={this.state.user_id} onChange={this.onChange}>{Object.values(this.state.users).map((row,idx) => <option key={idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n    <DateInput key='date' id='date' value={this.state.date} onChange={this.onChange} />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\nDaily.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list',{group:'month',mode:'full'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.user,row.type,row.class,row.event]\n\n render(){\n  return <ContentReport key='act_cr' header='Activities' thead={['Time','User','Type','Class','Event']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TypeList **************\n//\nclass TypeList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_type_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.type,row.class,<>\n   <ConfigureButton key='info' onClick={() => this.changeContent(<TypeInfo key='act_tp' id={row.id} />) } title='Edit type information' />\n   <DeleteButton key='delete' onClick={() => this.deleteList(row.id) } title='Delete type' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete type?') && post_call('api/master/activity_type_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Activity Types' thead={['ID','Type','Class','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<TypeInfo key='act_tp' id='new' />) } title='Add activity type' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** TypeInfo ***************\n//\nclass TypeInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, content:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/master/activity_type_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   post_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <InfoArticle key='ia_at' header='Activity Type'>\n     <InfoColumns key='ic'>\n      <TextLine key='id' id='id' text={this.state.data.id} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder='name' />\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n   )\n  else\n   return <Spinner />\n }\n}\n"],"names":["Main","Component","constructor","props","super","compileNavItems","this","context","loadNavigation","_jsxs","NavBar","children","NavDropDown","title","_jsx","NavDropButton","onClick","changeContent","Info","id","Daily","changeSelf","List","NavButton","TypeList","Report","elem","setState","state","componentDidMount","componentDidUpdate","prevProps","render","_Fragment","contextType","RimsContext","listItem","row","date","time","HrefButton","text","type","InfoButton","DeleteButton","deleteList","window","confirm","post_call","then","result","deleted","data","filter","searchfield","act_list","length","includes","ContentList","header","thead","trows","ReloadButton","AddButton","SearchField","searchFire","s","placeholder","ContentData","mountUpdate","fun","Spinner","onChange","e","target","name","value","updateInfo","op","user_id","settings","extras","InfoArticle","InfoColumns","TextLine","label","SelectInput","users","map","idx","alias","type_id","types","DateInput","TimeInput","TextAreaInput","event","SaveButton","Result","JSON","stringify","update","activity_id","findIndex","obj","act_id","Object","assign","field","args","syncEvent","parseInt","SyncButton","Date","now","toISOString","substring","undefined","ContentReport","values","user","class","group","mode","ConfigureButton","TypeInfo","content","TextInput","classes"],"sourceRoot":""}