{"version":3,"sources":["console.jsx"],"names":["Manage","changeContent","elem","setState","post_call","id","this","props","device_id","then","result","context","loadNavigation","title","data","onClick","Inventory","type","Info","state","Component","contextType","RimsContext","onChange","e","target","name","value","updateInfo","op","style","justifyContent","header","label","access_url","port","componentDidMount","cnctFunction","intf","parseInt","extra","window","open","listItem","row","interface","thead","trows","undefined","mountUpdate","fun"],"mappings":"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","file":"static/js/12.8a43a59d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Flex, InfoArticle, InfoColumns, Spinner, ContentList, ContentData } from './infra/UI.jsx';\nimport { TextInput } from './infra/Inputs.jsx';\nimport { ReloadButton, SaveButton, TermButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavInfo } from './infra/Navigation.jsx';\n\n// ************** Manage **************\n//\nexport class Manage extends Component {\n componentDidMount(){\n  post_call('api/device/hostname',{id:this.props.device_id}).then(result => {\n   this.context.loadNavigation(<NavBar key='cons_navbar'>\n    <NavInfo key='cons_nav_name' title={result.data} />\n    <NavButton key='cons_nav_inv' title='Inventory' onClick={() => this.changeContent(<Inventory key='cons_inventory' device_id={this.props.device_id} type={this.props.type} />)} />\n    <NavButton key='con_nav_info' title='Info' onClick={() => this.changeContent(<Info key='con_info' device_id={this.props.device_id} type={this.props.type} />)} />\n   </NavBar>)\n  })\n  this.setState(<Inventory key='cons_inventory' device_id={this.props.device_id} type={this.props.type} />);\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return <>{this.state}</>\n }\n}\nManage.contextType = RimsContext;\n\n// ************** Info **************\n//\nclass Info extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/devices/'+this.props.type+'/info',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => post_call('api/devices/'+this.props.type+'/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if (this.state.data){\n   return <Flex key='ci_flex' style={{justifyContent:'space-evenly'}}>\n    <InfoArticle key='ci_article' header={'Console Info - ' + this.props.type}>\n     <InfoColumns key='ci_info'>\n      <TextInput key='ci_access_url' id='access_url' label='Access URL' value={this.state.data.access_url} onChange={this.onChange} title='URL used as base together with port' />\n      <TextInput key='ci_port' id='port' value={this.state.data.port} onChange={this.onChange} />\n     </InfoColumns>\n     <ReloadButton key='ci_btn_reload' onClick={() => this.componentDidMount() } />\n     <SaveButton key='ci_btn_save' onClick={() => this.updateInfo() } />\n    </InfoArticle>\n   </Flex>\n  } else\n   return <Spinner />\n }\n}\n// ************** Inventory **************\n//\nexport class Inventory extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/devices/' + this.props.type + '/inventory',{device_id:this.props.device_id}).then(result => this.setState(result))\n }\n\n cnctFunction = (intf) => {\n  const port = parseInt(intf) + parseInt(this.state.extra.port);\n  window.open(`${this.state.extra.access_url}:${port}`,'_self');\n }\n\n listItem = (row) => [row.interface,row.name,<TermButton key={'con_inv_btn_cnct_' + row.interface} onClick={() => this.cnctFunction(row.interface)} title='Connect' />]\n\n render(){\n  if (this.state.data){\n   return <>\n    <ContentList key='cl' header='Inventory' thead={['Port','Device','']} trows={this.state.data} listItem={this.listItem}>\n     <ReloadButton key='reload' onClick={() => {this.setState({data:undefined}); this.componentDidMount()} } />\n    </ContentList>\n    <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n   </>\n  } else\n   return <Spinner />\n }\n}\n\n"],"sourceRoot":""}