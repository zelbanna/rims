{"version":3,"sources":["activity.jsx"],"names":["Main","props","compileNavItems","context","loadNavigation","key","title","onClick","changeContent","Info","id","Daily","changeSelf","List","TypeList","Report","elem","setState","state","this","prevProps","Component","contextType","RimsContext","listItem","row","date","time","text","type","deleteList","content","window","confirm","post_call","then","result","deleted","data","filter","searchfield","act_list","length","includes","header","thead","trows","componentDidMount","rnd","searchFire","s","placeholder","onChange","e","target","name","value","updateInfo","op","extras","user_id","settings","label","users","map","idx","alias","type_id","types","event","JSON","stringify","update","activity_id","findIndex","obj","act_id","Object","assign","field","args","syncEvent","parseInt","Date","now","toISOString","substring","undefined","values","user","class","group","mode","TypeInfo","classes"],"mappings":"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","file":"static/js/12.8bd2140b.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { post_call, rnd } from './infra/Functions.js';\nimport { RimsContext, Result, InfoArticle, InfoColumns, Spinner, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextLine, TextAreaInput, TextInput, SelectInput, DateInput, TimeInput, SearchInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HrefButton, InfoButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton } from './infra/Navigation.jsx';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <Daily key='activity_daily' changeSelf={this.changeContent} />\n }\n\n componentDidMount(){\n  this.compileNavItems()\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   this.compileNavItems()\n  }\n }\n\n compileNavItems = () => this.context.loadNavigation(<NavBar key='activity_navbar'>\n   <NavDropDown key='act_nav' title='Activities'>\n   <NavDropButton key='act_nav_new' title='New' onClick={() => this.changeContent(<Info key='activity_info' id='new' />)} />\n   <NavDropButton key='act_nav_day' title='Daily' onClick={() => this.changeContent(<Daily key='activity_daily' changeSelf={this.changeContent} />)} />\n   <NavDropButton key='act_nav_list' title='List' onClick={() => this.changeContent(<List key='activity_list' />)} />\n   </NavDropDown>\n   <NavButton key='act_nav_types' title='Types' onClick={() => this.changeContent(<TypeList key='activity_type_list' />)} />\n   <NavButton key='act_nav_report' title='Report' onClick={() => this.changeContent(<Report key='activity_report' />)} />\n  </NavBar>)\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment>{this.state}</Fragment>\n }\n\n}\nMain.contextType = RimsContext;\n\n// ************** List **************\n//\nclass List extends Component {\n constructor(props){\n  super(props)\n  this.state = {searchfield:''}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,<HrefButton key={'al_btn_hinfo_'+row.id} onClick={() => this.changeContent(<Info key={'activity_info_'+row.id} id={row.id} />)} text={row.type} />,<Fragment>\n   <InfoButton key={'al_btn_info_'+row.id} onClick={() => this.changeContent(<Info key={'activity_'+row.id} id={row.id} />) } title='Activity information' />\n   <DeleteButton key={'al_btn_delete_'+row.id} onClick={() => this.deleteList(row.id) } title='Delete activity' />\n   </Fragment>\n  ]\n\n changeContent = (elem) => this.setState({content:elem})\n\n deleteList = (id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  if (this.state.data) {\n   let act_list = (this.state.searchfield.length === 0) ? this.state.data : this.state.data.filter(row => row.type.includes(this.state.searchfield));\n   return <Fragment>\n    <ContentList key='al_cl' header='Activities' thead={['Date','Type','']} trows={act_list} listItem={this.listItem}>\n     <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='al_btn_add' onClick={() => this.changeContent(<Info key={'activity_new_' + rnd()} id='new' />) } title='Add activity' />\n     <SearchInput key='al_search' searchFire={(s) => this.setState({searchfield:s})} placeholder='Search activities' />\n    </ContentList>\n    <ContentData key='al_cd'>{this.state.content}</ContentData>\n   </Fragment>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  post_call('api/master/activity_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/master/activity_info',{id:this.props.id, extras:['types','users']}).then(result => {\n   if (result.data.user_id === null)\n    result.data.user_id = this.context.settings.id;\n   this.setState(result);\n  })\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='ai_art' header='Activity'>\n     <InfoColumns key='ai_content'>\n      <TextLine key='ai_id' id='id' label='ID' text={this.state.data.id} />\n      <SelectInput key='ai_user_id' id='user_id' label='User' value={this.state.data.user_id} onChange={this.onChange}>{this.state.users.map((row,idx) => <option key={idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n      <SelectInput key='ai_type_id' id='type_id' label='Type' value={this.state.data.type_id} onChange={this.onChange}>{this.state.types.map((row,idx) => <option key={idx} value={row.id}>{row.type}</option>)}</SelectInput>\n      <DateInput key='ai_date' id='date' value={this.state.data.date} onChange={this.onChange} />\n      <TimeInput key='ai_time' id='time' value={this.state.data.time} onChange={this.onChange} />\n     </InfoColumns>\n     <TextAreaInput key='ai_event' id='event' value={this.state.data.event} onChange={this.onChange} />\n     <SaveButton key='ai_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ai_result' result={JSON.stringify(this.state.update)} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// *************** Daily ***************\n//\nclass Daily extends Component {\n constructor(props){\n  super(props);\n  const date = new Date(Date.now());\n  this.state = {data:[], date:date.toISOString().substring(0,10), user_id:undefined, users:{}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/master/activity_daily',{extras:['users']}).then(result => this.setState({...result, user_id:this.context.settings.id}));\n }\n\n deleteList = (activity_id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:activity_id}).then(result => {\n  if(result.deleted){\n   const idx = this.state.data.findIndex(obj => obj.act_id === activity_id);\n   const data = this.state.data[idx];\n   Object.assign(data,{user_id:null, event:null, act_id:null});\n   this.setState({data:this.state.data})\n  }\n }))\n\n onChange = (e) => {\n  const field = e.target.name;\n  const value = e.target.value;\n  const args = {date:(field === 'date') ? value : this.state.date};\n  post_call('api/master/activity_daily',args).then(result => this.setState({...result, [field]:value}));\n }\n\n syncEvent = (type_id,activity_id) =>\n  post_call('api/master/activity_info',{op:'update', id:(activity_id) ? activity_id : 'new', user_id:this.state.user_id, type_id:type_id, event:'auto', date:this.state.date}).then(result => {\n   if(result.update){\n    const idx = this.state.data.findIndex(obj => obj.id === type_id);\n    const data = this.state.data[idx];\n    Object.assign(data,{user_id:this.state.user_id, event:'auto', act_id:result.data.id});\n    this.setState({data:this.state.data})\n   }\n  })\n\n listItem = (row) => {\n  return [row.type, (row.user_id) ? this.state.users[row.user_id].alias : '-', (row.event) ? row.event : '-',<Fragment>\n  {!row.user_id && <AddButton key={'ad_add_'+row.id} onClick={() => this.syncEvent(row.id,row.act_id)} />}\n  {row.user_id && row.user_id !== parseInt(this.state.user_id) && <SyncButton key={'ad_sync_'+row.id} onClick={() => this.syncEvent(row.id,row.act_id)} />}\n  {row.act_id && <InfoButton key={'ad_info'} onClick={() => this.changeContent(<Info key={'activity_'+row.act_id} id={row.act_id} />)} />}\n  {row.act_id && <DeleteButton key={'ad_del'} onClick={() => this.deleteList(row.act_id)} />}\n  </Fragment>]\n }\n\n render(){\n  if (this.state.data)\n   return <ContentReport key='ad_cr' header='Activities' thead={['Type','User','Event','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='ad_reload_btn' onClick={() => this.componentDidMount()} />\n    <SelectInput key='ad_user_id' id='user_id' label='User' value={this.state.user_id} onChange={this.onChange}>{Object.values(this.state.users).map((row,idx) => <option key={idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n    <DateInput key='ad_date' id='date' value={this.state.date} onChange={this.onChange} />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\nDaily.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list',{group:'month',mode:'full'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.user,row.type,row.class,row.event]\n\n render(){\n  return <ContentReport key='act_cr' header='Activities' thead={['Time','User','Type','Class','Event']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TypeList **************\n//\nclass TypeList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_type_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.type,row.class,<Fragment>\n   <ConfigureButton key='act_tp_info' onClick={() => this.changeContent(<TypeInfo key={'activity_type_'+row.id} id={row.id} />) } title='Edit type information' />\n   <DeleteButton key='act_tp_delete' onClick={() => this.deleteList(row.id) } title='Delete type' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete type?') && post_call('api/master/activity_type_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment>\n   <ContentList key='act_tp_cl' header='Activity Types' thead={['ID','Type','Class','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='act_tp_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='act_tp_btn_add' onClick={() => this.changeContent(<TypeInfo key={'act_tp_new_' + rnd()} id='new' />) } title='Add activity type' />\n   </ContentList>\n   <ContentData key='act_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** TypeInfo ***************\n//\nclass TypeInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, content:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/master/activity_type_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <InfoArticle key='at_art' header='Activity Type'>\n     <InfoColumns key='at_content'>\n      <TextLine key='id' id='id' text={this.state.data.id} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder='name' />\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='at_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n   )\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}