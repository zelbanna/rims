{"version":3,"file":"static/js/559.6f4297d7.chunk.js","mappings":"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","sources":["ipam.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport { post_call, rnd, int2ip, ip2int } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton, ViewButton, LogButton, ConfigureButton, ItemsButton, ReloadButton, CheckButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\n// import styles from './infra/ui.module.css';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <>{this.state}</>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,\n   row.netasc,\n   row.description,\n   row.service,\n   <>\n    <ConfigureButton key='conf' onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n    <ItemsButton key='items' onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n    {row.class === 'v4' && <ViewButton key='layout' onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />}\n    {row.class === 'v4' && <CheckButton key='resv' onClick={() => this.changeContent(<ReservationList key={'resv_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='Reserved addresses for network' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete network' />\n    <ReloadButton key='reset' onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='leases' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id, extra:['servers','domains']}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','reservation','ip_integer']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = ip2int(this.state.network);\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<>\n   { (row.monitor === 'true') ? <StateLeds key='state' state={row.state} /> : '' }\n   <ConfigureButton key='info' onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} changeSelf={this.changeContent} />)} title='Edit address entry' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n      <CheckboxInput key='monitor' id='monitor' value={this.state.data.monitor} onChange={this.onChange} />\n     </InfoColumns>\n     <SaveButton key='ip_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation List ***************\n//\nclass ReservationList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/reservation_list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => post_call('api/ipam/reservation_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))}))\n\n listItem = (row,idx) => [row.ip,row.type,<DeleteButton key={'resv_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<ReservationNew key={'resv_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'resv_list_'+this.props.server_id} header='Reservations' thead={['IP','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='resv_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation New ****************\n//\nclass ReservationNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {ip:'',start:'',end:'', result:undefined,type:'dhcp'}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{'id':this.props.network_id}).then(result => this.setState({...result.data}))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n updateInfo = () => post_call('api/ipam/reservation_new',{network_id:this.props.network_id, ip:this.state.ip, type:this.state.type, a_domain_id:this.state.a_domain_id, start:this.state.start, end:this.state.end}).then(result => this.setState({result:result}))\n\n render() {\n  if (this.state.domains){\n   const network_id = this.props.network_id;\n   const result = (this.state.result) ? JSON.stringify(this.state.result.resv) : '';\n   return <InfoArticle key='dn_article' header='Reservation Address/Scope'>\n    <span>Allocate address with either 'ip' or 'start' to 'end' (e.g. a scope)</span>\n    <InfoColumns key='dn_content'>\n     <TextLine key='id' id='network_id' label='Network ID' text={network_id} />\n     <TextLine key='network' id='network' text={this.state.network + '/' + this.state.mask} />\n     <TextInput key='ip' id='ip' label='IP' value={this.state.ip} onChange={this.onChange} />\n     <TextInput key='start' id='start' label='Start IP' value={this.state.start} onChange={this.onChange} />\n     <TextInput key='end' id='end' label='End IP' value={this.state.end} onChange={this.onChange} />\n     <SelectInput key='type' id='type' label='Type' value={this.state.type} onChange={this.onChange}>\n      <option key='dhcp' value='dhcp'>dhcp</option>\n      <option key='reservation' value='reservation'>reservation</option>\n     </SelectInput>\n     <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n    </InfoColumns>\n    {this.props.changeSelf && <BackButton key='dn_btn_back' onClick={() => this.props.changeSelf(<ReservationList key={'resv_list_' + network_id} network_id={network_id} changeSelf={this.props.changeSelf} />)} />}\n    <SaveButton key='dn_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    <Result key='dn_operation' result={result} />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n"],"names":["Main","Component","constructor","props","super","changeContent","elem","this","setState","state","_jsx","NetworkList","render","_Fragment","children","listItem","row","id","netasc","description","service","_jsxs","ConfigureButton","onClick","NetworkInfo","title","ItemsButton","AddressList","network_id","changeSelf","class","ViewButton","Layout","CheckButton","ReservationList","DeleteButton","deleteList","ReloadButton","resetStatus","window","confirm","post_call","then","result","deleted","data","filter","count","componentDidMount","ContentList","header","thead","trows","AddButton","rnd","LogButton","Leases","ContentData","mountUpdate","fun","onChange","e","target","name","value","content","updateInfo","op","found","extra","InfoArticle","InfoColumns","TextLine","label","text","TextInput","network","mask","gateway","SelectInput","server_id","servers","map","idx","node","reverse_zone_id","domains","server","SaveButton","Spinner","arguments","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","start","ip2int","layout","cnt","size","pos","device_id","push","IpamRedButton","IpamGreyButton","IpamGreenButton","int2ip","Article","mac","hostname","oui","starts","ends","type","ContentReport","domain","monitor","StateLeds","AddressInfo","status","undefined","info","a_domain_id","CheckboxInput","Result","addEntry","ReservationNew","end","JSON","stringify","resv","BackButton"],"sourceRoot":""}