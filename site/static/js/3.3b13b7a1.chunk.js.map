{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","key","this","Component","listItem","row","id","netasc","description","class","text","service","onClick","DhcpList","network_id","changeSelf","title","NetworkInfo","AddressList","Layout","deleteList","resetStatus","content","window","confirm","post_call","then","result","deleted","data","filter","count","header","thead","trows","componentDidMount","rnd","Leases","onChange","e","target","name","value","updateInfo","op","found","extra","label","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","start","ip2int","layout","cnt","pos","device_id","push","int2ip","size","mac","hostname","oui","starts","ends","type","domain","AddressInfo","status","undefined","info","a_domain_id","addEntry","DhcpNew","end","JSON","stringify","dhcp"],"mappings":"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","file":"static/js/3.3b13b7a1.chunk.js","sourcesContent":["\nimport React, { Fragment, Component } from 'react'\nimport { post_call, rnd, int2ip, ip2int } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton, ViewButton, LogButton, ConfigureButton, HrefButton, ItemsButton, ReloadButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,\n   row.netasc,\n   row.description,\n   (row.class === 'v4') ? <HrefButton key={'net_btn_dhcp_'+row.id} text={row.service} onClick={() => this.changeContent(<DhcpList key={'dhcp_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='DHCP allocation for network' /> : '',\n   <Fragment key={'network_buttons_'+row.id}>\n    <ConfigureButton key={'net_btn_info_'+row.id} onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n    <ItemsButton key={'net_btn_items2_'+row.id} onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n    {row.class === 'v4' && <ViewButton key={'net_btn_layout_'+row.id} onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />}\n    <DeleteButton key={'net_btn_delete_'+row.id} onClick={() => this.deleteList(row.id)} title='Delete network' />\n    <ReloadButton key={'net_btn_rset_'+row.id} onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </Fragment>]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <Fragment key='nl_fragment'>\n   <ContentList key='nl_cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='nl_btn_reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='nl_btn_doc' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='nl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id, extra:['servers','domains']}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={'ni_srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={'ni_rzone_'+idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','dhcp','ip_integer']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = ip2int(this.state.network);\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<Fragment key={'ip_button_'+row.id}>\n   <StateLeds state={row.state} />\n   <ConfigureButton key={'al_btn_info'+row.id} onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} />)} title='Edit address entry' />\n   <DeleteButton key={'al_btn_delete'+row.id} onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </Fragment>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={'ai_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** DHCP List ***************\n//\nclass DhcpList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/dhcp/list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => (window.confirm('Really delete DHCP ip?') && post_call('api/dhcp/delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n listItem = (row,idx) => [row.ip,<DeleteButton key={'dhcp_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<DhcpNew key={'dhcp_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'dhcp_list_'+this.props.server_id} header='DHCP allocation' thead={['IP','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='dhcp_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** DHCP New ****************\n//\nclass DhcpNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {ip:'',start:'',end:'', result:undefined}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{'id':this.props.network_id}).then(result => this.setState({...result.data}))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n updateInfo = () => post_call('api/dhcp/new',{network_id:this.props.network_id, ip:this.state.ip, start:this.state.start, end:this.state.end}).then(result => this.setState({result:result}))\n\n render() {\n  if (this.state.domains){\n   const network_id = this.props.network_id;\n   const result = (this.state.result) ? JSON.stringify(this.state.result.dhcp) : '';\n   return <InfoArticle key='dn_article' header='DHCP Address/Scope'>\n    <span>Allocate DHCP with either 'ip' or 'start' to 'end' (e.g. a scope)</span>\n    <InfoColumns key='dn_content'>\n     <TextLine key='id' id='network_id' label='Network ID' text={network_id} />\n     <TextLine key='network' id='network' text={this.state.network + '/' + this.state.mask} />\n     <TextInput key='ip' id='ip' label='IP' value={this.state.ip} onChange={this.onChange} />\n     <TextInput key='start' id='start' label='Start IP' value={this.state.start} onChange={this.onChange} />\n     <TextInput key='end' id='end' label='End IP' value={this.state.end} onChange={this.onChange} />\n     <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={'ai_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n    </InfoColumns>\n    {this.props.changeSelf && <BackButton key='dn_btn_back' onClick={() => this.props.changeSelf(<DhcpList key={'dhcp_list_' + network_id} network_id={network_id} changeSelf={this.props.changeSelf} />)} />}\n    <SaveButton key='dn_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    <Result key='dn_operation' result={result} />\n   </InfoArticle>\n } else\n  return <div>TBD</div>\n }\n}\n\n"],"sourceRoot":""}