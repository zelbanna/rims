{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","key","this","Component","listItem","row","id","netasc","description","service","onClick","NetworkInfo","title","AddressList","changeSelf","network_id","Layout","deleteList","resetStatus","content","window","confirm","post_call","then","result","deleted","data","filter","count","header","thead","trows","componentDidMount","rnd","Leases","onChange","e","target","name","value","updateInfo","op","found","label","text","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","extra","start_address","parseInt","split","layout","cnt","hasOwnProperty","start","push","device_id","int2ip","size","mac","hostname","oui","starts","ends","type","domain","AddressInfo","a_domain_id","status","info"],"mappings":"iUAQaA,EAAb,kDACC,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAIPC,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAASD,IAHvC,EAAKE,MAAQ,kBAACC,EAAD,CAAaC,IAAI,iBAFb,EADnB,qDASE,OAAQ,kBAAC,WAAD,CAAUA,IAAI,aAAaC,KAAKH,WAT1C,GAA0BI,aAebH,EAAb,kDACC,WAAYL,GAAO,IAAD,8BACjB,cAAMA,IAQPS,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIC,GAAGD,EAAIE,OAAOF,EAAIG,YAAYH,EAAII,QAAQ,kBAAC,WAAD,CAAUR,IAAK,mBAAmBI,EAAIC,IACvG,kBAAC,kBAAD,CAAiBL,IAAK,gBAAgBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACe,EAAD,CAAaV,IAAK,WAAWI,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,4BAC5I,kBAAC,cAAD,CAAaX,IAAK,iBAAiBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACiB,EAAD,CAAaC,WAAY,EAAKlB,cAAeK,IAAK,gBAAgBI,EAAIC,GAAIS,WAAYV,EAAIC,OAASM,MAAM,mBACtL,kBAAC,aAAD,CAAYX,IAAK,kBAAkBI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACoB,EAAD,CAAQF,WAAY,EAAKlB,cAAeK,IAAK,kBAAkBI,EAAIC,GAAIS,WAAYV,EAAIC,OAASM,MAAM,mBACnL,kBAAC,eAAD,CAAcX,IAAK,kBAAkBI,EAAIC,GAAII,QAAS,kBAAM,EAAKO,WAAWZ,EAAIC,KAAKM,MAAM,mBAC3F,kBAAC,eAAD,CAAcX,IAAK,gBAAgBI,EAAIC,GAAII,QAAS,kBAAM,EAAKQ,YAAYb,EAAIC,KAAKM,MAAM,yCAd1E,EAkBlBhB,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACqB,QAAQtB,KAlB/B,EAmBlBoB,WAAa,SAACX,GAAD,OAASc,OAAOC,QAAQ,0BAA4BC,YAAU,0BAA2B,CAAChB,GAAGA,IAAKiB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK3B,SAAS,CAAC4B,KAAK,EAAK3B,MAAM2B,KAAKC,QAAO,SAAAtB,GAAG,OAAKA,EAAIC,KAAOA,KAAKa,QAAQ,WAnBzM,EAqBlBD,YAAc,SAACZ,GAAD,OAAQgB,YAAU,iBAAiB,CAACP,WAAWT,IAAKiB,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS,CAAC0B,OAAOA,EAAOI,YAnB7G,EAAK7B,MAAQ,GAFI,EADnB,gEAMqB,IAAD,OAClBuB,YAAU,yBAAyBC,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,QAPlE,+BAwBU,IAAD,OACP,OAAO,kBAAC,WAAD,CAAUvB,IAAI,eACpB,kBAAC,cAAD,CAAaA,IAAI,QAAQ4B,OAAO,WAAWC,MAAO,CAAC,KAAK,UAAU,cAAc,OAAO,IAAKC,MAAO7B,KAAKH,MAAM2B,KAAMtB,SAAUF,KAAKE,SAAUoB,OAAQtB,KAAKH,MAAMyB,QAC/J,kBAAC,eAAD,CAAcvB,IAAI,gBAAiBS,QAAS,kBAAM,EAAKsB,uBACvD,kBAAC,YAAD,CAAW/B,IAAI,aAAaS,QAAS,kBAAM,EAAKd,cAAc,kBAACe,EAAD,CAAaV,IAAK,eAAegC,cAAO3B,GAAG,UAAWM,MAAM,gBAC1H,kBAAC,YAAD,CAAWX,IAAI,aAAaS,QAAS,kBAAM,EAAKd,cAAc,kBAACsC,EAAD,CAAQjC,IAAI,qBAAsBW,MAAM,2BAEvG,kBAAC,cAAD,CAAaX,IAAI,SAASC,KAAKH,MAAMoB,cA/BxC,GAAiChB,aAsC3BQ,E,kDACL,WAAYhB,GAAO,IAAD,8BACjB,cAAMA,IAIPwC,SAAW,SAACC,GAAD,OAAO,EAAKtC,SAAS,CAAC4B,KAAK,eAAI,EAAK3B,MAAM2B,KAAhB,eAAuBU,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,WALlE,EAOlB3C,cAAgB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACqB,QAAQtB,KAP/B,EASlB2C,WAAa,kBAAMlB,YAAU,wBAAD,aAA0BmB,GAAG,UAAa,EAAK1C,MAAM2B,OAAOH,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,OAPpH,EAAKzB,MAAQ,CAAC2B,KAAK,KAAMgB,OAAM,GAFd,E,gEAWE,IAAD,OAClBpB,YAAU,wBAAwB,CAAChB,GAAGJ,KAAKP,MAAMW,KAAKiB,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,Q,+BAG1E,IAAD,OACR,OAAItB,KAAKH,MAAM2B,KACP,kBAAC,cAAD,CAAazB,IAAI,cAAc4B,OAAO,WAC3C,kBAAC,cAAD,CAAa5B,IAAI,mBAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKK,GAAG,KAAKqC,MAAM,KAAKC,KAAM1C,KAAKH,MAAM2B,KAAKpB,KAC5D,kBAAC,YAAD,CAAWL,IAAI,cAAcK,GAAG,cAAeiC,MAAOrC,KAAKH,MAAM2B,KAAKlB,YAAa2B,SAAUjC,KAAKiC,WAClG,kBAAC,YAAD,CAAWlC,IAAI,UAAUK,GAAG,UAAUiC,MAAOrC,KAAKH,MAAM2B,KAAKmB,QAASV,SAAUjC,KAAKiC,WACrF,kBAAC,YAAD,CAAWlC,IAAI,OAAOK,GAAG,OAAOiC,MAAOrC,KAAKH,MAAM2B,KAAKoB,KAAMX,SAAUjC,KAAKiC,WAC5E,kBAAC,YAAD,CAAWlC,IAAI,UAAUK,GAAG,UAAUiC,MAAOrC,KAAKH,MAAM2B,KAAKqB,QAASZ,SAAUjC,KAAKiC,WACrF,kBAAC,cAAD,CAAalC,IAAI,YAAYK,GAAG,YAAYqC,MAAM,SAASJ,MAAOrC,KAAKH,MAAM2B,KAAKsB,UAAWb,SAAUjC,KAAKiC,UAC1GjC,KAAKH,MAAMkD,QAAQC,KAAI,SAAC7C,EAAI8C,GAAL,OAAa,4BAAQlD,IAAK,UAAUkD,EAAKZ,MAAOlC,EAAIC,IAAvC,UAA+CD,EAAII,QAAnD,YAA8DJ,EAAI+C,WAExG,kBAAC,cAAD,CAAanD,IAAI,kBAAkBK,GAAG,kBAAkBqC,MAAM,eAAeJ,MAAOrC,KAAKH,MAAM2B,KAAK2B,gBAAiBlB,SAAUjC,KAAKiC,UAClIjC,KAAKH,MAAMuD,QAAQJ,KAAI,SAAC7C,EAAI8C,GAAL,OAAa,4BAAQlD,IAAK,YAAYkD,EAAKZ,MAAOlC,EAAIC,IAAzC,UAAiDD,EAAIkD,OAArD,aAAgElD,EAAIiC,KAApE,WAGvC,kBAAC,aAAD,CAAYrC,IAAI,mBAAmBS,QAAS,kBAAM,EAAK8B,cAAc5B,MAAM,UAGtE,kBAAC,UAAD,U,GAnCgBT,aAyCpBa,E,4MAMLpB,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMmB,WAAWjB,I,EAEhD2D,aAAe,SAAClD,GAAD,OAAQ,mDAAuBiB,MAAK,SAAAkC,GAAG,OAAI,EAAK7D,cAAc,kBAAC6D,EAAIC,KAAL,CAAUzD,IAAK,MAAMK,EAAIA,GAAIA,S,EAE1GqD,aAAe,SAACd,EAAQe,GAAT,OAAgB,mDAAuBrC,MAAK,SAAAkC,GAAG,OAAK,EAAK7D,cAAc,kBAAC6D,EAAII,IAAL,CAAS5D,IAAK,SAAU6D,gBAAiBjB,EAASe,GAAIA,S,kEARxH,IAAD,OAClBtC,YAAU,wBAAwB,CAACP,WAAWb,KAAKP,MAAMoB,WAAWgD,KAAK,aAAaC,MAAM,CAAC,eAAezC,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAL,eAAkB0B,EAAlB,CAA0ByC,cAAcC,SAAS1C,EAAOqB,QAAQsB,MAAM,KAAK,Y,+BAS9L,IAAD,OACP,GAAKjE,KAAKH,MAEL,CAEJ,IADA,IAAMqE,EAAS,GADX,WAEKC,GACJ,EAAKtE,MAAM2B,KAAK4C,eAAe,EAAKvE,MAAMwE,MAAQF,GACrDD,EAAOI,KAAK,kBAAC,gBAAD,CAAevE,IAAK,OAAS,EAAKF,MAAMwE,MAAQF,EAAK3D,QAAS,kBAAM,EAAK8C,aAAa,EAAKzD,MAAM2B,KAAK,EAAK3B,MAAMwE,MAAQF,GAAKI,YAAY7B,KAAMyB,EAAI,OAEhKD,EAAOI,KAAK,kBAAC,kBAAD,CAAiBvE,IAAK,OAAS,EAAKF,MAAMwE,MAAQF,EAAK3D,QAAS,kBAAM,EAAKiD,aAAa,EAAKhE,MAAMoB,WAAW2D,YAAO,EAAK3E,MAAMwE,MAAQF,KAAOzB,KAAMyB,EAAI,QAJ9JA,EAAM,EAAGA,EAAMnE,KAAKH,MAAM4E,KAAMN,IAAO,EAAvCA,GAMT,OAAO,kBAAC,UAAD,CAASpE,IAAI,SAAS4B,OAAQ3B,KAAKH,MAAM8C,QAAU,IAAM3C,KAAKH,MAAM+C,MACzEsB,GAVF,OAAO,kBAAC,UAAD,U,GAdWjE,aAgCf+B,E,kDACL,WAAYvC,GAAO,IAAD,8BACjB,cAAMA,IAQPS,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIuD,GAAGvD,EAAIuE,IAAIvE,EAAIwE,SAASxE,EAAIyE,IAAIzE,EAAI0E,OAAO1E,EAAI2E,OAPvE,EAAKjF,MAAQ,GAFI,E,gEAKE,IAAD,OAClBuB,YAAU,yBAAyB,CAAC2D,KAAK,WAAW1D,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,Q,+BAMjF,OAAO,kBAAC,gBAAD,CAAevB,IAAI,WAAW4B,OAAO,SAASC,MAAO,CAAC,KAAK,MAAM,WAAW,MAAM,SAAS,OAAQC,MAAO7B,KAAKH,MAAM2B,KAAMtB,SAAUF,KAAKE,e,GAb9HD,aAmBfU,E,kDACL,WAAYlB,GAAO,IAAD,8BACjB,cAAMA,IAQPC,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMmB,WAAWjB,IAT9B,EAWlBO,SAAW,SAACC,GAAD,MAAS,CAACA,EAAIC,GAAGD,EAAIuD,GAAGvD,EAAIwE,SAASxE,EAAI6E,OAAO,kBAAC,YAAD,CAAWnF,MAAOM,EAAIN,QAAU,kBAAC,WAAD,CAAUE,IAAK,aAAaI,EAAIC,IACzH,kBAAC,kBAAD,CAAiBL,IAAK,cAAcI,EAAIC,GAAII,QAAS,kBAAM,EAAKd,cAAc,kBAACuF,EAAD,CAAalF,IAAK,gBAAgBI,EAAIC,GAAIA,GAAID,EAAIC,OAASM,MAAM,uBAC/I,kBAAC,eAAD,CAAcX,IAAK,gBAAgBI,EAAIC,GAAII,QAAS,kBAAM,EAAKO,WAAWZ,EAAIC,KAAKM,MAAM,4BAbzE,EAgBlBK,WAAa,SAACX,GAAD,OAASc,OAAOC,QAAQ,oBAAsBC,YAAU,0BAA2B,CAAChB,GAAGA,IAAKiB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,SAAW,EAAK3B,SAAS,CAAC4B,KAAK,EAAK3B,MAAM2B,KAAKC,QAAO,SAAAtB,GAAG,OAAKA,EAAIC,KAAOA,WAdvM,EAAKP,MAAQ,CAAC2B,KAAK,KAAKF,OAAO,MAFd,E,gEAKE,IAAD,OAClBF,YAAU,wBAAwB,CAACP,WAAWb,KAAKP,MAAMoB,WAAWiD,MAAM,CAAC,WAAW,cAAc,eAAezC,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,Q,+BAYxI,IAAD,OACP,OAAO,kBAAC,gBAAD,CAAevB,IAAI,QAAQ4B,OAAO,yBAAyBC,MAAO,CAAC,KAAK,KAAK,WAAW,SAAS,GAAG,IAAKC,MAAO7B,KAAKH,MAAM2B,KAAMtB,SAAUF,KAAKE,SAAUoB,OAAQtB,KAAKH,MAAMyB,QACnL,kBAAC,eAAD,CAAcvB,IAAI,gBAAgBS,QAAS,kBAAM,EAAKsB,uBACtD,kBAAC,YAAD,CAAW/B,IAAI,aAAaS,QAAS,kBAAM,EAAKd,cAAc,kBAACuF,EAAD,CAAalF,IAAK,eAAiBgC,cAAOlB,WAAY,EAAKpB,MAAMoB,WAAYT,GAAG,UAAWM,MAAM,2B,GAtBxIT,aA6BbgF,EAAb,kDACC,WAAYxF,GAAO,IAAD,8BACjB,cAAMA,IAIPwC,SAAW,SAACC,GAAD,OAAO,EAAKtC,SAAS,CAAC4B,KAAK,eAAI,EAAK3B,MAAM2B,KAAhB,eAAuBU,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,WALlE,EAOlBC,WAAa,kBAAMlB,YAAU,wBAAD,aAA0BmB,GAAG,UAAa,EAAK1C,MAAM2B,OAAOH,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,OALpH,EAAKzB,MAAQ,CAAC2B,KAAK,MAFF,EADnB,gEAUqB,IAAD,OAClBJ,YAAU,wBAAwB,CAAChB,GAAGJ,KAAKP,MAAMW,GAAGS,WAAWb,KAAKP,MAAMoB,aAAaQ,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS0B,MACpHF,YAAU,sBAAsB,CAAC,OAAS,YAAYC,MAAK,SAAAC,GAAM,OAAI,EAAK1B,SAAS,CAACwD,QAAQ9B,EAAOE,YAZrG,+BAeW,IAAD,OACR,OAAIxB,KAAKH,OAASG,KAAKH,MAAM2B,MAAQxB,KAAKH,MAAMuD,QACxC,kBAAC,cAAD,CAAarD,IAAI,aAAa4B,OAAO,cAC1C,kBAAC,cAAD,CAAa5B,IAAI,cAChB,kBAAC,WAAD,CAAUA,IAAI,KAAKK,GAAG,KAAKqC,MAAM,KAAKC,KAAM1C,KAAKH,MAAM2B,KAAKpB,KAC5D,kBAAC,WAAD,CAAUL,IAAI,UAAUK,GAAG,UAAUsC,KAAM1C,KAAKH,MAAMiE,MAAMnB,UAC5D,kBAAC,YAAD,CAAW5C,IAAI,KAAKK,GAAG,KAAKqC,MAAM,KAAMJ,MAAOrC,KAAKH,MAAM2B,KAAKkC,GAAIzB,SAAUjC,KAAKiC,WAClF,kBAAC,YAAD,CAAWlC,IAAI,WAAWK,GAAG,WAAWiC,MAAOrC,KAAKH,MAAM2B,KAAKmD,SAAU1C,SAAUjC,KAAKiC,WACxF,kBAAC,cAAD,CAAalC,IAAI,cAAcK,GAAG,cAAcqC,MAAM,SAASJ,MAAOrC,KAAKH,MAAM2B,KAAK0D,YAAajD,SAAUjC,KAAKiC,UAAWjC,KAAKH,MAAMuD,QAAQJ,KAAI,SAAC7C,EAAI8C,GAAL,OAAa,4BAAQlD,IAAK,UAAUkD,EAAKZ,MAAOlC,EAAIC,IAAKD,EAAIiC,WAElN,kBAAC,aAAD,CAAYrC,IAAI,UAAUS,QAAS,kBAAM,EAAK8B,cAAc5B,MAAM,SAClE,kBAAC,SAAD,CAAQX,IAAI,eAAeuB,OAAStB,KAAKH,MAAMsF,OAAiC,OAAtBnF,KAAKH,MAAMsF,OAAmBnF,KAAKH,MAAMuF,KAAO,KAAO,MAG5G,kBAAC,UAAD,UA7BV,GAAiCnF","file":"static/js/3.1856f090.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport { post_call, rnd, int2ip } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ViewButton, LogButton, ConfigureButton, ItemsButton, ReloadButton, SaveButton, IpamGreenButton, IpamRedButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.netasc,row.description,row.service,<Fragment key={'network_buttons_'+row.id}>\n   <ConfigureButton key={'net_btn_info_'+row.id} onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n   <ItemsButton key={'net_btn_items_'+row.id} onClick={() => this.changeContent(<AddressList changeSelf={this.changeContent} key={'address_list_'+row.id} network_id={row.id} />)} title='View addresses' />\n   <ViewButton key={'net_btn_layout_'+row.id} onClick={() => this.changeContent(<Layout changeSelf={this.changeContent} key={'address_layout_'+row.id} network_id={row.id} />)} title='View usage map' />\n   <DeleteButton key={'net_btn_delete_'+row.id} onClick={() => this.deleteList(row.id)} title='Delete network' />\n   <ReloadButton key={'net_btn_rset_'+row.id} onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <Fragment key='nl_fragment'>\n   <ContentList key='nl_cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='nl_btn_reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='nl_btn_doc' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='nl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={'ni_srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={'ni_rzone_'+idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id']}).then(result => this.setState({...result, start_address:parseInt(result.network.split('.')[3])}))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    if (this.state.data.hasOwnProperty(this.state.start + cnt))\n     layout.push(<IpamRedButton key={'btn_' + this.state.start + cnt} onClick={() => this.changeDevice(this.state.data[this.state.start + cnt].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreenButton key={'btn_' + this.state.start + cnt} onClick={() => this.createDevice(this.props.network_id,int2ip(this.state.start + cnt))} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<StateLeds state={row.state} />,<Fragment key={'ip_button_'+row.id}>\n   <ConfigureButton key={'al_btn_info'+row.id} onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} />)} title='Edit address entry' />\n   <DeleteButton key={'al_btn_delete'+row.id} onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </Fragment>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains)\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={'ai_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={(this.state.status) ? (this.state.status !== 'OK') ? this.state.info : 'OK' : ''} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}