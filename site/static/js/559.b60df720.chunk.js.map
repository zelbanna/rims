{"version":3,"file":"static/js/559.b60df720.chunk.js","mappings":"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","sources":["visualize.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { Article, ContentData, ContentList, Result } from './infra/UI.jsx';\nimport { BackButton, DeleteButton, EditButton, FixButton, ReloadButton, SaveButton, StartButton, StopButton, TextButton, NetworkButton } from './infra/Buttons.jsx';\nimport { TextInput } from './infra/Inputs.jsx';\nimport styles from './infra/ui.module.css';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <List key='viz_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <>{this.state}</>\n }\n}\n\n// ************** List **************\n//\nexport class List extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/visualize/list')\n   .then((result) => { this.setState(result); })\n }\n\n listItem = (row) => [row.id,row.name,<>\n  <EditButton key='edit' onClick={() => this.changeContent(<Edit key={'viz_edit_'+row.id} id={row.id} changeSelf={this.changeContent} type='map' />)} title='Show and edit map' />\n  <NetworkButton key='net' onClick={() => window.open(`viz.html?id=${row.id}`,'_blank')} title='Show resulting map' />\n  <DeleteButton key='del' onClick={() => this.deleteList(row.id)} />\n </>]\n\n deleteList = (id) => (window.confirm('Delete map?') && post_call('api/visualize/delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Maps' thead={['ID','Name','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// ************** Edit **************\n//\nexport class Edit extends Component {\n constructor(props){\n  super(props)\n  this.state = {content:'network', physics_button:StartButton, found:true, data:{name:'N/A'}, result:''}\n  this.viz = {network:null,nodes:null,edges:null}\n  this.canvas = React.createRef()\n  this.edit = false;\n }\n\n changeContent = (elem) => this.setState({content:elem})\n\n componentDidMount(){\n  import('vis-network/standalone/esm/vis-network').then(vis => {\n   post_call('api/visualize/network',{id:this.props.id,type:this.props.type}).then((result) => {\n    this.viz.nodes = new vis.DataSet(result.data.nodes);\n    this.viz.edges = new vis.DataSet(result.data.edges);\n    result.data.options.physics.enabled = true;\n    result.data.options.clickToUse = true;\n    this.viz.network = new vis.Network(this.canvas.current, {nodes:this.viz.nodes, edges:this.viz.edges}, result.data.options);\n    this.viz.network.on('stabilizationIterationsDone', () => this.viz.network.setOptions({ physics: false }))\n    this.viz.network.on('doubleClick', (params) => this.doubleClick(params))\n    this.viz.network.on('dragEnd', (params) => this.networkSync(params))\n    result.data.options.physics.enabled = false;\n    this.setState(result)\n   })\n  })\n }\n\n changeImport = (dev) => import('./device.jsx').then(lib => this.props.changeSelf(<lib.Info key={'di_'+dev} id={dev} />));\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n jsonHandler = (e) => {\n  var data = {...this.state.data}\n  try {\n   data[e.target.name] = JSON.parse(e.target.value);\n   this.setState({data:data})\n  } catch {\n   console.log('Error converting string to JSON')\n  }\n }\n\n updateInfo = () => post_call('api/visualize/network',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n doubleClick = (params) => {\n  console.log('DoubleClick',params.nodes[0]);\n  this.props.changeSelf && this.changeImport(params.nodes[0]);\n }\n\n toggleEdit = () => {\n  this.edit = !this.edit;\n  this.viz.network.setOptions({ manipulation:{ enabled:this.edit }})\n  this.setState({result:'Edit:'+this.edit});\n }\n\n toggleFix = () => {\n  this.viz.nodes.forEach((node,id) => this.viz.nodes.update({id:id,fixed:!(node.fixed)}) );\n  this.setState({data:{...this.state.data, nodes:this.viz.nodes.get()}, result:'Fix/Unfix positions'})\n }\n\n togglePhysics = () => {\n  const data = this.state.data;\n  data.options.physics.enabled = !data.options.physics.enabled;\n  this.viz.network.setOptions({ physics:data.options.physics.enabled })\n  this.setState({data:data, physics_button:(data.options.physics.enabled) ? StopButton:StartButton, result:'Physics:'+data.options.physics.enabled})\n }\n\n networkSync = (params) => {\n  this.viz.network.storePositions();\n  this.setState({data:{...this.state.data, nodes:this.viz.nodes.get(), edges:this.viz.edges.get()}, result:'Moved ' + this.viz.nodes.get(params.nodes[0]).label})\n }\n\n showDiv = (id) => (id === this.state.content) ? {display:'block'} : {display:'none'}\n\n render(){\n  const PhysicsButton = this.state.physics_button;\n  return(\n   <Article key='viz_art' header='Network Map'>\n    {(this.props.type === 'device') && (this.props.changeSelf) && <BackButton key='viz_back' onClick={() => this.changeImport(this.props.id)} />}\n    <ReloadButton key='viz_reload' onClick={() => this.componentDidMount()} />\n    <EditButton key='viz_edit' onClick={() => this.toggleEdit()} />\n    <PhysicsButton key='viz_physics' onClick={() => this.togglePhysics()} />\n    <FixButton key='viz_fix' onClick={() => this.toggleFix()} />\n    <SaveButton key='viz_save' onClick={() => this.updateInfo()} />\n    <NetworkButton key='viz_net' onClick={() => this.changeContent('network')} />\n    <TextButton key='viz_opt' text='Options' onClick={() => this.changeContent('options')} />\n    <TextButton key='viz_nodes' text='Nodes' onClick={() => this.changeContent('nodes')} />\n    <TextButton key='viz_edges' text='Edges' onClick={() => this.changeContent('edges')} />\n    <TextInput key='viz_name' id='name' value={this.state.data.name} onChange={this.onChange} />\n    <Result key='viz_result' result={this.state.result} />\n    <div className={styles.network} style={this.showDiv('network')} ref={this.canvas} />\n    <div className={styles.network} style={this.showDiv('options')}><textarea id='options' name='options' value={JSON.stringify(this.state.data.options,undefined,2)} onChange={this.jsonHandler}/></div>\n    <div className={styles.network} style={this.showDiv('nodes')}><textarea id='nodes' name='nodes' value={JSON.stringify(this.state.data.nodes,undefined,2)} onChange={this.jsonHandler} /></div>\n    <div className={styles.network} style={this.showDiv('edges')}><textarea id='edges' name='edges' value={JSON.stringify(this.state.data.edges,undefined,2)} onChange={this.jsonHandler} /></div>\n   </Article>\n  )\n }\n}\n"],"names":["Main","Component","constructor","props","super","changeContent","elem","this","setState","state","_jsx","List","render","_Fragment","children","listItem","row","id","name","_jsxs","EditButton","onClick","Edit","changeSelf","type","title","NetworkButton","window","open","DeleteButton","deleteList","confirm","post_call","then","result","deleted","data","filter","componentDidMount","ContentList","header","thead","trows","ReloadButton","ContentData","mountUpdate","fun","content","changeImport","dev","lib","Info","onChange","e","target","value","jsonHandler","JSON","parse","console","log","updateInfo","op","doubleClick","params","nodes","toggleEdit","edit","viz","network","setOptions","manipulation","enabled","toggleFix","forEach","node","update","fixed","get","togglePhysics","options","physics","physics_button","StopButton","StartButton","networkSync","storePositions","edges","label","showDiv","display","found","canvas","React","vis","DataSet","clickToUse","Network","current","on","PhysicsButton","Article","BackButton","FixButton","SaveButton","TextButton","text","TextInput","Result","className","styles","style","ref","stringify","undefined"],"sourceRoot":""}