{"version":3,"sources":["activity.jsx"],"names":["Main","props","compileNavItems","context","loadNavigation","key","title","onClick","changeContent","Info","id","Daily","changeSelf","List","TypeList","Report","elem","setState","state","this","prevProps","Component","contextType","RimsContext","listItem","row","date","time","text","type","deleteList","searchHandler","e","searchfield","target","value","content","window","confirm","post_call","then","result","deleted","data","filter","activity_list","includes","header","thead","trows","componentDidMount","rnd","placeholder","onChange","name","updateInfo","op","extras","user_id","settings","label","users","map","idx","alias","type_id","types","event","JSON","stringify","update","activity_id","findIndex","obj","act_id","Object","assign","field","args","syncEvent","parseInt","Date","now","toISOString","substring","undefined","values","user","class","group","mode","TypeInfo","classes"],"mappings":"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","file":"static/js/11.efee92f7.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { post_call, rnd } from './infra/Functions.js';\nimport { RimsContext, Result, InfoArticle, InfoColumns, Spinner, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextLine, TextAreaInput, TextInput, SelectInput, DateInput, TimeInput, SearchInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HrefButton, InfoButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton } from './infra/Navigation.jsx';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <Daily key='activity_daily' />\n }\n\n componentDidMount(){\n  this.compileNavItems()\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   this.compileNavItems()\n  }\n }\n\n compileNavItems = () => this.context.loadNavigation(<NavBar key='activity_navbar'>\n   <NavDropDown key='act_nav' title='Activities'>\n   <NavDropButton key='act_nav_new' title='New' onClick={() => this.changeContent(<Info key='activity_info' id='new' />)} />\n   <NavDropButton key='act_nav_day' title='Daily' onClick={() => this.changeContent(<Daily key='activity_daily' changeSelf={this.changeContent} />)} />\n   <NavDropButton key='act_nav_list' title='List' onClick={() => this.changeContent(<List key='activity_list' />)} />\n   </NavDropDown>\n   <NavButton key='act_nav_types' title='Types' onClick={() => this.changeContent(<TypeList key='activity_type_list' />)} />\n   <NavButton key='act_nav_report' title='Report' onClick={() => this.changeContent(<Report key='activity_report' />)} />\n  </NavBar>)\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n\n}\nMain.contextType = RimsContext;\n\n// ************** List **************\n//\nclass List extends Component {\n constructor(props){\n  super(props)\n  this.state = {searchfield:''}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,<HrefButton key={'al_btn_hinfo_'+row.id} onClick={() => this.changeContent(<Info key={'activity_info_'+row.id} id={row.id} />)} text={row.type} />,<Fragment key={'activity_buttons_'+row.id}>\n   <InfoButton key={'al_btn_info_'+row.id} onClick={() => this.changeContent(<Info key={'activity_'+row.id} id={row.id} />) } title='Activity information' />\n   <DeleteButton key={'al_btn_delete_'+row.id} onClick={() => this.deleteList(row.id) } title='Delete activity' />\n   </Fragment>\n  ]\n\n searchHandler = (e) => { this.setState({searchfield:e.target.value}) }\n\n changeContent = (elem) => this.setState({content:elem})\n\n deleteList = (id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  if (this.state.data) {\n   let activity_list = this.state.data.filter(row => row.type.includes(this.state.searchfield));\n   return <Fragment key='al_fragment'>\n    <ContentList key='al_cl' header='Activities' thead={['Date','Type','']} trows={activity_list} listItem={this.listItem}>\n     <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='al_btn_add' onClick={() => this.changeContent(<Info key={'activity_new_' + rnd()} id='new' />) } title='Add activity' />\n     <SearchInput key='al_search' searchHandler={this.searchHandler} value={this.state.searchfield} placeholder='Search activities' />\n    </ContentList>\n    <ContentData key='al_cd'>{this.state.content}</ContentData>\n   </Fragment>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  post_call('api/master/activity_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/master/activity_info',{id:this.props.id, extras:['types','users']}).then(result => {\n   if (result.data.user_id === null)\n    result.data.user_id = this.context.settings.id;\n   this.setState(result);\n  })\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='ai_art' header='Activity'>\n     <InfoColumns key='ai_content'>\n      <TextLine key='ai_id' id='id' label='ID' text={this.state.data.id} />\n      <SelectInput key='ai_user_id' id='user_id' label='User' value={this.state.data.user_id} onChange={this.onChange}>{this.state.users.map((row,idx) => <option key={'ai_u_'+idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n      <SelectInput key='ai_type_id' id='type_id' label='Type' value={this.state.data.type_id} onChange={this.onChange}>{this.state.types.map((row,idx) => <option key={'ai_t_'+idx} value={row.id}>{row.type}</option>)}</SelectInput>\n      <DateInput key='ai_date' id='date' value={this.state.data.date} onChange={this.onChange} />\n      <TimeInput key='ai_time' id='time' value={this.state.data.time} onChange={this.onChange} />\n     </InfoColumns>\n     <TextAreaInput key='ai_event' id='event' value={this.state.data.event} onChange={this.onChange} />\n     <SaveButton key='ai_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ai_result' result={JSON.stringify(this.state.update)} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// *************** Daily ***************\n//\nclass Daily extends Component {\n constructor(props){\n  super(props);\n  const date = new Date(Date.now());\n  this.state = {data:[], date:date.toISOString().substring(0,10), user_id:undefined, users:{}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/master/activity_daily',{extras:['users']}).then(result => this.setState({...result, user_id:this.context.settings.id}));\n }\n\n deleteList = (activity_id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:activity_id}).then(result => {\n  if(result.deleted){\n   const idx = this.state.data.findIndex(obj => obj.act_id === activity_id);\n   const data = this.state.data[idx];\n   Object.assign(data,{user_id:null, event:null, act_id:null});\n   this.setState({data:this.state.data})\n  }\n }))\n\n onChange = (e) => {\n  const field = e.target.name;\n  const value = e.target.value;\n  const args = {date:(field === 'date') ? value : this.state.date};\n  post_call('api/master/activity_daily',args).then(result => this.setState({...result, [field]:value}));\n }\n\n syncEvent = (type_id,activity_id) =>\n  post_call('api/master/activity_info',{op:'update', id:(activity_id) ? activity_id : 'new', user_id:this.state.user_id, type_id:type_id, event:'auto', date:this.state.date}).then(result => {\n   if(result.update){\n    const idx = this.state.data.findIndex(obj => obj.id === type_id);\n    const data = this.state.data[idx];\n    Object.assign(data,{user_id:this.state.user_id, event:'auto', act_id:result.data.id});\n    this.setState({data:this.state.data})\n   }\n  })\n\n listItem = (row) => {\n  return [row.type, (row.user_id) ? this.state.users[row.user_id].alias : '-', (row.event) ? row.event : '-',<Fragment key={'ad_btn_'+row.id}>\n  {!row.user_id && <AddButton key={'ad_add_'+row.id} onClick={() => this.syncEvent(row.id,row.act_id)} />}\n  {row.user_id && row.user_id !== parseInt(this.state.user_id) && <SyncButton key={'ad_sync_'+row.id} onClick={() => this.syncEvent(row.id,row.act_id)} />}\n  {row.act_id && <InfoButton key={'ad_info'} onClick={() => this.changeContent(<Info key={'activity_'+row.act_id} id={row.act_id} />)} />}\n  {row.act_id && <DeleteButton key={'ad_del'} onClick={() => this.deleteList(row.act_id)} />}\n  </Fragment>]\n }\n\n render(){\n  if (this.state.data)\n   return <ContentReport key='ad_cr' header='Activities' thead={['Type','User','Event','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='ad_reload_btn' onClick={() => this.componentDidMount()} />\n    <SelectInput key='ad_user_id' id='user_id' label='User' value={this.state.user_id} onChange={this.onChange}>{Object.values(this.state.users).map((row,idx) => <option key={'ai_u_'+idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n    <DateInput key='ad_date' id='date' value={this.state.date} onChange={this.onChange} />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\nDaily.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list',{group:'month',mode:'full'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.user,row.type,row.class,row.event]\n\n render(){\n  return <ContentReport key='act_cr' header='Activities' thead={['Time','User','Type','Class','Event']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TypeList **************\n//\nclass TypeList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_type_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.type,row.class,<Fragment key='activity_buttons'>\n   <ConfigureButton key='act_tp_info' onClick={() => this.changeContent(<TypeInfo key={'activity_type_'+row.id} id={row.id} />) } title='Edit type information' />\n   <DeleteButton key='act_tp_delete' onClick={() => this.deleteList(row.id) } title='Delete type' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete type?') && post_call('api/master/activity_type_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='act_tp_fragment'>\n   <ContentList key='act_tp_cl' header='Activity Types' thead={['ID','Type','Class','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='act_tp_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='act_tp_btn_add' onClick={() => this.changeContent(<TypeInfo key={'act_tp_new_' + rnd()} id='new' />) } title='Add activity type' />\n   </ContentList>\n   <ContentData key='act_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** TypeInfo ***************\n//\nclass TypeInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, content:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/master/activity_type_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <InfoArticle key='at_art' header='Activity Type'>\n     <InfoColumns key='at_content'>\n      <TextLine key='id' id='id' text={this.state.data.id} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder='name' />\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={'at_class_'+row} value={row}>{row}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='at_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n   )\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}