{"version":3,"sources":["interface.jsx"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","post_call","then","result","deleted","setState","data","state","filter","row","JSON","stringify","interfaces","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","listItem","snmp_index","mac","ip","description","class","connection_id","key","text","onClick","ConnectionInfo","id","title","if_state","ip_state","Info","Statistics","includes","op","this","header","thead","trows","LLDP","loader","Component","Report","hostname","onChange","e","target","value","updateInfo","changeIpam","lib","AddressInfo","stateIpam","domains","networks","ipam","ipamSearchIP","network_id","ipamOnChange","ipamCreate","record","ipamPrimary","ipam_id","ipamDelete","ipamDnsSync","connectDeviceChange","connect","length","found","status","connectInterfaceChange","type","disconnectInterface","peer","a_id","b_id","disconnect","stateInterface","sort","connectInterfaceConnect","map","extra","update","undefined","prevProps","label","netasc","a_domain_id","primary","old","opresult","columns","classes","alternatives","updateItems","range","dataset","vis","DataSet","flatMap","time","in8s","out8s","inUPs","outUPs","x","Date","y","group","graph","setItems","fit","rangeChange","checkChange","visibility","checked","setOptions","groups","gotoNow","today","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","ib","ob","canvas","React","createRef","content","options","yAxisOrientation","Graph2d","current","locale","width","height","zoomMin","zoomMax","clickToUse","drawPoints","interpolation","legend","dataAxis","alignZeros","icons","left","right","v","className","styles","graphs","ref","idx","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"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","file":"static/js/1.6882c9f8.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport { Spinner, StateLeds, Article, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton,ForwardButton, GoButton, HealthButton, InfoButton, ItemsButton, LinkButton, ReloadButton, RevertButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && post_call('api/interface/delete', {interface_id:interface_id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && post_call('api/interface/cleanup',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => post_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && post_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n listItem = (row) => [row.snmp_index,row.name,row.mac,(row.ip) ? row.ip : '-',row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <>\n    <StateLeds key='state' state={[row.if_state,row.ip_state]} />\n    <InfoButton key='info' onClick={() => this.changeContent(<Info key={row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    {row.snmp_index > 0 && <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key={row.interface_id} device_id={this.props.device_id} interface_id={row.interface_id} name={row.name} />)} title='Interface stats' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && ['wired','optical'].includes(row.class) && <LinkButton key='link' onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='connect_device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n   </>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['SNMP','Name','MAC','IP Address','Description','Type','Link','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key='interface_info' device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Report ****************\n//\nexport class Report extends Component {\n componentDidMount(){\n  post_call('api/interface/list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.device_id,row.hostname,row.interface_id,row.class,row.ip,row.mac,row.name,row.description,<StateLeds key={'ir_'+row.id} state={[row.if_state,row.ip_state]} />]\n\n render(){\n  return (!this.state) ? <Spinner /> : <ContentReport key='if_cr' header='Devices' thead={['Dev','Hostname','If','Class','IP','MAC','Name','Description','State']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, description:this.props.description, device_id:this.props.device_id, class:this.props.class, extra:['classes','ip']}).then(result => this.setState({...result, update:undefined}));\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount();\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n updateInfo = () => post_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />));\n\n // IPAM\n stateIpam = () => {\n  this.setState({op:(this.state.domains && this.state.networks) ? 'ipam' : 'wait', ipam:{ip:'<N/A>'}})\n  if (!this.state.domains)\n   post_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data,op:(this.state.networks) ? 'ipam':'wait'}));\n  if (!this.state.networks)\n   post_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:(this.state.domains) ? 'ipam':'wait'}));\n }\n ipamSearchIP = () => {\n  if (this.state.ipam.network_id)\n   post_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n ipamOnChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n ipamCreate = () => post_call('api/interface/info',{op:'ipam_create',     interface_id:this.state.data.interface_id, record:this.state.ipam}).then(result => this.setState({...result,op:null}))\n ipamPrimary = (id) => post_call('api/interface/info',{op:'ipam_primary', interface_id:this.state.data.interface_id, ipam_id:id}).then(result => this.setState(result));\n ipamDelete = (id) => (window.confirm('Delete IP Address?') && post_call('api/ipam/address_delete',{id:id}).then(result => this.componentDidMount()));\n ipamDnsSync = () => post_call('api/interface/info',{op:'dns_sync',       interface_id:this.state.data.interface_id}).then(result => this.setState(result));\n\n // Connections\n connectDeviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   post_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n connectInterfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n disconnectInterface = () => (this.state.peer && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n stateInterface = () => (this.state.connect.found && post_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'connect_interface'})))\n connectInterfaceConnect = () => (this.state.connect.interface_id && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n\n // Render\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'connect_device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.connectDeviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'connect_interface')\n     return <LineArticle key='la_cnct'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='interface' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.connectInterfaceChange}>\n       {this.state.interfaces.map(row => <option key={row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='map' id='map' value={this.state.connect.map} onChange={this.connectInterfaceChange} />\n      <BackButton key='back' onClick={() => this.setState({op:'connect_device'})} title='Back' />\n      <ForwardButton key='fwd' onClick={() => this.connectInterfaceConnect()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ia_ipam' header='Create IPAM record'>\n      <InfoColumns key='ic'>\n       <SelectInput key='network' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamOnChange}>{this.state.networks.map(row => <option key={row.id} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamOnChange} />\n       <SelectInput key='domain' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamOnChange}>{this.state.domains.map(row => <option key={row.id} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='find_ip' onClick={() => this.ipamSearchIP()} title='Search IP within network' />\n      <ForwardButton key='fwd' onClick={() => this.ipamCreate()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const primary = (this.state.data.ipam_id);\n    const old = (this.state.data.interface_id !== 'new');\n    const peer = this.state.peer;\n    const opresult = (this.state.update === undefined) ? '' : 'Updated: ' + JSON.stringify(this.state.update)\n    return (<InfoArticle key='ia_interface_info' header='Interface'>\n     <InfoColumns key='ic' columns={3}>\n      <TextLine key='id' id='id' label='Local ID' text={this.state.data.interface_id} /><div />\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      {(primary) ? <SyncButton key='sync' onClick={() => this.ipamDnsSync()} title='sync interface name and IP hostname' /> : <div />}\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='snmp_index' id='snmp_index' label='SNMP index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      {primary && <><TextLine key='ip' id='ip' label='Primary IP' text={this.state.primary.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(this.state.primary.id)} title='Edit IPAM entry' /><DeleteButton key='delete' onClick={() => this.ipamDelete(this.state.primary.id)} title='Delete IPAM entry' /></div></>}\n      {this.state.alternatives.map(row => <Fragment key={row.ip}><TextLine key='ip' id={row.ip} label='Alternative IP' text={row.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(row.id)} title='Edit IPAM entry' /><SyncButton key='primary' onClick={() => this.ipamPrimary(row.id)} title='Make primary' /><DeleteButton key='delete' onClick={() => this.ipamDelete(row.id)} title='Delete IPAM entry' /></div></Fragment>)}\n      {peer && <><TextLine key='peer_int_id' id='peer_interface' label='Peer Interface' text={peer.interface_id} /><UnlinkButton key='unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></>}\n      {peer && <><TextLine key='peer_dev_id' id='peer_device' label='Peer Device' text={peer.device_id} /><div/></>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <ItemsButton key='list' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Interfaces' />}\n     {this.props.interface_id !== 'new' && <ReloadButton key='reload' onClick={() => this.componentDidMount()} />}\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {old && !peer && ['wired','optical'].includes(this.state.data.class) && <LinkButton key='connect' onClick={() => this.setState({op:'connect_device'})} title='Connect peer interface' />}\n     {old && <AddButton key='add' onClick={() => this.stateIpam()} title='Add IP' />}\n     <Result key='result' result={opresult} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Statistics ****************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {range:1, visibility: {ib:true, ob:true, ip:true, op:true}}\n  this.canvas = React.createRef()\n  this.graph = null;\n  this.vis = null;\n }\n\n componentDidMount(){\n  import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => {\n   this.vis = vis;\n   const options = { locale:'en', width:'100%', height:'100%', zoomMin:60000, zoomMax:1209600000, clickToUse:true, drawPoints: false, interpolation:false, legend:true, dataAxis:{ alignZeros:false , icons:true, left:{ title:{ text:'kbps' } }, right:{ title:{ text:'packets per second' } } } };\n   const groups = new this.vis.DataSet([{id:'ib', content:'In'}, {id:'ob', content:'Out' }, {id:'ip', content:'In', options: { yAxisOrientation: 'right'}},{id:'op', content:'Out', options: { yAxisOrientation: 'right'}}]);\n   this.graph = new this.vis.Graph2d(this.canvas.current, [], groups, options);\n   this.updateItems(this.state.range);\n  })\n }\n\n updateItems = (range) => post_call('api/statistics/query_interface',{device_id:this.props.device_id, interface_id:this.props.interface_id, range:range}).then(result => {\n  const dataset = new this.vis.DataSet(result.data.flatMap(({time, in8s, out8s, inUPs, outUPs}) => [{x:new Date(time*1000), y:in8s, group:'ib'},{x:new Date(time*1000), y:out8s, group:'ob'}, {x:new Date(time*1000), y:inUPs, group:'ip'},{x:new Date(time*1000), y:outUPs, group:'op'}]));\n  this.graph.setItems(dataset);\n  this.graph.fit();\n });\n\n rangeChange = (e) => {\n  this.setState({[e.target.name]:e.target.value})\n  this.updateItems(e.target.value);\n }\n\n checkChange = (e) => {\n  this.setState({visibility:{...this.state.visibility, [e.target.name]:e.target.checked}});\n  this.graph.setOptions({groups:{visibility:{[e.target.name]:e.target.checked}}})\n }\n\n gotoNow = () => {\n  const today = new Date()\n  this.graph.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  const v = this.state.visibility;\n  return <Article key='is_art' header='Statistics'>\n   <ReloadButton key='reload' onClick={() => this.updateItems(this.state.range)} title='Reload' />\n   <RevertButton key='reset' onClick={() => this.gotoNow()} title='Go to now' />\n   <br />\n   <TextLine key='name' id='name' label='Interface name' text={this.props.name} />\n   <br />\n   <SelectInput key='range' id='range' label='Time range' value={this.state.range} onChange={this.rangeChange}>\n    <option value='1'>1h</option>\n    <option value='4'>4h</option>\n    <option value='8'>8h</option>\n    <option value='24'>24h</option>\n   </SelectInput>\n   <CheckboxInput key='ib' id='ib' label='In bps' value={v.ib} onChange={this.checkChange} />\n   <CheckboxInput key='ob' id='ob' label='Out bps' value={v.ob} onChange={this.checkChange} />\n   <CheckboxInput key='ip' id='ip' label='In pps' value={v.ip} onChange={this.checkChange} />\n   <CheckboxInput key='op' id='op' label='Out pps' value={v.op} onChange={this.checkChange} />\n   <div className={styles.graphs} ref={this.canvas} />\n  </Article>\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => post_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}