{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","key","this","Component","listItem","row","id","netasc","description","text","service","onClick","DhcpList","network_id","changeSelf","title","NetworkInfo","AddressList","Layout","deleteList","resetStatus","content","window","confirm","post_call","then","result","deleted","data","filter","count","header","thead","trows","componentDidMount","rnd","Leases","onChange","e","target","name","value","updateInfo","op","found","label","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","extra","start_address","parseInt","split","start","layout","cnt","pos","device_id","push","int2ip","size","mac","hostname","oui","starts","ends","type","domain","AddressInfo","status","undefined","info","a_domain_id","addEntry","DhcpNew"],"mappings":"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","file":"static/js/3.f2499a6d.chunk.js","sourcesContent":["\nimport React, { Fragment, Component } from 'react'\nimport { post_call, rnd, int2ip } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ViewButton, LogButton, ConfigureButton, HrefButton, ItemsButton, ReloadButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.netasc,row.description,<HrefButton key={'net_btn_dhcp_'+row.id} text={row.service} onClick={() => this.changeContent(<DhcpList key={'dhcp_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='DHCP allocation for network' />,<Fragment key={'network_buttons_'+row.id}>\n   <ConfigureButton key={'net_btn_info_'+row.id} onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n   <ItemsButton key={'net_btn_items2_'+row.id} onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n   <ViewButton key={'net_btn_layout_'+row.id} onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />\n   <DeleteButton key={'net_btn_delete_'+row.id} onClick={() => this.deleteList(row.id)} title='Delete network' />\n   <ReloadButton key={'net_btn_rset_'+row.id} onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <Fragment key='nl_fragment'>\n   <ContentList key='nl_cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='nl_btn_reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='nl_btn_add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='nl_btn_doc' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='nl_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={'ni_srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={'ni_rzone_'+idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','dhcp']}).then(result => this.setState({...result, start_address:parseInt(result.network.split('.')[3])}))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = this.state.start;\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<Fragment key={'ip_button_'+row.id}>\n   <StateLeds state={row.state} />\n   <ConfigureButton key={'al_btn_info'+row.id} onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} />)} title='Edit address entry' />\n   <DeleteButton key={'al_btn_delete'+row.id} onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </Fragment>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={'ai_dom_'+idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** DHCP List ***************\n//\nclass DhcpList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/dhcp/list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => (window.confirm('Really delete DHCP ip?') && post_call('api/dhcp/delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n listItem = (row,idx) => [row.id, row.ip,<DeleteButton key={'dhcp_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<DhcpNew key={'dhcp_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'dhcp_list_'+this.props.server_id} header='DHCP allocation' thead={['ID','IP','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='dhcp_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** DHCP New ****************\n//\nclass DhcpNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {}\n }\n\n render(){\n  return <div>TBD</div>\n }\n}\n\n"],"sourceRoot":""}