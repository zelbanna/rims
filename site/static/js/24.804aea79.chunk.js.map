{"version":3,"sources":["user.jsx"],"names":["List","props","listItem","row","id","alias","name","key","onClick","changeContent","Info","title","deleteList","window","confirm","post_call","then","result","deleted","setState","data","state","filter","header","thead","trows","this","componentDidMount","mountUpdate","fun","Component","onChange","e","target","value","updateInfo","update","password_check","context","settings","changeTheme","theme","op","found","prevProps","themes","text","placeholder","class","classes","map","label","email","contextType","RimsContext","User","style","justifyContent"],"mappings":"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","file":"static/js/24.804aea79.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Flex, Spinner, InfoArticle, InfoColumns, ContentList, ContentData, Result } from './infra/UI.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, ReloadButton, SaveButton } from './infra/Buttons.jsx';\nimport { TextInput, TextLine, PasswordInput, SelectInput } from './infra/Inputs.jsx';\n\n// ************** List **************\n//\nexport class List extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/user_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.alias,row.name,<>\n   <ConfigureButton key='config' onClick={() => this.changeContent(<Info key='user_info' id={row.id} />)} title='Edit user' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete user' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete user?') && post_call('api/master/user_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Users' thead={['ID','Alias','Name','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='add' onClick={() => this.changeContent(<Info key='user_info' id='new' />)} title='Add user' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// ************** Info **************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   post_call('api/master/user_info',{id:this.props.id}).then(result => this.setState(result))\n  }\n }\n\n componentDidMount(){\n  post_call('api/portal/theme_list').then(result => this.setState({themes:result.data}))\n  post_call('api/master/user_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n updateInfo = () => {\n  this.setState({update:false,password_check:''})\n  if(this.context.settings.id === this.state.data.id)\n   this.context.changeTheme(this.state.data.theme);\n  post_call('api/master/user_info',{op:'update', ...this.state.data},{'X-Log':'false'}).then(result => this.setState(result))\n }\n\n render() {\n  if (!this.state.found)\n   return <InfoArticle key='ui_art'>User with id: {this.props.id} removed</InfoArticle>\n  else if (this.state.data && this.state.themes){\n   let result = (this.state.update) ? 'OK - updated' : '';\n   return <InfoArticle key='ui_art' header='User'>\n     <InfoColumns key='ui_content'>\n      {(this.context.settings.id === this.props.id) ?  <TextLine key='alias' id='alias' text={this.state.data.alias} /> : <TextInput key='alias' id='alias' value={this.state.data.alias} onChange={this.onChange} />}\n      <PasswordInput key='password' id='password' placeholder='******' onChange={this.onChange} />\n      {this.context.settings.class === 'admin' && <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>}\n      <TextInput key='email' id='email' label='E-Mail' value={this.state.data.email} onChange={this.onChange} />\n      <TextInput key='name' id='name' label='Full name' value={this.state.data.name} onChange={this.onChange} />\n      <SelectInput key='theme' id='theme' value={this.state.data.theme} onChange={this.onChange}>{this.state.themes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ui_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ui_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// ************** User **************\n//\nexport class User extends Component {\n render() {\n  return <Flex key='flex' style={{justifyContent:'space-evenly'}}><Info key='user_info' id={this.props.id} /></Flex>\n }\n}\n"],"sourceRoot":""}