{"version":3,"file":"static/js/52.40d1bfab.chunk.js","mappings":"+LAQO,MAAMA,UAAaC,EAAAA,UACzBC,YAAYC,GACXC,MAAMD,GAAM,KAiBbE,gBAAkB,KACjB,IAAIC,EAAU,GACd,IAAK,IAAKC,EAAKC,KAAUC,OAAOC,QAAQC,KAAKC,MAAMC,MAC/B,WAAfL,EAAMM,KACTR,EAAQS,MAAKC,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAiBC,MAAOX,EAAKY,QAASA,IAAMR,KAAKS,QAAQC,WAAWb,IAA9D,MAAMD,IAChB,QAAfC,EAAMM,KACdR,EAAQS,MAAKC,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAiBC,MAAOX,EAAKY,QAASA,IAAMG,OAAOC,KAAKf,EAAMgB,IAAI,WAA5D,MAAMjB,IAChB,UAAfC,EAAMM,KACdR,EAAQS,MAAKC,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAiBC,MAAOX,EAAKY,QAASA,IAAMR,KAAKS,QAAQC,YAAWL,EAAAA,EAAAA,KAAA,UAAQS,UAAWC,EAAAA,EAAAA,MAAcR,MAAOX,EAAKoB,IAAKnB,EAAMoB,UAAtH,MAAMrB,IAEvCsB,QAAQC,IAAI,sBAAsBC,KAAKC,UAAUxB,IAEnDG,KAAKS,QAAQa,gBAAejB,EAAAA,EAAAA,KAACkB,EAAAA,OAAM,CAAAC,UAAuBnB,EAAAA,EAAAA,KAACoB,EAAAA,YAAW,CAAiBlB,MAAM,YAAWiB,SAAE7B,GAA/B,cAAnC,mBAAkG,EA5B1IK,KAAKC,MAAQ,CAAC,CACf,CAEAyB,qBACCC,EAAAA,EAAAA,IAAU,uBAAuB,CAACxB,KAAK,aAAayB,MAAKC,IACxD/B,OAAOgC,OAAO9B,KAAKC,MAAM4B,GACzB7B,KAAKN,iBAAiB,GAExB,CAEAqC,mBAAmBC,GACfA,IAAchC,KAAKR,OACrBQ,KAAKN,iBAEP,CAiBAuC,SACC,OAAO5B,EAAAA,EAAAA,KAAC6B,EAAAA,SAAc,GACvB,EAED7C,EAAK8C,YAAcC,EAAAA,W","sources":["resource.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { NavBar, NavDropDown, NavDropButton } from './infra/Navigation.jsx';\nimport { RimsContext } from './infra/UI.jsx';\nimport styles from './infra/ui.module.css';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/portal/resources',{type:'resource'}).then(result => {\n   Object.assign(this.state,result);\n   this.compileNavItems();\n  })\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   this.compileNavItems();\n  }\n }\n\n compileNavItems = () => {\n  let buttons = []\n  for (let [key, panel] of Object.entries(this.state.data)){\n   if (panel.type === 'module')\n    buttons.push(<NavDropButton key={'mb_'+key} title={key} onClick={() => this.context.changeMain(panel)} />)\n   else if (panel.type === 'tab')\n    buttons.push(<NavDropButton key={'mb_'+key} title={key} onClick={() => window.open(panel.tab,'_blank')} />)\n   else if (panel.type === 'frame')\n    buttons.push(<NavDropButton key={'mb_'+key} title={key} onClick={() => this.context.changeMain(<iframe className={styles.frame} title={key} src={panel.frame} />)} />)\n   else\n    console.log(\"Unknown panel type:\"+JSON.stringify(panel))\n  }\n  this.context.loadNavigation(<NavBar key='resource_navbar'><NavDropDown key='resources' title='Resources'>{buttons}</NavDropDown></NavBar>)\n }\n\n render(){\n  return <React.Fragment />\n }\n}\nMain.contextType = RimsContext;\n"],"names":["Main","Component","constructor","props","super","compileNavItems","buttons","key","panel","Object","entries","this","state","data","type","push","_jsx","NavDropButton","title","onClick","context","changeMain","window","open","tab","className","styles","src","frame","console","log","JSON","stringify","loadNavigation","NavBar","children","NavDropDown","componentDidMount","post_call","then","result","assign","componentDidUpdate","prevProps","render","React","contextType","RimsContext"],"sourceRoot":""}