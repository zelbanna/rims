{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","key","this","Component","listItem","row","id","netasc","description","service","onClick","NetworkInfo","title","AddressList","network_id","changeSelf","class","Layout","ReservationList","deleteList","resetStatus","window","confirm","post_call","then","result","deleted","data","filter","count","header","thead","trows","componentDidMount","rnd","Leases","mountUpdate","fun","onChange","e","target","name","value","content","updateInfo","op","found","extra","label","text","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","start","ip2int","layout","cnt","pos","device_id","push","int2ip","size","mac","hostname","oui","starts","ends","type","domain","AddressInfo","status","undefined","info","a_domain_id","AddressEvents","AddressLogs","time","clearList","events","timeline","canvas","current","innerHTML","gotoNow","today","Date","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","React","createRef","vis","style","dataset","DataSet","Timeline","locale","min","length","align","width","height","zoomMin","zoomMax","clickToUse","className","styles","ref","addEntry","ReservationNew","end","JSON","stringify","resv"],"mappings":"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","file":"static/js/3.69885119.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { post_call, rnd, int2ip, ip2int } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton, ViewButton, LogButton, ConfigureButton, HealthButton, ItemsButton, RevertButton, ReloadButton, CheckButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <>{this.state}</>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,\n   row.netasc,\n   row.description,\n   row.service,\n   <>\n    <ConfigureButton key='conf' onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n    <ItemsButton key='items' onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n    {row.class === 'v4' && <ViewButton key='layout' onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />}\n    {row.class === 'v4' && <CheckButton key='resv' onClick={() => this.changeContent(<ReservationList key={'resv_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='Reserved addresses for network' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete network' />\n    <ReloadButton key='reset' onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='leases' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id, extra:['servers','domains']}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','reservation','ip_integer']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = ip2int(this.state.network);\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<>\n   <StateLeds key='state' state={row.state} />\n   <ConfigureButton key='info' onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} changeSelf={this.changeContent} />)} title='Edit address entry' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     {'changeSelf' in this.props && <HealthButton key='ip_btn_events' onClick={() => this.props.changeSelf(<AddressEvents key='address_events' id={this.state.data.id} />)} title='IPAM events - graphical' />}\n     {'changeSelf' in this.props && <LogButton key={'ip_btn_logs'} onClick={() => this.props.changeSelf(<AddressLogs key='address_logs' id={this.state.data.id} />)} title='IPAM events - logs' />}\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Address Logs ***************\n//\nclass AddressLogs extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_events',{id:this.props.id}).then(result => this.setState(result))\n }\n\n listItem = (row,idx) => [row.time,<StateLeds state={row.state} />]\n\n clearList = () => post_call('api/ipam/address_events',{op:'clear', id:this.props.id}).then(result => this.setState({events:[]}))\n\n render(){\n  return <ContentReport key={'alo_cr_'+this.props.id} header='State changes' thead={['Time','']} trows={this.state.events} listItem={this.listItem}>\n   <DeleteButton key='alo_btn_clear' onClick={() => this.clearList()} title='clear logs' />\n  </ContentReport>\n }\n}\n\n// *************** Address Events ****************\n//\nexport class AddressEvents extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n  this.canvas = React.createRef()\n  this.timeline = null\n }\n\ncomponentDidMount(){\n import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => post_call('api/ipam/address_events',{id:this.props.id}).then(result => {\n   if (result.count > 0){\n    const events = result.events.map(({state, time}) => ({content:state, start:time, style:(state === 'up') ? 'background-color:#26CB20;' : 'background-color:#CB2026;', title:time}));\n    const dataset = new vis.DataSet(events);\n    this.timeline = new vis.Timeline(this.canvas.current, dataset, { locale:'en', min:events[events.length - 1].start, align:'left', width:'100%', height:150, zoomMin:60000, zoomMax:1209600000, clickToUse:true});\n   } else\n    this.canvas.current.innerHTML = 'no events';\n  }))\n }\n\n clearList = () => post_call('api/ipam/address_events',{op:'clear', id:this.props.id}).then(result => { this.setState({timeline:null}); this.canvas.current.innerHTML = 'no events';})\n\n gotoNow = () => {\n  const today = new Date()\n  this.timeline.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  return <Article key='ae_art' header='Events'>\n   <div className={styles.events} ref={this.canvas} />\n   <RevertButton key='ae_btn_reset' onClick={() => this.gotoNow()} title='Go to now' />\n   <DeleteButton key='ae_btn_clear' onClick={() => this.clearList()} title='clear logs' />\n  </Article>\n }\n}\n\n// *************** Reservation List ***************\n//\nclass ReservationList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/reservation_list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => post_call('api/ipam/reservation_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))}))\n\n listItem = (row,idx) => [row.ip,row.type,<DeleteButton key={'resv_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<ReservationNew key={'resv_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'resv_list_'+this.props.server_id} header='Reservations' thead={['IP','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='resv_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation New ****************\n//\nclass ReservationNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {ip:'',start:'',end:'', result:undefined,type:'dhcp'}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{'id':this.props.network_id}).then(result => this.setState({...result.data}))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n updateInfo = () => post_call('api/ipam/reservation_new',{network_id:this.props.network_id, ip:this.state.ip, type:this.state.type, a_domain_id:this.state.a_domain_id, start:this.state.start, end:this.state.end}).then(result => this.setState({result:result}))\n\n render() {\n  if (this.state.domains){\n   const network_id = this.props.network_id;\n   const result = (this.state.result) ? JSON.stringify(this.state.result.resv) : '';\n   return <InfoArticle key='dn_article' header='Reservation Address/Scope'>\n    <span>Allocate address with either 'ip' or 'start' to 'end' (e.g. a scope)</span>\n    <InfoColumns key='dn_content'>\n     <TextLine key='id' id='network_id' label='Network ID' text={network_id} />\n     <TextLine key='network' id='network' text={this.state.network + '/' + this.state.mask} />\n     <TextInput key='ip' id='ip' label='IP' value={this.state.ip} onChange={this.onChange} />\n     <TextInput key='start' id='start' label='Start IP' value={this.state.start} onChange={this.onChange} />\n     <TextInput key='end' id='end' label='End IP' value={this.state.end} onChange={this.onChange} />\n     <SelectInput key='type' id='type' label='Type' value={this.state.type} onChange={this.onChange}>\n      <option key='dhcp' value='dhcp'>dhcp</option>\n      <option key='reservation' value='reservation'>reservation</option>\n     </SelectInput>\n     <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n    </InfoColumns>\n    {this.props.changeSelf && <BackButton key='dn_btn_back' onClick={() => this.props.changeSelf(<ReservationList key={'resv_list_' + network_id} network_id={network_id} changeSelf={this.props.changeSelf} />)} />}\n    <SaveButton key='dn_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    <Result key='dn_operation' result={result} />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}