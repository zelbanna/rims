{"version":3,"sources":["node.jsx"],"names":["List","props","listItem","row","node","url","onClick","changeContent","Info","id","title","deleteList","window","confirm","post_call","then","result","deleted","setState","data","state","filter","header","thead","trows","this","componentDidMount","mountUpdate","fun","Component","searchInfo","found","hostname","device_id","onChange","e","target","name","value","elem","content","updateInfo","op","prevProps","old","Reload","LogShow","LogClear","TaskShow","modules","join","logs","file","Object","entries","map","log","args","error","idx","module","function","frequency","JSON","stringify","output","tasks"],"mappings":"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","file":"static/js/18.a37cf2c1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport {Spinner, CodeArticle, InfoArticle, InfoColumns, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { NavBar } from './infra/Navigation.jsx';\nimport { TextInput, UrlInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, InfoButton, LogButton, ReloadButton, SaveButton, SearchButton, TimeButton } from './infra/Buttons.jsx';\n\n// ************** List **************\n//\nexport class List extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/node_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.node,row.url,<>\n   <InfoButton key='info' onClick={() => this.changeContent(<Info key='node_info' id={row.id} />)} title='Node information' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete node' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete node?') && post_call('api/master/node_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Nodes' thead={['Node','URL','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<Info key='node_info' id='new' />)} title='Add node' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true};\n }\n\n componentDidUpdate(prevProps){\n  if (prevProps !== this.props)\n   this.componentDidMount();\n }\n\n componentDidMount(){\n  post_call('api/master/node_info',{id:this.props.id}).then(result => this.setState({...result, content:null}))\n }\n\n searchInfo = () => post_call('api/device/search',{node:this.state.data.node}).then(result => result.found && this.setState({data:{...this.state.data, hostname:result.data.hostname, device_id:result.data.id}}))\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/master/node_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render() {\n  if (!this.state.found)\n   return <InfoArticle key='ia_node'>Node with id: {this.props.id} removed</InfoArticle>\n  else if (this.state.data) {\n   const id = this.state.data.id;\n   const old = (id !== 'new');\n   return <>\n    <InfoArticle key='ia_node' header='Node'>\n     <InfoColumns key='ic'>\n      <TextInput key='node' id='node' value={this.state.data.node} onChange={this.onChange} />\n      <UrlInput key='url' id='url' value={this.state.data.url}  onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} />\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save information' />\n     {old && !this.state.data.hostname && <SearchButton key='search' onClick={this.searchInfo} title='Try to map node to device' />}\n     {old && <ReloadButton key='reload' onClick={() => this.changeContent(<Reload key={'node_reload_'+id} node={this.state.data.node} />)} />}\n     {old && <LogButton key='logs' onClick={() => this.changeContent(<LogShow key={'node_logs_'+id} node={this.state.data.node} />)} title='View node logs' />}\n     {old && <DeleteButton key='logc' onClick={() => this.changeContent(<LogClear key={'node_logc_'+id} node={this.state.data.node} />)} title='Clear logs' />}\n     {old && <TimeButton key='tasks' onClick={() => this.changeContent(<TaskShow key={'node_tasks_'+id} node={this.state.data.node} />)} title='View node tasks' />}\n    </InfoArticle>\n    <NavBar key='node_navigation' id='node_navigation' />\n    {this.state.content}\n   </>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reload ***************\n//\nclass Reload extends Component {\n componentDidMount(){\n  post_call('api/system/reload',{},{'X-Route':this.props.node}).then(result => {\n   if (result)\n    this.setState(result);\n   else\n    this.setState({modules:['error reloading modules (check REST call)']})\n  })\n }\n\n render(){\n  return (!this.state) ? <Spinner /> : <CodeArticle key='nr_code' header='Module'>{this.state.modules.join('\\n')}</CodeArticle>\n }\n}\n\n// *************** LogClear ***************\n//\nclass LogClear extends Component {\n\n componentDidMount(){\n  post_call('api/system/logs_clear',{},{'X-Route':this.props.node}).then(result => this.setState({logs:result.file}))\n }\n\n render(){\n  return (!this.state) ? <Spinner /> : <CodeArticle key='nc_code' header='Cleared'>{(Object.entries(this.state.logs).map(log => `${log[0]}: ${log[1]}`)).join('\\n')}</CodeArticle>\n }\n}\n\n// *************** LogShow ***************\n//\nexport class LogShow extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/system/logs_get',{},{'X-Route':this.props.node}).then(result => {\n   const args = (result) ? {logs:result} : {error:true}\n   this.setState(args);\n  })\n }\n\n render(){\n  if (this.state.logs)\n   return <div>{Object.entries(this.state.logs).map((log,idx) => <CodeArticle key={idx} header={log[0]}>{log[1].join('\\n')}</CodeArticle>)}</div>\n  else if (this.state.error)\n   return <CodeArticle>error retrieving logs (check REST call)</CodeArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** TaskShow ***************\n//\nexport class TaskShow extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/system/task_list',{},{'X-Route':this.props.node}).then(result => {\n   const args = (result) ? {tasks:result} : {error:true}\n   this.setState(args);\n  })\n }\n\n listItem = (row) => [row.module, row.function, row.frequency, JSON.stringify(row.output), JSON.stringify(row.args)]\n\n render(){\n  if (this.state.tasks)\n   return <ContentReport key='cr_task_show' header='Tasks' thead={['Module','Function','Frequency','Output','Arguments']} trows={this.state.tasks.data} listItem={this.listItem} />\n  else if (this.state.error)\n   return <CodeArticle>error retrieving tasks (check REST call)</CodeArticle>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}