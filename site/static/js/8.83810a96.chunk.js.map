{"version":3,"sources":["activity.jsx"],"names":["Main","props","compileNavItems","context","loadNavigation","key","title","onClick","changeContent","Info","id","List","TypeList","Report","elem","setState","state","this","prevProps","Component","contextType","RimsContext","listItem","row","date","time","text","type","deleteList","searchHandler","e","searchfield","target","value","content","window","confirm","rest_call","then","result","deleted","data","filter","activity_list","includes","header","thead","trows","componentDidMount","rnd","placeholder","onChange","name","updateInfo","op","found","user_id","settings","label","users","map","idx","alias","type_id","types","event","user","group","mode","TypeInfo"],"mappings":"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","file":"static/js/8.83810a96.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { rest_call, rnd } from './infra/Functions.js';\nimport { RimsContext, InfoArticle, InfoColumns, Spinner, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextAreaInput, TextInput, SelectInput, DateInput, TimeInput, SearchInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HrefButton, InfoButton, ReloadButton, SaveButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton } from './infra/Navigation.jsx';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <Info key='activity_new' id='new' />\n }\n\n componentDidMount(){\n  this.compileNavItems()\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   this.compileNavItems()\n  }\n }\n\n compileNavItems = () => this.context.loadNavigation(<NavBar key='activity_navbar'>\n   <NavDropDown key='act_nav' title='Activities'>\n   <NavDropButton key='act_nav_new' title='New' onClick={() => this.changeContent(<Info key='activity_info' id='new' />)} />\n   <NavDropButton key='act_nav_list' title='List' onClick={() => this.changeContent(<List key='activity_list' />)} />\n   </NavDropDown>\n   <NavButton key='act_nav_types' title='Types' onClick={() => this.changeContent(<TypeList key='activity_type_list' />)} />\n   <NavButton key='act_nav_report' title='Report' onClick={() => this.changeContent(<Report key='activity_report' />)} />\n  </NavBar>)\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <Fragment key='main_base'>{this.state}</Fragment>\n }\n\n}\nMain.contextType = RimsContext;\n\n// ************** List **************\n//\nclass List extends Component {\n constructor(props){\n  super(props)\n  this.state = {searchfield:''}\n }\n\n componentDidMount(){\n  rest_call('api/master/activity_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,<HrefButton key={'act_hinfo_'+row.id} onClick={() => this.changeContent(<Info key={'activity_'+row.id} id={row.id} />)} text={row.type} />,<Fragment key={'activity_buttons_'+row.id}>\n   <InfoButton key={'act_info_'+row.id} onClick={() => this.changeContent(<Info key={'activity_'+row.id} id={row.id} />) } title='Activity information' />\n   <DeleteButton key={'act_delete_'+row.id} onClick={() => this.deleteList(row.id) } title='Delete activity' />\n   </Fragment>\n  ]\n\n searchHandler = (e) => { this.setState({searchfield:e.target.value}) }\n\n changeContent = (elem) => this.setState({content:elem})\n\n deleteList = (id) => (window.confirm('Delete activity') && rest_call('api/master/activity_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  if (this.state.data) {\n   let activity_list = this.state.data.filter(row => row.type.includes(this.state.searchfield));\n   return <Fragment key='act_fragment'>\n    <ContentList key='act_cl' header='Activities' thead={['Date','Type','']} trows={activity_list} listItem={this.listItem}>\n     <ReloadButton key='act_btn_reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='act_btn_add' onClick={() => this.changeContent(<Info key={'activity_new_' + rnd()} id='new' />) } title='Add activity' />\n     <SearchInput key='act_search' searchHandler={this.searchHandler} value={this.state.searchfield} placeholder='Search activities' />\n    </ContentList>\n    <ContentData key='act_cd'>{this.state.content}</ContentData>\n   </Fragment>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () =>  rest_call('api/master/activity_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/master/activity_info',{id:this.props.id}).then(result => {\n   if (result.data.user_id === null)\n    result.data.user_id = this.context.settings.id;\n   this.setState(result);\n  })\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='act_art' header='Activity'>\n     <InfoColumns key='act_content'>\n      <SelectInput key='act_user_id' id='user_id' label='User' value={this.state.data.user_id} onChange={this.onChange}>{this.state.users.map((row,idx) => <option key={'ai_u_'+idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n      <SelectInput key='act_type_id' id='type_id' label='Type' value={this.state.data.type_id} onChange={this.onChange}>{this.state.types.map((row,idx) => <option key={'ai_t_'+idx} value={row.id}>{row.type}</option>)}</SelectInput>\n      <DateInput key='act_date' id='date' value={this.state.data.date} onChange={this.onChange} />\n      <TimeInput key='act_time' id='time' value={this.state.data.time} onChange={this.onChange} />\n     </InfoColumns>\n     <TextAreaInput key='act_event' id='event' value={this.state.data.event} onChange={this.onChange} />\n     <SaveButton key='act_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/activity_list',{group:'month',mode:'full'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.user,row.type,row.event]\n\n render(){\n  return <ContentReport key='act_cr' header='Activities' thead={['Time','User','Type','Event']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TypeList **************\n//\nclass TypeList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  rest_call('api/master/activity_type_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.type,<Fragment key='activity_buttons'>\n   <ConfigureButton key='act_tp_info' onClick={() => this.changeContent(<TypeInfo key={'activity_type_'+row.id} id={row.id} />) } title='Edit type information' />\n   <DeleteButton key='act_tp_delete' onClick={() => this.deleteList(row.id) } title='Delete type' />\n  </Fragment>\n ]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete type?') && rest_call('api/master/activity_type_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id)),content:null})))\n\n render(){\n  return <Fragment key='act_tp_fragment'>\n   <ContentList key='act_tp_cl' header='Activity Types' thead={['ID','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='act_tp_btn_reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='act_tp_btn_add' onClick={() => this.changeContent(<TypeInfo key={'act_tp_new_' + rnd()} id='new' />) } title='Add activity type' />\n   </ContentList>\n   <ContentData key='act_tp_cd'>{this.state.content}</ContentData>\n  </Fragment>\n }\n\n}\n\n// *************** TypeInfo ***************\n//\nclass TypeInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true, content:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  rest_call('api/master/activity_type_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  rest_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <InfoArticle key='activity_type_art' header='Activity Type'>\n     <InfoColumns key='activity_type_content'>\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder='name' />\n     </InfoColumns>\n     <SaveButton key='activity_type_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n   )\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}