{"version":3,"sources":["activity.jsx"],"names":["Main","props","compileNavItems","context","loadNavigation","title","onClick","changeContent","Info","id","Daily","changeSelf","List","TypeList","Report","elem","setState","state","this","prevProps","Component","contextType","RimsContext","listItem","row","date","time","text","type","deleteList","window","confirm","post_call","then","result","deleted","data","filter","searchfield","act_list","length","includes","header","thead","trows","componentDidMount","searchFire","s","placeholder","mountUpdate","fun","onChange","e","target","name","value","updateInfo","op","user_id","settings","extras","label","users","map","idx","alias","type_id","types","event","JSON","stringify","update","activity_id","findIndex","obj","act_id","Object","assign","field","args","syncEvent","parseInt","Date","now","toISOString","substring","undefined","values","user","class","group","mode","TypeInfo","content","classes"],"mappings":"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","file":"static/js/11.29a174ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { post_call } from './infra/Functions.js';\nimport { RimsContext, Result, InfoArticle, InfoColumns, Spinner, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextLine, TextAreaInput, TextInput, SelectInput, DateInput, TimeInput, SearchField } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HrefButton, InfoButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\nimport { NavBar, NavButton, NavDropDown, NavDropButton } from './infra/Navigation.jsx';\n\n// ************** Main **************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <Daily key='activity_daily' changeSelf={this.changeContent} />\n }\n\n componentDidMount(){\n  this.compileNavItems()\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props){\n   this.compileNavItems()\n  }\n }\n\n compileNavItems = () => this.context.loadNavigation(<NavBar key='activity_navbar'>\n   <NavDropDown key='act_nav' title='Activities'>\n   <NavDropButton key='act_nav_new' title='New' onClick={() => this.changeContent(<Info key='activity_info' id='new' />)} />\n   <NavDropButton key='act_nav_day' title='Daily' onClick={() => this.changeContent(<Daily key='activity_daily' changeSelf={this.changeContent} />)} />\n   <NavDropButton key='act_nav_list' title='List' onClick={() => this.changeContent(<List key='activity_list' />)} />\n   </NavDropDown>\n   <NavButton key='act_nav_types' title='Types' onClick={() => this.changeContent(<TypeList key='activity_type_list' />)} />\n   <NavButton key='act_nav_report' title='Report' onClick={() => this.changeContent(<Report key='activity_report' />)} />\n  </NavBar>)\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return <>{this.state}</>\n }\n\n}\nMain.contextType = RimsContext;\n\n// ************** List **************\n//\nclass List extends Component {\n constructor(props){\n  super(props)\n  this.state = {searchfield:''}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,<HrefButton key={'info_'+row.id} onClick={() => this.changeContent(<Info key='activity' id={row.id} />)} text={row.type} />,<>\n   <InfoButton key='info' onClick={() => this.changeContent(<Info key='activity_info' id={row.id} />) } title='Activity information' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id) } title='Delete activity' />\n  </>]\n\n\n deleteList = (id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  if (this.state.data) {\n   let act_list = (this.state.searchfield.length === 0) ? this.state.data : this.state.data.filter(row => row.type.includes(this.state.searchfield));\n   return <>\n    <ContentList key='cl' header='Activities' thead={['Date','Type','']} trows={act_list} listItem={this.listItem}>\n     <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='add' onClick={() => this.changeContent(<Info key='activity_info' id='new' />) } title='Add activity' />\n     <SearchField key='search' searchFire={(s) => this.setState({searchfield:s})} placeholder='Search activities' />\n    </ContentList>\n    <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n   </>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ***************\n//\nclass Info extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  post_call('api/master/activity_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   post_call('api/master/activity_info',{id:this.props.id}).then(result => {\n    if (result.data.user_id === null)\n     result.data.user_id = this.context.settings.id;\n    this.setState(result);\n   })\n }\n\n componentDidMount(){\n  post_call('api/master/activity_info',{id:this.props.id, extras:['types','users']}).then(result => {\n   if (result.data.user_id === null)\n    result.data.user_id = this.context.settings.id;\n   this.setState(result);\n  })\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='ai_art' header='Activity'>\n     <InfoColumns key='ai_content'>\n      <TextLine key='ai_id' id='id' label='ID' text={this.state.data.id} />\n      <SelectInput key='ai_user_id' id='user_id' label='User' value={this.state.data.user_id} onChange={this.onChange}>{this.state.users.map((row,idx) => <option key={idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n      <SelectInput key='ai_type_id' id='type_id' label='Type' value={this.state.data.type_id} onChange={this.onChange}>{this.state.types.map((row,idx) => <option key={idx} value={row.id}>{row.type}</option>)}</SelectInput>\n      <DateInput key='ai_date' id='date' value={this.state.data.date} onChange={this.onChange} />\n      <TimeInput key='ai_time' id='time' value={this.state.data.time} onChange={this.onChange} />\n     </InfoColumns>\n     <TextAreaInput key='ai_event' id='event' value={this.state.data.event} onChange={this.onChange} />\n     <SaveButton key='ai_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ai_result' result={JSON.stringify(this.state.update)} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\nInfo.contextType = RimsContext;\n\n// *************** Daily ***************\n//\nclass Daily extends Component {\n constructor(props){\n  super(props);\n  const date = new Date(Date.now());\n  this.state = {data:[], date:date.toISOString().substring(0,10), user_id:undefined, users:{}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/master/activity_daily',{extras:['users']}).then(result => this.setState({...result, user_id:this.context.settings.id}));\n }\n\n deleteList = (activity_id) => (window.confirm('Delete activity') && post_call('api/master/activity_delete', {id:activity_id}).then(result => {\n  if(result.deleted){\n   const idx = this.state.data.findIndex(obj => obj.act_id === activity_id);\n   const data = this.state.data[idx];\n   Object.assign(data,{user_id:null, event:null, act_id:null});\n   this.setState({data:this.state.data})\n  }\n }))\n\n onChange = (e) => {\n  const field = e.target.name;\n  const value = e.target.value;\n  const args = {date:(field === 'date') ? value : this.state.date};\n  post_call('api/master/activity_daily',args).then(result => this.setState({...result, [field]:value}));\n }\n\n syncEvent = (type_id,activity_id) =>\n  post_call('api/master/activity_info',{op:'update', id:(activity_id) ? activity_id : 'new', user_id:this.state.user_id, type_id:type_id, event:'auto', date:this.state.date}).then(result => {\n   if(result.update){\n    const idx = this.state.data.findIndex(obj => obj.id === type_id);\n    const data = this.state.data[idx];\n    Object.assign(data,{user_id:this.state.user_id, event:'auto', act_id:result.data.id});\n    this.setState({data:this.state.data})\n   }\n  })\n\n listItem = (row) => [row.type, (row.user_id) ? this.state.users[row.user_id].alias : '-', (row.event) ? row.event : '-',<>\n   {!row.user_id && <AddButton key='add' onClick={() => this.syncEvent(row.id,row.act_id)} />}\n   {row.user_id && row.user_id !== parseInt(this.state.user_id) && <SyncButton key='sync' onClick={() => this.syncEvent(row.id,row.act_id)} />}\n   {row.act_id && <InfoButton key='info' onClick={() => this.changeContent(<Info key={'activity_'+row.act_id} id={row.act_id} />)} />}\n   {row.act_id && <DeleteButton key='del' onClick={() => this.deleteList(row.act_id)} />}\n  </>]\n\n render(){\n  if (this.state.data)\n   return <ContentReport key='cr' header='Activities' thead={['Type','User','Event','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount()} />\n    <SelectInput key='user_id' id='user_id' label='User' value={this.state.user_id} onChange={this.onChange}>{Object.values(this.state.users).map((row,idx) => <option key={idx} value={row.id}>{row.alias}</option>)}</SelectInput>\n    <DateInput key='date' id='date' value={this.state.date} onChange={this.onChange} />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\nDaily.contextType = RimsContext;\n\n// ************** Report **************\n//\nexport class Report extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_list',{group:'month',mode:'full'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.date + ' - ' + row.time,row.user,row.type,row.class,row.event]\n\n render(){\n  return <ContentReport key='act_cr' header='Activities' thead={['Time','User','Type','Class','Event']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// ************** TypeList **************\n//\nclass TypeList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/master/activity_type_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,row.type,row.class,<>\n   <ConfigureButton key='info' onClick={() => this.changeContent(<TypeInfo key='act_tp' id={row.id} />) } title='Edit type information' />\n   <DeleteButton key='delete' onClick={() => this.deleteList(row.id) } title='Delete type' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete type?') && post_call('api/master/activity_type_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Activity Types' thead={['ID','Type','Class','']} trows={this.state.data} listItem={this.listItem}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<TypeInfo key='act_tp' id='new' />) } title='Add activity type' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** TypeInfo ***************\n//\nclass TypeInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, content:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/master/activity_type_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   post_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/master/activity_type_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return (\n    <InfoArticle key='ia_at' header='Activity Type'>\n     <InfoColumns key='ic'>\n      <TextLine key='id' id='id' text={this.state.data.id} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder='name' />\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n   )\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}