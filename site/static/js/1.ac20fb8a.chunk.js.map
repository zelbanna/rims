{"version":3,"sources":["interface.jsx"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","post_call","then","result","deleted","setState","data","state","filter","row","JSON","stringify","interfaces","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","listItem","snmp_index","mac","ip","description","class","connection_id","text","onClick","ConnectionInfo","id","title","if_state","ip_state","Info","Statistics","includes","op","this","header","thead","trows","LLDP","loader","Component","Report","hostname","onChange","e","target","value","updateInfo","changeIpam","lib","AddressInfo","stateIpam","domains","networks","ipam","ipamSearchIP","network_id","ipamOnChange","ipamCreate","record","ipamPrimary","ipam_id","ipamDelete","ipamDnsSync","connectDeviceChange","connect","length","found","status","connectInterfaceChange","type","disconnectInterface","peer","a_id","b_id","disconnect","stateInterface","sort","connectInterfaceConnect","map","extra","update","undefined","prevProps","label","netasc","a_domain_id","primary","old","opresult","columns","classes","alternatives","updateItems","range","dataset","vis","DataSet","flatMap","time","in8s","out8s","inUPs","outUPs","x","Date","y","group","graph","setItems","fit","rangeChange","checkChange","visibility","checked","setOptions","groups","gotoNow","today","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","ib","ob","canvas","React","createRef","content","options","yAxisOrientation","Graph2d","current","locale","width","height","zoomMin","zoomMax","clickToUse","drawPoints","interpolation","legend","dataAxis","alignZeros","icons","left","right","v","className","styles","graphs","ref","idx","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"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","file":"static/js/1.ac20fb8a.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport { Spinner, StateLeds, Article, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton,ForwardButton, GoButton, HealthButton, InfoButton, ItemsButton, LinkButton, ReloadButton, RevertButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && post_call('api/interface/delete', {interface_id:interface_id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && post_call('api/interface/cleanup',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => post_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && post_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n listItem = (row) => [row.snmp_index,row.name,row.mac,(row.ip) ? row.ip : '-',row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <>\n    <StateLeds key='state' state={[row.if_state,row.ip_state]} title='interface and ip state' />\n    <InfoButton key='info' onClick={() => this.changeContent(<Info key={row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    {row.snmp_index > 0 && <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key={row.interface_id} device_id={this.props.device_id} interface_id={row.interface_id} name={row.name} />)} title='Interface stats' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && ['wired','optical'].includes(row.class) && <LinkButton key='link' onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='connect_device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n   </>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['SNMP','Name','MAC','IP Address','Description','Type','Link','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key='interface_info' device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Report ****************\n//\nexport class Report extends Component {\n componentDidMount(){\n  post_call('api/interface/list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.device_id,row.hostname,row.interface_id,row.class,row.ip,row.mac,row.name,row.description,<StateLeds key={'ir_'+row.id} state={[row.if_state,row.ip_state]} title='interface and ip state' />]\n\n render(){\n  return (!this.state) ? <Spinner /> : <ContentReport key='if_cr' header='Devices' thead={['Dev','Hostname','If','Class','IP','MAC','Name','Description','State']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, description:this.props.description, device_id:this.props.device_id, class:this.props.class, extra:['classes','ip']}).then(result => this.setState({...result, update:undefined}));\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount();\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n updateInfo = () => post_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />));\n\n // IPAM\n stateIpam = () => {\n  this.setState({op:(this.state.domains && this.state.networks) ? 'ipam' : 'wait', ipam:{ip:'<N/A>'}})\n  if (!this.state.domains)\n   post_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data,op:(this.state.networks) ? 'ipam':'wait'}));\n  if (!this.state.networks)\n   post_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:(this.state.domains) ? 'ipam':'wait'}));\n }\n ipamSearchIP = () => {\n  if (this.state.ipam.network_id)\n   post_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n ipamOnChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n ipamCreate = () => post_call('api/interface/info',{op:'ipam_create',     interface_id:this.state.data.interface_id, record:this.state.ipam}).then(result => this.setState({...result,op:null}))\n ipamPrimary = (id) => post_call('api/interface/info',{op:'ipam_primary', interface_id:this.state.data.interface_id, ipam_id:id}).then(result => this.setState(result));\n ipamDelete = (id) => (window.confirm('Delete IP Address?') && post_call('api/ipam/address_delete',{id:id}).then(result => this.componentDidMount()));\n ipamDnsSync = () => post_call('api/interface/info',{op:'dns_sync',       interface_id:this.state.data.interface_id}).then(result => this.setState(result));\n\n // Connections\n connectDeviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   post_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n connectInterfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n disconnectInterface = () => (this.state.peer && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n stateInterface = () => (this.state.connect.found && post_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'connect_interface'})))\n connectInterfaceConnect = () => (this.state.connect.interface_id && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n\n // Render\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'connect_device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.connectDeviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'connect_interface')\n     return <LineArticle key='la_cnct'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='interface' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.connectInterfaceChange}>\n       {this.state.interfaces.map(row => <option key={row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='map' id='map' value={this.state.connect.map} onChange={this.connectInterfaceChange} />\n      <BackButton key='back' onClick={() => this.setState({op:'connect_device'})} title='Back' />\n      <ForwardButton key='fwd' onClick={() => this.connectInterfaceConnect()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ia_ipam' header='Create IPAM record'>\n      <InfoColumns key='ic'>\n       <SelectInput key='network' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamOnChange}>{this.state.networks.map(row => <option key={row.id} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamOnChange} />\n       <SelectInput key='domain' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamOnChange}>{this.state.domains.map(row => <option key={row.id} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='find_ip' onClick={() => this.ipamSearchIP()} title='Search IP within network' />\n      <ForwardButton key='fwd' onClick={() => this.ipamCreate()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const primary = (this.state.data.ipam_id);\n    const old = (this.state.data.interface_id !== 'new');\n    const peer = this.state.peer;\n    const opresult = (this.state.update === undefined) ? '' : 'Updated: ' + JSON.stringify(this.state.update)\n    return (<InfoArticle key='ia_interface_info' header='Interface'>\n     <InfoColumns key='ic' columns={3}>\n      <TextLine key='id' id='id' label='Local ID' text={this.state.data.interface_id} /><div />\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      {(primary) ? <SyncButton key='sync' onClick={() => this.ipamDnsSync()} title='sync interface name and IP hostname' /> : <div />}\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='snmp_index' id='snmp_index' label='SNMP index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      {primary && <><TextLine key='ip' id='ip' label='Primary IP' text={this.state.primary.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(this.state.primary.id)} title='Edit IPAM entry' /><DeleteButton key='delete' onClick={() => this.ipamDelete(this.state.primary.id)} title='Delete IPAM entry' /></div></>}\n      {this.state.alternatives.map(row => <Fragment key={row.ip}><TextLine key='ip' id={row.ip} label='Alternative IP' text={row.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(row.id)} title='Edit IPAM entry' /><SyncButton key='primary' onClick={() => this.ipamPrimary(row.id)} title='Make primary' /><DeleteButton key='delete' onClick={() => this.ipamDelete(row.id)} title='Delete IPAM entry' /></div></Fragment>)}\n      {peer && <><TextLine key='peer_int_id' id='peer_interface' label='Peer Interface' text={peer.interface_id} /><UnlinkButton key='unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></>}\n      {peer && <><TextLine key='peer_dev_id' id='peer_device' label='Peer Device' text={peer.device_id} /><div/></>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <ItemsButton key='list' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Interfaces' />}\n     {this.props.interface_id !== 'new' && <ReloadButton key='reload' onClick={() => this.componentDidMount()} />}\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {old && !peer && ['wired','optical'].includes(this.state.data.class) && <LinkButton key='connect' onClick={() => this.setState({op:'connect_device'})} title='Connect peer interface' />}\n     {old && <AddButton key='add' onClick={() => this.stateIpam()} title='Add IP' />}\n     <Result key='result' result={opresult} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Statistics ****************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {range:1, visibility: {ib:true, ob:true, ip:true, op:true}}\n  this.canvas = React.createRef()\n  this.graph = null;\n  this.vis = null;\n }\n\n componentDidMount(){\n  import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => {\n   this.vis = vis;\n   const options = { locale:'en', width:'100%', height:'100%', zoomMin:60000, zoomMax:1209600000, clickToUse:true, drawPoints: false, interpolation:false, legend:true, dataAxis:{ alignZeros:false , icons:true, left:{ title:{ text:'kbps' } }, right:{ title:{ text:'packets per second' } } } };\n   const groups = new this.vis.DataSet([{id:'ib', content:'In'}, {id:'ob', content:'Out' }, {id:'ip', content:'In', options: { yAxisOrientation: 'right'}},{id:'op', content:'Out', options: { yAxisOrientation: 'right'}}]);\n   this.graph = new this.vis.Graph2d(this.canvas.current, [], groups, options);\n   this.updateItems(this.state.range);\n  })\n }\n\n updateItems = (range) => post_call('api/statistics/query_interface',{device_id:this.props.device_id, interface_id:this.props.interface_id, range:range}).then(result => {\n  const dataset = new this.vis.DataSet(result.data.flatMap(({time, in8s, out8s, inUPs, outUPs}) => [{x:new Date(time*1000), y:in8s, group:'ib'},{x:new Date(time*1000), y:out8s, group:'ob'}, {x:new Date(time*1000), y:inUPs, group:'ip'},{x:new Date(time*1000), y:outUPs, group:'op'}]));\n  this.graph.setItems(dataset);\n  this.graph.fit();\n });\n\n rangeChange = (e) => {\n  this.setState({[e.target.name]:e.target.value})\n  this.updateItems(e.target.value);\n }\n\n checkChange = (e) => {\n  this.setState({visibility:{...this.state.visibility, [e.target.name]:e.target.checked}});\n  this.graph.setOptions({groups:{visibility:{[e.target.name]:e.target.checked}}})\n }\n\n gotoNow = () => {\n  const today = new Date()\n  this.graph.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  const v = this.state.visibility;\n  return <Article key='is_art' header='Statistics'>\n   <ReloadButton key='reload' onClick={() => this.updateItems(this.state.range)} title='Reload' />\n   <RevertButton key='reset' onClick={() => this.gotoNow()} title='Go to now' />\n   <br />\n   <TextLine key='name' id='name' label='Interface name' text={this.props.name} />\n   <br />\n   <SelectInput key='range' id='range' label='Time range' value={this.state.range} onChange={this.rangeChange}>\n    <option value='1'>1h</option>\n    <option value='4'>4h</option>\n    <option value='8'>8h</option>\n    <option value='24'>24h</option>\n   </SelectInput>\n   <CheckboxInput key='ib' id='ib' label='In bps' value={v.ib} onChange={this.checkChange} />\n   <CheckboxInput key='ob' id='ob' label='Out bps' value={v.ob} onChange={this.checkChange} />\n   <CheckboxInput key='ip' id='ip' label='In pps' value={v.ip} onChange={this.checkChange} />\n   <CheckboxInput key='op' id='op' label='Out pps' value={v.op} onChange={this.checkChange} />\n   <div className={styles.graphs} ref={this.canvas} />\n  </Article>\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => post_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}