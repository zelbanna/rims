{"version":3,"sources":["interface.jsx"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","post_call","interfaces","then","result","deleted","setState","data","state","filter","row","JSON","stringify","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","listItem","snmp_index","mac","ip","description","class","connection_id","key","text","onClick","ConnectionInfo","id","title","if_state","ip_state","Info","includes","op","this","header","thead","trows","rnd","LLDP","loader","Component","onChange","e","target","value","updateInfo","changeIpam","lib","AddressInfo","deleteIpam","entry","status","clearIpam","swapIpam","deviceChange","connect","length","found","stateInterface","sort","interfaceChange","type","connectInterface","a_id","b_id","map","disconnectInterface","peer","disconnect","stateIpam","domains","networks","ipam","ipamChange","searchIP","network_id","createIpam","ipam_record","extra","label","netasc","a_domain_id","ipam1","ipam_id","ipam2","ipam_alt_id","opresult","undefined","update","columns","classes","idx","device_name","interface_name","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"8QAQaA,EAAb,kDACC,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAQPC,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMG,WAAWD,IAT9B,EAWlBE,WAAa,SAACC,EAAaC,GAAd,OAAwBC,OAAOC,QAAQ,2BAA6BF,IAASG,YAAU,uBAAwB,CAACC,WAAW,CAACL,KAAgBM,MAAK,SAAAC,GAAM,OAAKA,EAAOC,QAAU,GAAM,EAAKC,SAAS,CAACC,KAAK,EAAKC,MAAMD,KAAKE,QAAO,SAAAC,GAAG,OAAKA,EAAIb,eAAiBA,KAAeO,OAAOO,KAAKC,UAAUR,EAAOF,kBAXlS,EAalBW,QAAU,kBAAOd,OAAOC,QAAQ,+BAAiCC,YAAU,uBAAuB,CAACa,UAAU,EAAKtB,MAAMsB,YAAYX,MAAK,SAAAC,GAAM,OAAI,EAAKW,wBAbtI,EAelBC,YAAc,kBAAMf,YAAU,sBAAsB,CAACa,UAAU,EAAKtB,MAAMsB,YAAYX,MAAK,SAAAC,GAAM,OAAI,EAAKW,wBAfxF,EAiBlBE,mBAAqB,kBAAOlB,OAAOC,QAAQ,2BAA6BC,YAAU,qBAAqB,CAACa,UAAU,EAAKtB,MAAMsB,YAAYX,MAAK,SAAAC,GAAM,OAAI,EAAKW,wBAjB3I,EAmBlBG,SAAW,SAACR,GAAD,MAAS,CAACA,EAAIS,WAAWT,EAAIZ,KAAKY,EAAIU,IAAKV,EAAIW,GAAMX,EAAIW,GAAK,IAAIX,EAAIY,YAAYZ,EAAIa,MAC9Fb,EAAIc,cAAiB,kBAAC,aAAD,CAAYC,IAAK,YAAYf,EAAIb,aAAc6B,KAAMhB,EAAIc,cAAeG,QAAS,kBAAM,EAAKlC,cAAc,kBAACmC,EAAD,CAAgBH,IAAK,mBAAqBf,EAAIc,cAAeK,GAAInB,EAAIc,cAAeV,UAAW,EAAKtB,MAAMsB,UAAWnB,WAAY,EAAKF,kBAAoBqC,MAAM,2BAA8B,IAC9T,kBAAC,WAAD,KACC,kBAAC,YAAD,CAAWL,IAAK,eAAiBf,EAAIb,aAAcW,MAAO,CAACE,EAAIqB,SAASrB,EAAIsB,YAC5E,kBAAC,aAAD,CAAYP,IAAK,eAAiBf,EAAIb,aAAc8B,QAAS,kBAAM,EAAKlC,cAAc,kBAACwC,EAAD,CAAMR,IAAK,kBAAoBf,EAAIb,aAAcA,aAAca,EAAIb,aAAcF,WAAY,EAAKH,MAAMG,eAAiBmC,MAAM,0BACrN,kBAAC,eAAD,CAAcL,IAAK,cAAgBf,EAAIb,aAAc8B,QAAS,kBAAM,EAAK/B,WAAWc,EAAIb,aAAaa,EAAIZ,OAAOgC,MAAM,sBACpHpB,EAAIc,eAAiB,CAAC,QAAQ,WAAWU,SAASxB,EAAIa,QAAU,kBAAC,aAAD,CAAYE,IAAK,eAAiBf,EAAIb,aAAc8B,QAAS,kBAAM,EAAKlC,cAAc,kBAACwC,EAAD,CAAMR,IAAK,kBAAoBf,EAAIb,aAAcsC,GAAG,SAAStC,aAAca,EAAIb,aAAcC,KAAMY,EAAIZ,KAAMH,WAAY,EAAKH,MAAMG,eAAiBmC,MAAM,yBAvBrT,EAAKtB,MAAQ,GAFI,EADnB,gEAMqB,IAAD,OAClBP,YAAU,qBAAqB,CAACa,UAAUsB,KAAK5C,MAAMsB,YAAYX,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,QAPhG,+BA6BU,IAAD,OACP,OAAIgC,KAAK5B,MAAMD,KACP,kBAAC,gBAAD,CAAekB,IAAI,QAAQY,OAAO,aAAaC,MAAO,CAAC,KAAK,OAAO,MAAM,aAAa,cAAc,OAAO,OAAO,IAAKC,MAAOH,KAAK5B,MAAMD,KAAMW,SAAUkB,KAAKlB,SAAUd,OAAQgC,KAAK5B,MAAMJ,QACjM,kBAAC,eAAD,CAAcqB,IAAI,gBAAgBE,QAAS,kBAAM,EAAKZ,uBACtD,kBAAC,YAAD,CAAWU,IAAI,aAAaE,QAAS,kBAAM,EAAKlC,cAAc,kBAACwC,EAAD,CAAMR,IAAK,kBAAoBe,cAAO1B,UAAW,EAAKtB,MAAMsB,UAAWjB,aAAa,MAAMF,WAAY,EAAKH,MAAMG,eAAkBmC,MAAM,kBACvM,kBAAC,aAAD,CAAYL,IAAI,cAAcE,QAAS,kBAAM,EAAKX,eAAec,MAAM,iCAAiCJ,KAAK,UAC7G,kBAAC,aAAD,CAAYD,IAAI,cAAcE,QAAS,kBAAM,EAAKV,sBAAsBa,MAAM,6BAA6BJ,KAAK,aAChH,kBAAC,aAAD,CAAYD,IAAI,cAAcE,QAAS,kBAAM,EAAKlC,cAAc,kBAACgD,EAAD,CAAMhB,IAAI,iBAAiBX,UAAW,EAAKtB,MAAMsB,UAAWnB,WAAY,EAAKH,MAAMG,eAAkBmC,MAAM,4BAA4BJ,KAAK,SAC5M,kBAAC,aAAD,CAAYD,IAAI,eAAeE,QAAS,kBAAM,EAAKd,WAAWiB,MAAM,4BAA4BJ,KAAK,YACpGU,KAAK5B,MAAMkC,QAGN,kBAAC,UAAD,UAzCV,GAA0BC,aA+CbV,EAAb,kDACC,WAAYzC,GAAO,IAAD,8BACjB,cAAMA,IAIPC,cAAgB,SAACC,GAAD,OAAU,EAAKF,MAAMG,WAAWD,IAL9B,EAWlBkD,SAAW,SAACC,GAAD,OAAO,EAAKvC,SAAS,CAACC,KAAK,eAAI,EAAKC,MAAMD,KAAhB,eAAuBsC,EAAEC,OAAOhD,KAAM+C,EAAEC,OAAOC,WAXlE,EAYlBC,WAAa,kBAAM/C,YAAU,qBAAD,aAAuBkC,GAAG,UAAa,EAAK3B,MAAMD,OAAOJ,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,OAZhG,EAclB6C,WAAa,SAACpB,GAAD,OAAQ,6BAAqB1B,MAAK,SAAA+C,GAAG,OAAI,EAAKzD,cAAc,kBAACyD,EAAIC,YAAL,CAAiB1B,IAAK,gBAAgBI,EAAIA,GAAIA,SAdrG,EAelBuB,WAAa,SAACC,GAAD,OAAYtD,OAAOC,QAAQ,uBAAyBC,YAAU,0BAA0B,CAAC4B,GAAG,EAAKrB,MAAMD,KAAK8C,KAASlD,MAAK,SAAAC,GAAM,MAAwB,OAAlBA,EAAOkD,QAAoB,EAAKhD,SAAS,CAACC,KAAK,eAAI,EAAKC,MAAMD,KAAhB,eAAuB8C,EAAO,aAf7M,EAgBlBE,UAAY,SAACF,GAAD,OAAWpD,YAAU,qBAAD,aAAuBkC,GAAG,SAAUtC,aAAa,EAAKW,MAAMD,KAAKV,cAAewD,EAAO,OAAOlD,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,OAhBzI,EAiBlBoD,SAAW,kBAAMvD,YAAU,qBAAqB,CAACkC,GAAG,OAAQtC,aAAa,EAAKW,MAAMD,KAAKV,eAAeM,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,OAjBnH,EAmBlBqD,aAAe,SAACZ,GACf,EAAKvC,SAAS,CAACoD,QAAQ,eAAI,EAAKlD,MAAMkD,QAAhB,eAA0Bb,EAAEC,OAAOhD,KAAM+C,EAAEC,OAAOC,UACnD,OAAlBF,EAAEC,OAAOhD,MAAiB+C,EAAEC,OAAOC,MAAMY,OAAS,GACpD1D,YAAU,sBAAsB,CAAC4B,GAAGgB,EAAEC,OAAOC,QAAQ5C,MAAK,SAAAC,GAAM,OAAKA,GAAU,EAAKE,SAAS,CAACoD,QAAQ,eAAI,EAAKlD,MAAMkD,QAAhB,CAAyBE,MAAyB,OAAlBxD,EAAOkD,OAAkBxD,KAAwB,OAAlBM,EAAOkD,OAAmBlD,EAAOG,KAAO,gBAtB5L,EAyBlBsD,eAAiB,kBAAO,EAAKrD,MAAMkD,QAAQE,OAAS3D,YAAU,qBAAqB,CAACa,UAAU,EAAKN,MAAMkD,QAAQ7B,GAAGiC,KAAK,OAAOrD,OAAO,CAAC,eAAeN,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACJ,WAAWE,EAAOG,KAAM4B,GAAG,kBAzB9L,EA2BlB4B,gBAAkB,SAAClB,GAAD,OAAO,EAAKvC,SAAS,CAACoD,QAAQ,eAAI,EAAKlD,MAAMkD,QAAhB,eAA0Bb,EAAEC,OAAOhD,KAAM+C,EAAEC,OAA0B,aAAlBD,EAAEC,OAAOkB,KAAuB,QAAU,gBA3B1H,EA4BlBC,iBAAmB,kBAAO,EAAKzD,MAAMkD,QAAQ7D,cAAgBI,YAAU,wBAAwB,CAACiE,KAAK,EAAK1D,MAAMD,KAAKV,aAAasE,KAAK,EAAK3D,MAAMkD,QAAQ7D,aAAauE,IAAI,EAAK5D,MAAMkD,QAAQU,MAAMjE,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACoD,QAAQ,GAAGvB,GAAG,WA5B9N,EA6BlBkC,oBAAsB,kBAAO,EAAK7D,MAAM8D,MAAQrE,YAAU,wBAAwB,CAACiE,KAAK,EAAK1D,MAAMD,KAAKV,aAAasE,KAAK,EAAK3D,MAAM8D,KAAKzE,aAAa0E,YAAW,IAAOpE,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACgE,KAAK,WA7B1L,EA+BlBE,UAAY,SAACnB,GACR,EAAK7C,MAAMiE,SAAW,EAAKjE,MAAMkE,SACpC,EAAKpE,SAAS,CAAC6B,GAAG,OAAQkB,MAAMA,EAAOsB,KAAK,CAACtD,GAAG,WAEhD,EAAKf,SAAS,CAAC6B,GAAG,OAAQkB,MAAMA,EAAOsB,KAAK,CAACtD,GAAG,WAC5C,EAAKb,MAAMiE,SACfxE,YAAU,sBAAsB,CAACQ,OAAO,YAAYN,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACmE,QAAQrE,EAAOG,UAC7F,EAAKC,MAAMkE,UACfzE,YAAU,yBAAyBE,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACoE,SAAStE,EAAOG,KAAK4B,GAAG,aAvCzE,EA0ClByC,WAAa,SAAC/B,GAAD,OAAO,EAAKvC,SAAS,CAACqE,KAAK,eAAI,EAAKnE,MAAMmE,KAAhB,eAAuB9B,EAAEC,OAAOhD,KAAM+C,EAAEC,OAAOC,WA1CpE,EA4ClB8B,SAAW,WACN,EAAKrE,MAAMmE,KAAKG,YACnB7E,YAAU,wBAAwB,CAAC6E,WAAW,EAAKtE,MAAMmE,KAAKG,aAAa3E,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACqE,KAAK,eAAI,EAAKnE,MAAMmE,KAAhB,CAAsBtD,GAAGjB,EAAOiB,WA9C7H,EAiDlB0D,WAAa,WACZ9E,YAAU,qBAAqB,CAACJ,aAAa,EAAKL,MAAMK,aAAcsC,GAAG,SAAU6C,YAAY,EAAKxE,MAAMmE,KAAMtB,MAAM,EAAK7C,MAAM6C,QAAQlD,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAL,eAAkBF,EAAlB,CAAyB+B,GAAG,YAhDpL,EAAK3B,MAAQ,CAAC2B,GAAG,EAAK3C,MAAM2C,GAAIuB,QAAQ,CAAC5D,KAAK,QAAQsE,KAAI,IAFzC,EADnB,gEAQqB,IAAD,OAClBnE,YAAU,qBAAqB,CAACJ,aAAauC,KAAK5C,MAAMK,aAAcuB,IAAIgB,KAAK5C,MAAM4B,IAAKtB,KAAKsC,KAAK5C,MAAMM,KAAMgB,UAAUsB,KAAK5C,MAAMsB,UAAWS,MAAMa,KAAK5C,MAAM+B,MAAO0D,MAAM,CAAC,UAAU,QAAQ9E,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,QAThO,+BAsDU,IAAD,OACP,GAAGgC,KAAK5B,MAAMD,KAAK,CAClB,GAAI6B,KAAK5B,MAAM2B,GACd,MAAqB,WAAlBC,KAAK5B,MAAM2B,GACN,kBAAC,cAAD,CAAaV,IAAI,eAAjB,WACEW,KAAK5B,MAAMD,KAAKT,KADlB,OAC2B,kBAAC,YAAD,CAAW2B,IAAI,cAAcI,GAAG,KAAKqD,MAAM,YAAYtC,SAAUR,KAAKqB,eADjG,eAC8HrB,KAAK5B,MAAMkD,QAAQ5D,KADjJ,IAEP,kBAAC,aAAD,CAAY2B,IAAI,mBAAmBE,QAAS,kBAAM,EAAKrB,SAAS,CAAC6B,GAAG,QAAQL,MAAM,SAClF,kBAAC,gBAAD,CAAeL,IAAI,kBAAkBE,QAAS,kBAAM,EAAKkC,kBAAkB/B,MAAO,wBAA0BM,KAAK5B,MAAMkD,QAAQ5D,QAEtG,cAAlBsC,KAAK5B,MAAM2B,GACX,kBAAC,cAAD,CAAaV,IAAI,eAAjB,WACGW,KAAK5B,MAAMD,KAAKT,KADnB,OAC6BsC,KAAK5B,MAAMkD,QAAQ5D,KADhD,MAEN,kBAAC,cAAD,CAAa2B,IAAI,cAAcI,GAAG,eAAeqD,MAAM,YAAYnC,MAAOX,KAAK5B,MAAMkD,QAAQ7D,aAAc+C,SAAUR,KAAK2B,iBACxH3B,KAAK5B,MAAMN,WAAWkE,KAAI,SAAA1D,GAAG,OAAI,4BAAQe,IAAKf,EAAIb,aAAckD,MAAOrC,EAAIb,cAA1C,UAA4Da,EAAIb,aAAhE,aAAiFa,EAAIZ,KAArF,cAA+FY,EAAIY,YAAnG,UAEnC,kBAAC,gBAAD,CAAeG,IAAI,cAAcI,GAAG,MAAMkB,MAAOX,KAAK5B,MAAMkD,QAAQU,IAAKxB,SAAUR,KAAK2B,kBACxF,kBAAC,aAAD,CAAYtC,IAAI,mBAAmBE,QAAS,kBAAM,EAAKrB,SAAS,CAAC6B,GAAG,YAAYL,MAAM,SACtF,kBAAC,gBAAD,CAAeL,IAAI,kBAAkBE,QAAS,kBAAM,EAAKsC,oBAAoBnC,MAAM,yBAE1D,SAAlBM,KAAK5B,MAAM2B,GACZ,kBAAC,cAAD,CAAaV,IAAI,kBAAkBY,OAAO,sBAChD,kBAAC,cAAD,CAAaZ,IAAI,kBAChB,kBAAC,cAAD,CAAaA,IAAI,cAAcI,GAAG,aAAaqD,MAAM,UAAUnC,MAAOX,KAAK5B,MAAMmE,KAAKG,WAAYlC,SAAUR,KAAKwC,YAAaxC,KAAK5B,MAAMkE,SAASN,KAAI,SAAA1D,GAAG,OAAI,4BAAQe,IAAKf,EAAImB,GAAIkB,MAAOrC,EAAImB,IAAhC,UAAwCnB,EAAIyE,OAA5C,aAAuDzE,EAAIY,YAA3D,UAC7J,kBAAC,YAAD,CAAWG,IAAI,aAAaI,GAAG,KAAKkB,MAAOX,KAAK5B,MAAMmE,KAAKtD,GAAI6D,MAAM,KAAKtC,SAAUR,KAAKwC,aACzF,kBAAC,cAAD,CAAanD,IAAI,cAAcI,GAAG,cAAcqD,MAAM,SAASnC,MAAOX,KAAK5B,MAAMmE,KAAKS,YAAaxC,SAAUR,KAAKwC,YAAaxC,KAAK5B,MAAMiE,QAAQL,KAAI,SAAA1D,GAAG,OAAI,4BAAQe,IAAKf,EAAImB,GAAIkB,MAAOrC,EAAImB,IAAKnB,EAAIZ,WAEvM,kBAAC,aAAD,CAAY2B,IAAI,mBAAmBE,QAAS,kBAAM,EAAKrB,SAAS,CAAC6B,GAAG,QAAQL,MAAM,SAClF,kBAAC,eAAD,CAAcL,IAAI,mBAAmBE,QAAS,kBAAM,EAAKkD,YAAY/C,MAAM,6BAC3E,kBAAC,gBAAD,CAAeL,IAAI,kBAAkBE,QAAS,kBAAM,EAAKoD,cAAcjD,MAAM,uBAElD,SAAlBM,KAAK5B,MAAM2B,GACd,kBAAC,UAAD,MAEA,uEAER,IAAMkD,EAASjD,KAAK5B,MAAMD,KAAK+E,QACzBC,EAASnD,KAAK5B,MAAMD,KAAKiF,YACzBlB,EAAQlC,KAAK5B,MAAM8D,KACrBmB,EAAW,GAIf,YAH0BC,IAAtBtD,KAAK5B,MAAMmF,SACdF,EAAW,YAAc9E,KAAKC,UAAUwB,KAAK5B,MAAMmF,SAE5C,kBAAC,cAAD,CAAalE,IAAI,aAAaY,OAAO,aAC5C,kBAAC,cAAD,CAAaZ,IAAI,aAAamE,QAAS,GACtC,kBAAC,YAAD,CAAWnE,IAAI,UAAUI,GAAG,OAAOkB,MAAOX,KAAK5B,MAAMD,KAAKT,KAAM8C,SAAUR,KAAKQ,WAAY,8BAC3F,kBAAC,cAAD,CAAanB,IAAI,WAAWI,GAAG,QAAQkB,MAAOX,KAAK5B,MAAMD,KAAKgB,MAAOqB,SAAUR,KAAKQ,UAAWR,KAAK5B,MAAMqF,QAAQzB,KAAI,SAAA1D,GAAG,OAAI,4BAAQe,IAAKf,EAAKqC,MAAOrC,GAAMA,OAA6B,8BACzL,kBAAC,YAAD,CAAWe,IAAI,iBAAiBI,GAAG,cAAckB,MAAOX,KAAK5B,MAAMD,KAAKe,YAAasB,SAAUR,KAAKQ,WAAY,8BAChH,kBAAC,YAAD,CAAWnB,IAAI,gBAAgBI,GAAG,aAAaqD,MAAM,aAAanC,MAAOX,KAAK5B,MAAMD,KAAKY,WAAYyB,SAAUR,KAAKQ,WAAY,8BAChI,kBAAC,YAAD,CAAWnB,IAAI,SAASI,GAAG,MAAMkB,MAAOX,KAAK5B,MAAMD,KAAKa,IAAKwB,SAAUR,KAAKQ,WAAY,8BACxF,kBAAC,YAAD,CAAWnB,IAAI,cAAcI,GAAG,UAAUqD,MAAM,UAAUnC,MAAOX,KAAK5B,MAAMD,KAAK+E,QAAS1C,SAAUR,KAAKQ,WAAY,6BACnHyC,GAAS,kBAAC,WAAD,CAAU5D,IAAI,eAAeE,QAAS,kBAAM,EAAKsB,WAAWoC,IAAQvD,MAAM,oBACnFuD,GAAS,kBAAC,eAAD,CAAc5D,IAAI,iBAAiBE,QAAS,kBAAM,EAAK4B,UAAU,YAAYzB,MAAM,qBAC5FuD,GAAS,kBAAC,eAAD,CAAc5D,IAAI,iBAAiBE,QAAS,kBAAM,EAAKyB,WAAW,YAAYtB,MAAM,uBAC5FuD,GAA0C,QAAjCjD,KAAK5B,MAAMD,KAAKV,cAA0B,kBAAC,YAAD,CAAW4B,IAAI,cAAcE,QAAS,kBAAM,EAAK6C,UAAU,YAAY1C,MAAM,uBAElIuD,GAAS,kBAAC,WAAD,CAAU5D,IAAI,iBAAgB,kBAAC,WAAD,CAAUA,IAAI,WAAWI,GAAG,UAASH,KAAMU,KAAK5B,MAAMa,GAAGgE,KAAU,+BAC3G,kBAAC,YAAD,CAAW5D,IAAI,cAAcI,GAAG,cAAcqD,MAAM,cAAcnC,MAAOX,KAAK5B,MAAMD,KAAKiF,YAAa5C,SAAUR,KAAKQ,WAAY,6BAC/H2C,GAAS,kBAAC,WAAD,CAAU9D,IAAI,eAAeE,QAAS,kBAAM,EAAKsB,WAAWsC,IAAQzD,MAAM,oBACnFyD,GAAS,kBAAC,eAAD,CAAc9D,IAAI,iBAAiBE,QAAS,kBAAM,EAAK4B,UAAU,gBAAgBzB,MAAM,qBAChGyD,GAAS,kBAAC,eAAD,CAAc9D,IAAI,iBAAiBE,QAAS,kBAAM,EAAKyB,WAAW,gBAAgBtB,MAAM,uBAChGyD,GAA0C,QAAjCnD,KAAK5B,MAAMD,KAAKV,cAA0B,kBAAC,YAAD,CAAW4B,IAAI,cAAcE,QAAS,kBAAM,EAAK6C,UAAU,gBAAgB1C,MAAM,uBAEtIyD,GAAS,kBAAC,WAAD,CAAU9D,IAAI,iBAAgB,kBAAC,WAAD,CAAUA,IAAI,WAAWI,GAAG,cAAaH,KAAMU,KAAK5B,MAAMa,GAAGkE,KAAU,+BAC9GjB,GAAQ,kBAAC,WAAD,CAAU7C,IAAI,oBAAmB,kBAAC,WAAD,CAAUA,IAAI,iBAAiBI,GAAG,iBAAiBqD,MAAM,iBAAiBxD,KAAMU,KAAK5B,MAAM8D,KAAKzE,eAAgB,kBAAC,eAAD,CAAc4B,IAAI,iBAAiBE,QAAS,kBAAM,EAAK0C,uBAAuBvC,MAAM,0BAC7OwC,GAAQ,kBAAC,WAAD,CAAU7C,IAAI,oBAAmB,kBAAC,WAAD,CAAUA,IAAI,iBAAiBI,GAAG,cAAcH,KAAMU,KAAK5B,MAAM8D,KAAKxD,YAAa,gCAE7H,eAAgBsB,KAAK5C,OAAS,kBAAC,cAAD,CAAaiC,IAAI,cAAcE,QAAS,kBAAM,EAAKnC,MAAMG,WAAW,kBAACJ,EAAD,CAAMkC,IAAI,iBAAiBX,UAAW,EAAKN,MAAMD,KAAKO,UAAWnB,WAAY,EAAKH,MAAMG,eAAiBmC,MAAM,eAClN,kBAAC,eAAD,CAAcL,IAAI,gBAAgBE,QAAS,kBAAM,EAAKZ,uBACtD,kBAAC,aAAD,CAAYU,IAAI,cAAcE,QAAS,kBAAM,EAAKqB,cAAclB,MAAM,gCACpEwC,GAAyC,QAAjClC,KAAK5B,MAAMD,KAAKV,cAA0B,CAAC,QAAQ,WAAWqC,SAASE,KAAK5B,MAAMD,KAAKgB,QAAU,kBAAC,aAAD,CAAYE,IAAI,iBAAiBE,QAAS,kBAAM,EAAKrB,SAAS,CAAC6B,GAAG,YAAYL,MAAM,2BAC9LuD,GAASE,GAAS,kBAAC,aAAD,CAAY9D,IAAI,cAAcE,QAAS,kBAAM,EAAK6B,YAAY1B,MAAM,yCACvF,kBAAC,SAAD,CAAQL,IAAI,YAAYrB,OAAQqF,KAIlC,OAAO,kBAAC,UAAD,UAjIV,GAA0B9C,aAuIpBf,E,kDACL,WAAYpC,GAAO,IAAD,8BACjB,cAAMA,IAQPoD,SAAW,SAACC,GAAD,OAAO,EAAKvC,SAAS,CAACC,KAAK,eAAI,EAAKC,MAAMD,KAAhB,eAAuBsC,EAAEC,OAAOhD,KAAM+C,EAAEC,OAA0B,aAAlBD,EAAEC,OAAOkB,KAAuB,QAAU,gBAT7G,EAWlBhB,WAAa,kBAAM/C,YAAU,gCAAD,aAAkCkC,GAAG,UAAa,EAAK3B,MAAMD,OAAOJ,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,OAT5H,EAAKI,MAAQ,GAFI,E,gEAKE,IAAD,OAClBP,YAAU,gCAAgC,CAACuB,cAAcY,KAAK5C,MAAMqC,KAAK1B,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAASF,Q,+BAO9F,IAAD,OACP,OAAGgC,KAAK5B,MAAMN,WACN,kBAAC,cAAD,CAAauB,IAAI,aAAaY,OAAQ,cAAeD,KAAK5C,MAAMqC,IACtE,kBAAC,cAAD,CAAaJ,IAAI,cAChB,kBAAC,gBAAD,CAAeA,IAAI,MAAMI,GAAG,MAAMkB,MAAOX,KAAK5B,MAAMD,KAAK6D,IAAKxB,SAAUR,KAAKQ,WAC5ER,KAAK5B,MAAMN,WAAWkE,KAAI,SAAC1D,EAAIoF,GAAL,OAAa,kBAAC,WAAD,CAAUrE,IAAKqE,EAAKjE,GAAI,aAAciE,EAAKpE,KAAI,UAAKhB,EAAIqF,YAAT,cAA0BrF,EAAIsF,eAA9B,aAAiDtF,EAAIb,aAArD,WAExF,kBAAC,aAAD,CAAY4B,IAAI,cAAcE,QAAS,kBAAM,EAAKnC,MAAMG,WAAW,kBAACJ,EAAD,CAAMkC,IAAI,iBAAiBX,UAAW,EAAKtB,MAAMsB,UAAWnB,WAAY,EAAKH,MAAMG,eAAiBmC,MAAM,SAC7K,kBAAC,aAAD,CAAYL,IAAI,cAAcE,QAAS,kBAAM,EAAKqB,cAAclB,MAAM,iCAGhE,kBAAC,UAAD,U,GAzBmBa,aA+BvBF,E,kDACL,WAAYjD,GAAO,IAAD,8BACjB,cAAMA,IAQP0B,SAAW,SAACR,GAAD,MAAS,CAACA,EAAIuF,WAAWvF,EAAIwF,aAAaxF,EAAIyF,SAASzF,EAAI0F,QAAQ1F,EAAI2F,UAAU3F,EAAI4F,UAAU5F,EAAIS,WAAWT,EAAI6F,UAAU7F,EAAIc,cAAcd,EAAI4C,SAP5J,EAAK9C,MAAQ,GAFI,E,gEAKE,IAAD,OAClBP,YAAU,6BAA6B,CAACa,UAAUsB,KAAK5C,MAAMsB,YAAYX,MAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACC,KAAKiG,OAAOC,OAAOrG,EAAOG,a,+BAKzH,IAAD,OACP,OAAG6B,KAAK5B,MAAMD,KACN,kBAAC,gBAAD,CAAekB,IAAI,QAAQY,OAAO,YAAYC,MAAO,CAAC,UAAU,OAAO,OAAO,UAAU,OAAO,cAAc,aAAa,YAAY,OAAO,UAAWC,MAAOH,KAAK5B,MAAMD,KAAMW,SAAUkB,KAAKlB,UACtM,kBAAC,aAAD,CAAYO,IAAI,cAAcE,QAAS,kBAAM,EAAKnC,MAAMG,WAAW,kBAACJ,EAAD,CAAMkC,IAAI,iBAAiBX,UAAW,EAAKtB,MAAMsB,cAAgBgB,MAAM,UAGnI,kBAAC,UAAD,U,GAlBSa","file":"static/js/1.954c92b4.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { post_call, rnd } from './infra/Functions.js';\nimport { Spinner, StateLeds, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton,ForwardButton, GoButton, InfoButton, ItemsButton, LinkButton, ReloadButton, RemoveButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && post_call('api/interface/delete', {interfaces:[interface_id]}).then(result => (result.deleted > 0) && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && post_call('api/interface/delete',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => post_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && post_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n listItem = (row) => [row.snmp_index,row.name,row.mac,(row.ip) ? row.ip : '-',row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <Fragment>\n    <StateLeds key={'il_if_state_' + row.interface_id} state={[row.if_state,row.ip_state]} />\n    <InfoButton key={'il_btn_info_' + row.interface_id} onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    <DeleteButton key={'il_btn_del_' + row.interface_id} onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && ['wired','optical'].includes(row.class) && <LinkButton key={'il_btn_sync_' + row.interface_id} onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n   </Fragment>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['ID','Name','MAC','IP Address','Description','Type','Link','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key={'interface_info_' + rnd()} device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, device_id:this.props.device_id, class:this.props.class, extra:['classes','ip']}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n updateInfo = () => post_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />));\n deleteIpam = (entry) => (window.confirm('Delete IP mapping?') && post_call('api/ipam/address_delete',{id:this.state.data[entry]}).then(result => ((result.status === 'OK') && this.setState({data:{...this.state.data, [entry]:null}}))));\n clearIpam = (entry) => post_call('api/interface/info',{op:'update', interface_id:this.state.data.interface_id, [entry]:null}).then(result => this.setState(result));\n swapIpam = () => post_call('api/interface/info',{op:'swap', interface_id:this.state.data.interface_id}).then(result => this.setState(result));\n\n deviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   post_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n\n stateInterface = () => (this.state.connect.found && post_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'interface'})))\n\n interfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n connectInterface = () => (this.state.connect.interface_id && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n disconnectInterface = () => (this.state.peer && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n\n stateIpam = (entry) => {\n  if (this.state.domains && this.state.networks)\n   this.setState({op:'ipam', entry:entry, ipam:{ip:'<N/A>'}})\n  else\n   this.setState({op:'wait', entry:entry, ipam:{ip:'<N/A>'}})\n  if (!this.state.domains)\n   post_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data}));\n  if (!this.state.networks)\n   post_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:'ipam'}));\n }\n\n ipamChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n\n searchIP = () => {\n  if (this.state.ipam.network_id)\n   post_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n\n createIpam = () => {\n  post_call('api/interface/info',{interface_id:this.props.interface_id, op:'update', ipam_record:this.state.ipam, entry:this.state.entry}).then(result => this.setState({...result,op:null}))\n }\n\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.deviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'interface')\n     return <LineArticle key='ii_cnct_art'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='ii_cnct_int' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.interfaceChange}>\n       {this.state.interfaces.map(row => <option key={row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='ii_cnct_map' id='map' value={this.state.connect.map} onChange={this.interfaceChange} />\n      <BackButton key='ii_cnct_btn_back' onClick={() => this.setState({op:'device'})} title='Back' />\n      <ForwardButton key='ii_cnct_btn_fwd' onClick={() => this.connectInterface()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ii_ipam_article' header='Create IPAM record'>\n      <InfoColumns key='ii_ipam_create'>\n       <SelectInput key='ii_ipam_net' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamChange}>{this.state.networks.map(row => <option key={row.id} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ii_ipam_ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamChange} />\n       <SelectInput key='ii_ipam_dom' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamChange}>{this.state.domains.map(row => <option key={row.id} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='ii_ipam_btn_back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='ii_ipam_btn_find' onClick={() => this.searchIP()} title='Search IP within network' />\n      <ForwardButton key='ii_ipam_btn_fwd' onClick={() => this.createIpam()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const ipam1 = (this.state.data.ipam_id);\n    const ipam2 = (this.state.data.ipam_alt_id);\n    const peer = (this.state.peer);\n    let opresult = '';\n    if (this.state.update !== undefined) {\n     opresult = 'Updated: ' + JSON.stringify(this.state.update);\n    }\n    return (<InfoArticle key='ii_article' header='Interface'>\n     <InfoColumns key='ii_columns' columns={3}>\n      <TextInput key='ii_name' id='name' value={this.state.data.name} onChange={this.onChange} /><div />\n      <SelectInput key='ii_class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='ii_description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='ii_snmp_index' id='snmp_index' label='SNMP index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='ii_mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      <TextInput key='ii_ipam1_id' id='ipam_id' label='IPAM id' value={this.state.data.ipam_id} onChange={this.onChange} /><div>\n       {ipam1 && <GoButton key='ii_btn_ipam1' onClick={() => this.changeIpam(ipam1)} title='Edit IPAM entry' />}\n       {ipam1 && <RemoveButton key='ii_btn_remove1' onClick={() => this.clearIpam('ipam_id')} title='Clear IPAM entry' />}\n       {ipam1 && <DeleteButton key='ii_btn_delete1' onClick={() => this.deleteIpam('ipam_id')} title='Delete IPAM entry' />}\n       {!ipam1 && this.state.data.interface_id !== 'new' && <AddButton key='ii_btn_add1' onClick={() => this.stateIpam('ipam_id')} title='Create IPAM entry' />}\n      </div>\n      {ipam1 && <Fragment key='ii_ipam1_frag'><TextLine key='ii_ipam1' id='IPAM ip'text={this.state.ip[ipam1]} /><div /></Fragment>}\n      <TextInput key='ii_ipam2_id' id='ipam_alt_id' label='IPAM alt id' value={this.state.data.ipam_alt_id} onChange={this.onChange} /><div>\n       {ipam2 && <GoButton key='ii_btn_ipam2' onClick={() => this.changeIpam(ipam2)} title='Edit IPAM entry' />}\n       {ipam2 && <RemoveButton key='ii_btn_remove2' onClick={() => this.clearIpam('ipam_alt_id')} title='Clear IPAM entry' />}\n       {ipam2 && <DeleteButton key='ii_btn_delete2' onClick={() => this.deleteIpam('ipam_alt_id')} title='Delete IPAM entry' />}\n       {!ipam2 && this.state.data.interface_id !== 'new' && <AddButton key='ii_btn_add2' onClick={() => this.stateIpam('ipam_alt_id')} title='Create IPAM entry' />}\n      </div>\n      {ipam2 && <Fragment key='ii_ipam2_frag'><TextLine key='ii_ipam2' id='IPAM alt ip'text={this.state.ip[ipam2]} /><div /></Fragment>}\n      {peer && <Fragment key='ii_frag_peer_int'><TextLine key='ii_peer_int_id' id='peer_interface' label='Peer interface' text={this.state.peer.interface_id} /><UnlinkButton key='ii_peer_unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></Fragment>}\n      {peer && <Fragment key='ii_frag_peer_dev'><TextLine key='ii_peer_dev_id' id='peer_device' text={this.state.peer.device_id} /><div/></Fragment>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <ItemsButton key='ii_btn_list' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Interfaces' />}\n     <ReloadButton key='ii_btn_reload' onClick={() => this.componentDidMount()} />\n     <SaveButton key='ii_btn_save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {!peer && this.state.data.interface_id !== 'new' && ['wired','optical'].includes(this.state.data.class) && <LinkButton key='ii_btn_connect' onClick={() => this.setState({op:'device'})} title='Connect peer interface' />}\n     {ipam1 && ipam2 && <SyncButton key='ii_btn_swap' onClick={() => this.swapIpam()} title='Swap Primary and Alternative IPAM id' />}\n     <Result key='ii_result' result={opresult} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => post_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}