{"version":3,"file":"static/js/195.a2f6e65c.chunk.js","mappings":"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","sources":["ipam.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport { post_call, rnd, int2ip, ip2int } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton, ViewButton, LogButton, ConfigureButton, ItemsButton, ReloadButton, CheckButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\n// import styles from './infra/ui.module.css';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <>{this.state}</>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,\n   row.netasc,\n   row.description,\n   row.service,\n   <>\n    <ConfigureButton key='conf' onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n    <ItemsButton key='items' onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n    {row.class === 'v4' && <ViewButton key='layout' onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />}\n    {row.class === 'v4' && <CheckButton key='resv' onClick={() => this.changeContent(<ReservationList key={'resv_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='Reserved addresses for network' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete network' />\n    <ReloadButton key='reset' onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='leases' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id, extra:['servers','domains']}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','reservation','ip_integer']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = ip2int(this.state.network);\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<>\n   <StateLeds key='state' state={row.state} />\n   <ConfigureButton key='info' onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} changeSelf={this.changeContent} />)} title='Edit address entry' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation List ***************\n//\nclass ReservationList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/reservation_list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => post_call('api/ipam/reservation_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))}))\n\n listItem = (row,idx) => [row.ip,row.type,<DeleteButton key={'resv_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<ReservationNew key={'resv_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'resv_list_'+this.props.server_id} header='Reservations' thead={['IP','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='resv_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation New ****************\n//\nclass ReservationNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {ip:'',start:'',end:'', result:undefined,type:'dhcp'}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{'id':this.props.network_id}).then(result => this.setState({...result.data}))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n updateInfo = () => post_call('api/ipam/reservation_new',{network_id:this.props.network_id, ip:this.state.ip, type:this.state.type, a_domain_id:this.state.a_domain_id, start:this.state.start, end:this.state.end}).then(result => this.setState({result:result}))\n\n render() {\n  if (this.state.domains){\n   const network_id = this.props.network_id;\n   const result = (this.state.result) ? JSON.stringify(this.state.result.resv) : '';\n   return <InfoArticle key='dn_article' header='Reservation Address/Scope'>\n    <span>Allocate address with either 'ip' or 'start' to 'end' (e.g. a scope)</span>\n    <InfoColumns key='dn_content'>\n     <TextLine key='id' id='network_id' label='Network ID' text={network_id} />\n     <TextLine key='network' id='network' text={this.state.network + '/' + this.state.mask} />\n     <TextInput key='ip' id='ip' label='IP' value={this.state.ip} onChange={this.onChange} />\n     <TextInput key='start' id='start' label='Start IP' value={this.state.start} onChange={this.onChange} />\n     <TextInput key='end' id='end' label='End IP' value={this.state.end} onChange={this.onChange} />\n     <SelectInput key='type' id='type' label='Type' value={this.state.type} onChange={this.onChange}>\n      <option key='dhcp' value='dhcp'>dhcp</option>\n      <option key='reservation' value='reservation'>reservation</option>\n     </SelectInput>\n     <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n    </InfoColumns>\n    {this.props.changeSelf && <BackButton key='dn_btn_back' onClick={() => this.props.changeSelf(<ReservationList key={'resv_list_' + network_id} network_id={network_id} changeSelf={this.props.changeSelf} />)} />}\n    <SaveButton key='dn_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    <Result key='dn_operation' result={result} />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n"],"names":["Main","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","changeContent","elem","setState","state","_jsx","NetworkList","_createClass","key","value","_Fragment","children","this","Component","_Component2","_super2","_this2","listItem","row","id","netasc","description","service","_jsxs","ConfigureButton","onClick","NetworkInfo","title","ItemsButton","AddressList","network_id","changeSelf","class","ViewButton","Layout","CheckButton","ReservationList","DeleteButton","deleteList","ReloadButton","resetStatus","window","confirm","post_call","then","result","deleted","data","filter","count","_this3","_this4","ContentList","header","thead","trows","componentDidMount","AddButton","rnd","LogButton","Leases","ContentData","mountUpdate","fun","_Component3","_super3","_this5","onChange","e","_objectSpread","_defineProperty","target","name","content","updateInfo","op","found","_this6","extra","_this7","InfoArticle","InfoColumns","TextLine","label","text","TextInput","network","mask","gateway","SelectInput","server_id","servers","map","idx","concat","node","reverse_zone_id","domains","server","SaveButton","Spinner","_Component4","_super4","_this8","_len","arguments","length","args","Array","_key","apply","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","_this9","dict","_this10","start","ip2int","layout","_loop","pos","cnt","device_id","push","IpamRedButton","IpamGreyButton","IpamGreenButton","int2ip","size","Article","_Component5","_super5","_this11","mac","hostname","oui","starts","ends","_this12","type","ContentReport","_Component6","_super6","_this13","domain","StateLeds","AddressInfo","_this14","_this15","_Component7","_super7","_this16","status","undefined","_this17","_this18","info","a_domain_id","Result","_Component8","_super8","_this19","addEntry","ReservationNew","_this20","_this21","_Component9","_super9","_this22","end","_this23","_this24","JSON","stringify","resv","BackButton"],"sourceRoot":""}