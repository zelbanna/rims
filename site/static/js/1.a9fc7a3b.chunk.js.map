{"version":3,"sources":["interface.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["List","props","changeContent","elem","changeSelf","deleteList","interface_id","name","window","confirm","post_call","then","result","deleted","setState","data","state","filter","row","JSON","stringify","interfaces","cleanUp","device_id","componentDidMount","resetStatus","discoverInterfaces","unLink","connection_id","clear","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","iif","listItem","snmp_index","mac","ip","description","class","text","onClick","id","title","if_state","ip_state","includes","op","this","header","thead","trows","loader","Component","Report","hostname","Info","onChange","target","updateInfo","changeIpam","lib","AddressInfo","stateIpam","domains","networks","ipam","ipamSearchIP","network_id","ipamOnChange","ipamCreate","record","ipamPrimary","ipam_id","ipamDelete","ipamDnsSync","connectDeviceChange","connect","found","status","connectInterfaceChange","type","disconnectInterface","peer","a_id","b_id","disconnect","stateInterface","sort","connectInterfaceConnect","map","extra","update","undefined","prevProps","label","netasc","a_domain_id","primary","old","opresult","columns","classes","alternatives","Statistics","updateItems","range","pos","names","forEach","item","index","dataset","vis","DataSet","params","x","y","substr","group","graph","setItems","fit","rangeChange","checkChange","visibility","checked","setOptions","groups","gotoNow","today","Date","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","ib","ob","canvas","React","createRef","content","options","yAxisOrientation","Graph2d","current","locale","width","height","zoomMin","zoomMax","clickToUse","drawPoints","interpolation","legend","dataAxis","alignZeros","icons","left","right","v","className","styles","graphs","ref","ConnectionInfo","idx","device_name","interface_name","LLDP","chassis_id","chassis_type","sys_name","port_id","port_type","port_desc","snmp_name","Object","values"],"mappings":"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","file":"static/js/1.a9fc7a3b.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport { Spinner, StateLeds, Article, LineArticle, InfoArticle, InfoColumns, Result, ContentReport } from './infra/UI.jsx';\nimport { CheckboxInput, TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton,ForwardButton, GoButton, HealthButton, InfoButton, ItemsButton, LinkButton, ReloadButton, RevertButton, SaveButton, SearchButton, SyncButton, HrefButton, UnlinkButton, TextButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** List ****************\n//\nexport class List extends Component{\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/list',{device_id:this.props.device_id}).then(result => this.setState(result));\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n deleteList = (interface_id,name) => (window.confirm('Really delete interface ' + name) && post_call('api/interface/delete', {interface_id:interface_id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.interface_id !== interface_id)),result:JSON.stringify(result.interfaces)})))\n\n cleanUp = () => (window.confirm('Clean up empty interfaces?') && post_call('api/interface/cleanup',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n resetStatus = () => post_call('api/interface/clear',{device_id:this.props.device_id}).then(result => this.componentDidMount())\n\n discoverInterfaces = () => (window.confirm('Rediscover interfaces?') && post_call('api/interface/snmp',{device_id:this.props.device_id}).then(result => this.componentDidMount()))\n\n unLink = (interface_id, connection_id) => (window.confirm('Really unlink?') && post_call('api/interface/disconnect', {connection_id:connection_id}).then(result => {\n  if (result.clear){\n   var data = this.state.data;\n   for (var iif of data){\n    if (iif.connection_id === connection_id){\n     iif.connection_id = null;\n     break;\n    }\n   }\n   this.setState({data:data,result:'OK'})\n  } else {\n   this.setState({result:'NOT_OK'})\n  }\n }))\n\n \n listItem = (row) => [row.snmp_index,row.name,row.mac,(row.ip) ? row.ip : '-',row.description,row.class,\n   (row.connection_id) ? <HrefButton key={'conn_btn_'+row.interface_id} text={row.connection_id} onClick={() => this.changeContent(<ConnectionInfo key={'connection_info_' + row.connection_id} id={row.connection_id} device_id={this.props.device_id} changeSelf={this.changeContent} />)} title='Connection information' /> : '-',\n   <>\n    <StateLeds key='state' state={[row.if_state,row.ip_state]} title='interface and ip state' />\n    <InfoButton key='info' onClick={() => this.changeContent(<Info key={row.interface_id} interface_id={row.interface_id} changeSelf={this.props.changeSelf} />)} title='Interface information' />\n    {row.snmp_index > 0 && <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key={row.interface_id} device_id={this.props.device_id} interface_id={row.interface_id} name={row.name} />)} title='Interface stats' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.interface_id,row.name)} title='Delete interface' />\n    {!row.connection_id && ['wired','optical'].includes(row.class) && <LinkButton key='link' onClick={() => this.changeContent(<Info key={'interface_info_' + row.interface_id} op='connect_device' interface_id={row.interface_id} name={row.name} changeSelf={this.props.changeSelf} />)} title='Connect interface' />}\n    {row.connection_id && <UnlinkButton key='unlink' onClick={() => this.unLink(row.interface_id,row.connection_id)} title='Delete Connection' />}\n   </>]\n\n render(){\n  if (this.state.data) {\n   return <ContentReport key='il_cl' header='Interfaces' thead={['SNMP','Name','MAC','IP Address','Description','Type','Link','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='il_btn_reload' onClick={() => this.componentDidMount()} />\n    <AddButton key='il_btn_add' onClick={() => this.changeContent(<Info key='interface_info' device_id={this.props.device_id} interface_id='new' changeSelf={this.props.changeSelf} />) } title='Add interface' />\n    <TextButton key='il_btn_rset' onClick={() => this.resetStatus()} title='Reset interface state manually' text='Reset' />\n    <TextButton key='il_btn_disc' onClick={() => this.discoverInterfaces()} title='Discover device interfaces' text='Discover' />\n    <TextButton key='il_btn_lldp' onClick={() => this.changeContent(<LLDP key='interface_lldp' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />) } title='Map interface connections' text='LLDP' />\n    <TextButton key='il_btn_clean' onClick={() => this.cleanUp()} title='Clean up empty interfaces' text='Cleanup' />\n    {this.state.loader}\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Report ****************\n//\nexport class Report extends Component {\n componentDidMount(){\n  post_call('api/interface/list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.device_id,row.hostname,row.interface_id,row.class,row.ip,row.mac,row.name,row.description,<StateLeds key={'ir_'+row.id} state={[row.if_state,row.ip_state]} title='interface and ip state' />]\n\n render(){\n  return (!this.state) ? <Spinner /> : <ContentReport key='if_cr' header='Devices' thead={['Dev','Hostname','If','Class','IP','MAC','Name','Description','State']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Info ****************\n//\nexport class Info extends Component {\n constructor(props){\n  super(props)\n  this.state = {op:this.props.op, connect:{name:'<N/A>',map:false}}\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n componentDidMount(){\n  post_call('api/interface/info',{interface_id:this.props.interface_id, mac:this.props.mac, name:this.props.name, description:this.props.description, device_id:this.props.device_id, class:this.props.class, extra:['classes','ip']}).then(result => this.setState({...result, update:undefined}));\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount();\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n updateInfo = () => post_call('api/interface/info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n changeIpam = (id) => import('./ipam.jsx').then(lib => this.changeContent(<lib.AddressInfo key={'address_info_'+id} id={id} />));\n\n // IPAM\n stateIpam = () => {\n  this.setState({op:(this.state.domains && this.state.networks) ? 'ipam' : 'wait', ipam:{ip:'<N/A>'}})\n  if (!this.state.domains)\n   post_call('api/dns/domain_list',{filter:'forward'}).then(result => this.setState({domains:result.data,op:(this.state.networks) ? 'ipam':'wait'}));\n  if (!this.state.networks)\n   post_call('api/ipam/network_list').then(result => this.setState({networks:result.data,op:(this.state.domains) ? 'ipam':'wait'}));\n }\n ipamSearchIP = () => {\n  if (this.state.ipam.network_id)\n   post_call('api/ipam/address_find',{network_id:this.state.ipam.network_id}).then(result => this.setState({ipam:{...this.state.ipam, ip:result.ip}}))\n }\n ipamOnChange = (e) => this.setState({ipam:{...this.state.ipam, [e.target.name]:e.target.value}});\n ipamCreate = () => post_call('api/interface/info',{op:'ipam_create',     interface_id:this.state.data.interface_id, record:this.state.ipam}).then(result => this.setState({...result,op:null}))\n ipamPrimary = (id) => post_call('api/interface/info',{op:'ipam_primary', interface_id:this.state.data.interface_id, ipam_id:id}).then(result => this.setState(result));\n ipamDelete = (id) => (window.confirm('Delete IP Address?') && post_call('api/ipam/address_delete',{id:id}).then(result => this.componentDidMount()));\n ipamDnsSync = () => post_call('api/interface/info',{op:'dns_sync',       interface_id:this.state.data.interface_id}).then(result => this.setState(result));\n\n // Connections\n connectDeviceChange = (e) => {\n  this.setState({connect:{...this.state.connect, [e.target.name]:e.target.value}});\n  if(e.target.name === 'id' && e.target.value.length > 0)\n   post_call('api/device/hostname',{id:e.target.value}).then(result => (result && this.setState({connect:{...this.state.connect, found:(result.status === 'OK'), name:(result.status === 'OK') ? result.data : '<N/A>'}})))\n }\n connectInterfaceChange = (e) => this.setState({connect:{...this.state.connect, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n disconnectInterface = () => (this.state.peer && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.peer.interface_id,disconnect:true}).then(result => this.setState({peer:null})))\n stateInterface = () => (this.state.connect.found && post_call('api/interface/list',{device_id:this.state.connect.id,sort:'name',filter:['connected']}).then(result => this.setState({interfaces:result.data, op:'connect_interface'})))\n connectInterfaceConnect = () => (this.state.connect.interface_id && post_call('api/interface/connect',{a_id:this.state.data.interface_id,b_id:this.state.connect.interface_id,map:this.state.connect.map}).then(result => this.setState({connect:{},op:null})))\n\n // Render\n render(){\n  if(this.state.data){\n   if (this.state.op){\n    if(this.state.op === 'connect_device')\n     return <LineArticle key='ii_cnct_art'>\n     Connect {this.state.data.name} to <TextInput key='ii_cnct_dev' id='id' label='Device ID' onChange={this.connectDeviceChange} /> with name '{this.state.connect.name}'\n     <BackButton key='back' onClick={() => this.setState({op:null})} title='Back' />\n     <ForwardButton key='fwd' onClick={() => this.stateInterface()} title={'Connect interface on ' + this.state.connect.name} />\n    </LineArticle>\n    else if(this.state.op === 'connect_interface')\n     return <LineArticle key='la_cnct'>\n      Connect {this.state.data.name} to {this.state.connect.name} on\n      <SelectInput key='interface' id='interface_id' label='Interface' value={this.state.connect.interface_id} onChange={this.connectInterfaceChange}>\n       {this.state.interfaces.map(row => <option key={row.interface_id} value={row.interface_id}>{`${row.interface_id} (${row.name} - ${row.description})`}</option>)}\n      </SelectInput>\n      <CheckboxInput key='map' id='map' value={this.state.connect.map} onChange={this.connectInterfaceChange} />\n      <BackButton key='back' onClick={() => this.setState({op:'connect_device'})} title='Back' />\n      <ForwardButton key='fwd' onClick={() => this.connectInterfaceConnect()} title='Complete connection' />\n     </LineArticle>\n    else if (this.state.op === 'ipam'){\n     return <InfoArticle key='ia_ipam' header='Create IPAM record'>\n      <InfoColumns key='ic'>\n       <SelectInput key='network' id='network_id' label='Network' value={this.state.ipam.network_id} onChange={this.ipamOnChange}>{this.state.networks.map(row => <option key={row.id} value={row.id}>{`${row.netasc} (${row.description})`}</option>)}</SelectInput>\n       <TextInput key='ip' id='ip' value={this.state.ipam.ip} label='IP' onChange={this.ipamOnChange} />\n       <SelectInput key='domain' id='a_domain_id' label='Domain' value={this.state.ipam.a_domain_id} onChange={this.ipamOnChange}>{this.state.domains.map(row => <option key={row.id} value={row.id}>{row.name}</option>)}</SelectInput>\n      </InfoColumns>\n      <BackButton key='back' onClick={() => this.setState({op:null})} title='Back'/>\n      <SearchButton key='find_ip' onClick={() => this.ipamSearchIP()} title='Search IP within network' />\n      <ForwardButton key='fwd' onClick={() => this.ipamCreate()} title='Create IPAM entry' />\n     </InfoArticle>\n    } else if (this.state.op === 'wait')\n     return <Spinner />\n    else\n     return <div>Intermediate interface operation state</div>\n   } else {\n    const primary = (this.state.data.ipam_id);\n    const old = (this.state.data.interface_id !== 'new');\n    const peer = this.state.peer;\n    const opresult = (this.state.update === undefined) ? '' : 'Updated: ' + JSON.stringify(this.state.update)\n    return (<InfoArticle key='ia_interface_info' header='Interface'>\n     <InfoColumns key='ic' columns={3}>\n      <TextLine key='id' id='id' label='Local ID' text={this.state.data.interface_id} /><div />\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      {(primary) ? <SyncButton key='sync' onClick={() => this.ipamDnsSync()} title='sync interface name and IP hostname' /> : <div />}\n      <SelectInput key='class' id='class' value={this.state.data.class} onChange={this.onChange}>{this.state.classes.map(row => <option key={row} value={row}>{row}</option>)}</SelectInput><div />\n      <TextInput key='description' id='description' value={this.state.data.description} onChange={this.onChange} /><div />\n      <TextInput key='snmp_index' id='snmp_index' label='SNMP index' value={this.state.data.snmp_index} onChange={this.onChange} /><div />\n      <TextInput key='mac' id='mac' value={this.state.data.mac} onChange={this.onChange} /><div />\n      {primary && <><TextLine key='ip' id='ip' label='Primary IP' text={this.state.primary.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(this.state.primary.id)} title='Edit IPAM entry' /><DeleteButton key='delete' onClick={() => this.ipamDelete(this.state.primary.id)} title='Delete IPAM entry' /></div></>}\n      {this.state.alternatives.map(row => <Fragment key={row.ip}><TextLine key='ip' id={row.ip} label='Alternative IP' text={row.ip} /><div><GoButton key='go' onClick={() => this.changeIpam(row.id)} title='Edit IPAM entry' /><SyncButton key='primary' onClick={() => this.ipamPrimary(row.id)} title='Make primary' /><DeleteButton key='delete' onClick={() => this.ipamDelete(row.id)} title='Delete IPAM entry' /></div></Fragment>)}\n      {peer && <><TextLine key='peer_int_id' id='peer_interface' label='Peer Interface' text={peer.interface_id} /><UnlinkButton key='unlink' onClick={() => this.disconnectInterface()} title='Disconnect from peer' /></>}\n      {peer && <><TextLine key='peer_dev_id' id='peer_device' label='Peer Device' text={peer.device_id} /><div/></>}\n     </InfoColumns>\n     {'changeSelf' in this.props && <ItemsButton key='list' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.state.data.device_id} changeSelf={this.props.changeSelf} />)} title='Interfaces' />}\n     {this.props.interface_id !== 'new' && <ReloadButton key='reload' onClick={() => this.componentDidMount()} />}\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save interface information' />\n     {old && !peer && ['wired','optical'].includes(this.state.data.class) && <LinkButton key='connect' onClick={() => this.setState({op:'connect_device'})} title='Connect peer interface' />}\n     {old && <AddButton key='add' onClick={() => this.stateIpam()} title='Add IP' />}\n     <Result key='result' result={opresult} />\n    </InfoArticle>)\n   }\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Statistics ****************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {range:1, visibility: {ib:true, ob:true, ip:true, op:true}}\n  this.canvas = React.createRef()\n  this.graph = null;\n  this.vis = null;\n }\n\n componentDidMount(){\n  import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => {\n   this.vis = vis;\n   const options = { locale:'en', width:'100%', height:'100%', zoomMin:60000, zoomMax:1209600000, clickToUse:true, drawPoints: false, interpolation:false, legend:true, dataAxis:{ alignZeros:false , icons:true, left:{ title:{ text:'kbps' } }, right:{ title:{ text:'packets per second' } } } };\n   const groups = new this.vis.DataSet([{id:'ib', content:'In'}, {id:'ob', content:'Out' }, {id:'ip', content:'In', options: { yAxisOrientation: 'right'}},{id:'op', content:'Out', options: { yAxisOrientation: 'right'}}]);\n   this.graph = new this.vis.Graph2d(this.canvas.current, [], groups, options);\n   this.updateItems(this.state.range);\n  })\n }\n\n updateItems = (range) => post_call('api/statistics/query_interface',{device_id:this.props.device_id, interface_id:this.props.interface_id, range:range}).then(result => {\n  if (result.status === 'OK') {\n   const pos = {};\n   const names = {'in8s':'ib','out8s':'ob','inUPs':'ip','outUPs':'op'};\n   result.header.forEach((item,index) => pos[item] = index);\n   const dataset = new this.vis.DataSet(result.data.map(params => ({ x:params[pos['_time']], y:params[pos['_value']] * (params[pos['_field']].substr(-2) === '8s' ? 8/1024 : 1), group:names[params[pos['_field']]] })));\n   this.graph.setItems(dataset);\n   this.graph.fit();\n  }\n });\n\n rangeChange = (e) => {\n  this.setState({[e.target.name]:e.target.value})\n  this.updateItems(e.target.value);\n }\n\n checkChange = (e) => {\n  this.setState({visibility:{...this.state.visibility, [e.target.name]:e.target.checked}});\n  this.graph.setOptions({groups:{visibility:{[e.target.name]:e.target.checked}}})\n }\n\n gotoNow = () => {\n  const today = new Date()\n  this.graph.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  const v = this.state.visibility;\n  return <Article key='is_art' header='Statistics'>\n   <ReloadButton key='reload' onClick={() => this.updateItems(this.state.range)} title='Reload' />\n   <RevertButton key='reset' onClick={() => this.gotoNow()} title='Go to now' />\n   <br />\n   <TextLine key='name' id='name' label='Interface name' text={this.props.name} />\n   <br />\n   <SelectInput key='range' id='range' label='Time range' value={this.state.range} onChange={this.rangeChange}>\n    <option value='1'>1h</option>\n    <option value='4'>4h</option>\n    <option value='8'>8h</option>\n    <option value='24'>24h</option>\n   </SelectInput>\n   <CheckboxInput key='ib' id='ib' label='In bps' value={v.ib} onChange={this.checkChange} />\n   <CheckboxInput key='ob' id='ob' label='Out bps' value={v.ob} onChange={this.checkChange} />\n   <CheckboxInput key='ip' id='ip' label='In pps' value={v.ip} onChange={this.checkChange} />\n   <CheckboxInput key='op' id='op' label='Out pps' value={v.op} onChange={this.checkChange} />\n   <div className={styles.graphs} ref={this.canvas} />\n  </Article>\n }\n}\n\n// *************** Connection ****************\n//\nclass ConnectionInfo extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/connection_info',{connection_id:this.props.id}).then(result => this.setState(result));\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target[(e.target.type !== 'checkbox') ? 'value' : 'checked']}})\n\n updateInfo = () => post_call('api/interface/connection_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n render(){\n  if(this.state.interfaces){\n   return <InfoArticle key='ci_article' header={'Connection '+ this.props.id}>\n    <InfoColumns key='ci_columns'>\n     <CheckboxInput key='map' id='map' value={this.state.data.map} onChange={this.onChange} />\n     {this.state.interfaces.map((row,idx) => <TextLine key={idx} id={'interface_' +idx} text={`${row.device_name} - ${row.interface_name} (${row.interface_id})`} />)}\n    </InfoColumns>\n    <BackButton key='ci_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n    <SaveButton key='ci_btn_save' onClick={() => this.updateInfo()} title='Save connection information' />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** LLDP ****************\n//\nclass LLDP extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/interface/lldp_mapping',{device_id:this.props.device_id}).then(result => this.setState({data:Object.values(result.data)}))\n }\n\n listItem = (row) => [row.chassis_id,row.chassis_type,row.sys_name,row.port_id,row.port_type,row.port_desc,row.snmp_index,row.snmp_name,row.connection_id,row.status]\n\n render(){\n  if(this.state.data)\n   return <ContentReport key='il_cr' header='Interface' thead={['Chassis','Type','Name','Port ID','Type','Description','SNMP Index','SNMP Name','Conn','Status']} trows={this.state.data} listItem={this.listItem}>\n   <BackButton key='il_btn_back' onClick={() => this.props.changeSelf(<List key='interface_list' device_id={this.props.device_id} changeSelf={this.props.changeSelf} />)} title='Back' />\n   </ContentReport>\n  else\n   return <Spinner />\n }\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}