{"version":3,"sources":["dns.jsx"],"names":["Main","changeContent","elem","setState","this","DomainList","state","Component","props","listItem","row","id","name","service","onClick","DomainInfo","title","RecordList","changeSelf","domain_id","deleteList","content","window","confirm","post_call","then","result","deleted","data","filter","sync","ns","status","rec","header","thead","trows","componentDidMount","syncDomains","Statistics","mountUpdate","fun","onChange","e","target","value","updateInfo","op","prevProps","old","text","infra","node","label","foreign_id","server_id","servers","map","idx","master","type","serial","queries","rows","split","forEach","push","Object","entries","remotes","ttl","RecordInfo","includes","JSON","stringify","info","undefined","placeholder"],"mappings":"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","file":"static/js/13.028509e2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { post_call } from './infra/Functions.js';\nimport { Flex, Spinner, CodeArticle, InfoArticle, InfoColumns, ContentList, ContentData, ContentReport, Result } from './infra/UI.jsx';\nimport { TextLine, SelectInput, TextInput } from './infra/Inputs.jsx';\nimport { AddButton, DeleteButton, ConfigureButton, HealthButton, ItemsButton, ReloadButton, SaveButton, SyncButton } from './infra/Buttons.jsx';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n componentDidMount(){\n  this.setState(<DomainList key='domain_list' />)\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return <>{this.state}</>\n }\n}\n\n// *************** Domain List ***************\n//\nexport class DomainList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/dns/domain_list').then(result => {\n   result.result = 'OK';\n   this.setState(result);\n  })\n }\n\n syncDomains(){\n  post_call('api/dns/domain_list',{sync:true}).then(result => {\n   result.result = 'NS:' + result.ns.status + ', Recursors:' + result.rec.status;\n   this.setState(result);\n  })\n }\n\n listItem = (row) => [row.id,row.name,row.service,<>\n   <ConfigureButton key='info' onClick={() => this.changeContent(<DomainInfo key='domain_info' id={row.id} />) } title='Edit domain information' />\n   <ItemsButton key='items' onClick={() => this.changeContent(<RecordList changeSelf={this.changeContent} key='record_list' domain_id={row.id} />) } title='View domain records' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id) } title='Delete domain' />\n  </>]\n\n changeContent = (elem) => this.setState({content:elem})\n deleteList = (id) => (window.confirm('Really delete domain') && post_call('api/dns/domain_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Domains' thead={['ID','Domain','Server','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<DomainInfo key='domain_info' id='new' />) } title='Add domain' />\n    <SyncButton key='sync' onClick={() => this.syncDomains()} title='Sync external DNS servers with cache' />\n    <HealthButton key='stats' onClick={() => this.changeContent(<Statistics key='recursor_statistics' />)} title='View DNS statistics' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** Domain Info ***************\n//\nclass DomainInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = { data:null };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () =>  post_call('api/dns/domain_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount()\n }\n\n componentDidMount(){\n  post_call('api/dns/domain_info',{id:this.props.id}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data) {\n   const old = (this.state.data.id !== 'new');\n   return <InfoArticle key='ia_dom' header='Domain'>\n     <InfoColumns key='ic'>\n      {old && <TextLine key='node' id='node' text={this.state.infra.node} />}\n      {old && <TextLine key='service' id='service' text={this.state.infra.service} />}\n      {old && <TextLine key='foreign_id' id='foreign_id' label='Foreign ID' text={this.state.infra.foreign_id} />}\n      {!old && <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>{this.state.servers.map((row,idx) => <option key={'srv_'+idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}</SelectInput>}\n      <TextInput key='name' id='name' value={this.state.data.name} onChange={this.onChange} />\n      <TextInput key='master' id='master' value={this.state.data.master} onChange={this.onChange} />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} />\n      <TextLine  key='serial' id='serial' text={this.state.data.serial} />\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save domain information' />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Status ***************\n//\nclass Statistics extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/dns/statistics').then(result => {\n   const queries = []\n   for (let [node,rows] of Object.entries(result.queries)){\n    const ns = node.split('_');\n    rows.forEach(row => queries.push([ns[0],ns[1],row[0],row[1],row[2]]))\n   }\n   const remotes = []\n   for (let [node,rows] of Object.entries(result.remotes)){\n    const ns = node.split('_');\n    rows.forEach(row => remotes.push([ns[0],ns[1],row[0],row[1]]))\n   }\n   this.setState({queries:queries,remotes:remotes})\n  })\n }\n\n render(){\n  return (this.state.queries && this.state.remotes) ? <Flex key='statistics_flex'>\n    <ContentReport key='queries_cr' header='Looked up FQDN' thead={['Node','Service','Hits','FQDN','Type']} trows={this.state.queries} listItem={(row) => row} />\n    <ContentReport key='remotes_cr' header='Queriers' thead={['Node','Service','Hits','Who']} trows={this.state.remotes} listItem={(row) => row} />\n   </Flex> : <Spinner />\n }\n}\n\n// *************** Record List ***************\n//\nclass RecordList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidUpdate(prevProps){\n  if(prevProps !== this.props)\n   this.componentDidMount();\n }\n\n componentDidMount(){\n  post_call('api/dns/record_list',{domain_id:this.props.domain_id}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem);\n\n listItem = (row) => [row.name,row.content,row.type,row.ttl,<>\n   <ConfigureButton key='info' onClick={() => this.changeContent(<RecordInfo key='record_info' domain_id={this.props.domain_id} op='info' {...row} />)} title='Configure record' />\n   {['A','AAAA','CNAME','PTR'].includes(row.type) && <DeleteButton key='del' onClick={() => this.deleteList(row.name,row.type)} title='Delete record' />}\n  </>]\n\n deleteList = (name,type) => (window.confirm('Delete record?') && post_call('api/dns/record_delete', {domain_id:this.props.domain_id,name:name,type:type}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => !(row.name === name && row.type === type))})))\n\n render(){\n  const status = this.state.status;\n  if (status)\n   if (status === 'OK'){\n    const data = this.state.data;\n    return <ContentReport key='rl_cr' header='Records' thead={['Name','Content','Type','TTL','']} trows={data} listItem={this.listItem} result={this.state.result}>\n     <ReloadButton key='reload' onClick={() => this.componentDidMount() } />\n     <AddButton key='add' onClick={() => this.changeContent(<RecordInfo key='record_info' domain_id={this.props.domain_id} name='new' op='new' />)} title='Add DNS record' />\n    </ContentReport>\n   } else\n    return <CodeArticle key='ca_rl'>Error retrieving record list: {JSON.stringify(this.state.info)}</CodeArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Record Info ***************\n//\nclass RecordInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null,info:undefined };\n  if (this.props.op === 'info'){\n   this.state.data = {domain_id:this.props.domain_id, name:this.props.name, type:this.props.type, ttl:this.props.ttl, content:this.props.content}\n   this.state.op = 'update'\n  } else {\n   this.state.data = {domain_id:this.props.domain_id, name:'', type:'A', ttl:3600, content:''}\n   this.state.op = 'insert'\n  }\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => post_call('api/dns/record_info',{op:this.state.op, ...this.state.data}).then(result => {\n   this.setState({op:(result.status === 'OK') ? 'update' : this.state.op, ...result})\n })\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='rec_art' header='Record'>\n     <InfoColumns key='ic'>\n      <TextInput key='name' id='name' value={this.state.data.name} title='E.g. A:FQDN, PTR:x.y.z.in-addr.arpa' onChange={this.onChange} placeholder='name' />\n      <TextInput key='type' id='type' value={this.state.data.type} onChange={this.onChange} placeholder={'A, PTR or CNAME typically'} />\n      <TextInput key='ttl' id='ttl' label='TTL' value={this.state.data.ttl} onChange={this.onChange} />\n      <TextInput key='content' id='content' value={this.state.data.content} title='E.g. A:IP, PTR:x.y.x-inaddr.arpa, CNAME:A - remember dot on PTR/CNAME' onChange={this.onChange} placeholder='content' />\n      {this.props.serial && <TextLine key='serial' id='serial' text={this.props.serial} />}\n     </InfoColumns>\n     <SaveButton key='save' onClick={() => this.updateInfo()} title='Save record information' />\n     <Result key='result' result={(this.state.status !== 'OK') ? JSON.stringify(this.state.info) : 'OK'} />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}