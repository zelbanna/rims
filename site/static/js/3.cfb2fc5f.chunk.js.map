{"version":3,"sources":["ipam.jsx"],"names":["Main","props","changeContent","elem","setState","state","NetworkList","this","Component","listItem","row","id","netasc","description","service","onClick","NetworkInfo","title","AddressList","network_id","changeSelf","class","Layout","ReservationList","deleteList","resetStatus","window","confirm","post_call","then","result","deleted","data","filter","count","header","thead","trows","componentDidMount","rnd","Leases","mountUpdate","fun","onChange","e","target","name","value","content","updateInfo","op","found","extra","label","text","network","mask","gateway","server_id","servers","map","idx","node","reverse_zone_id","domains","server","changeDevice","lib","Info","createDevice","ip","New","ipam_network_id","dict","start","ip2int","layout","cnt","pos","device_id","push","int2ip","size","mac","hostname","oui","starts","ends","type","domain","AddressInfo","status","undefined","info","a_domain_id","AddressEvents","AddressLogs","time","clearList","events","timeline","canvas","current","innerHTML","gotoNow","today","Date","moveTo","getFullYear","getMonth","getDate","getHours","getMinutes","React","createRef","vis","style","dataset","DataSet","Timeline","locale","min","length","align","width","height","zoomMin","zoomMax","clickToUse","className","styles","ref","addEntry","ReservationNew","end","JSON","stringify","resv"],"mappings":"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","file":"static/js/3.cfb2fc5f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { post_call, rnd, int2ip, ip2int } from './infra/Functions.js';\nimport { Spinner, Article, InfoArticle, InfoColumns, StateLeds, Result, ContentList, ContentData, ContentReport } from './infra/UI.jsx';\nimport { TextInput, TextLine, SelectInput } from './infra/Inputs.jsx';\nimport { AddButton, BackButton, DeleteButton, ViewButton, LogButton, ConfigureButton, HealthButton, ItemsButton, RevertButton, ReloadButton, CheckButton, SaveButton, IpamGreenButton, IpamRedButton, IpamGreyButton } from './infra/Buttons.jsx';\nimport styles from './infra/ui.module.css';\n\n// *************** Main ***************\n//\nexport class Main extends Component {\n constructor(props){\n  super(props)\n  this.state = <NetworkList key='network_list' />\n }\n\n changeContent = (elem) => this.setState(elem)\n\n render(){\n  return  <>{this.state}</>\n }\n}\n\n// *************** NetworkList ***************\n//\nexport class NetworkList extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/network_list').then(result => this.setState(result))\n }\n\n listItem = (row) => [row.id,\n   row.netasc,\n   row.description,\n   row.service,\n   <>\n    <ConfigureButton key='conf' onClick={() => this.changeContent(<NetworkInfo key={'network_'+row.id} id={row.id} />)} title='Edit network properties' />\n    <ItemsButton key='items' onClick={() => this.changeContent(<AddressList key={'address_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View addresses' />\n    {row.class === 'v4' && <ViewButton key='layout' onClick={() => this.changeContent(<Layout key={'address_layout_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='View usage map' />}\n    {row.class === 'v4' && <CheckButton key='resv' onClick={() => this.changeContent(<ReservationList key={'resv_list_'+row.id} network_id={row.id} changeSelf={this.changeContent} />)} title='Reserved addresses for network' />}\n    <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete network' />\n    <ReloadButton key='reset' onClick={() => this.resetStatus(row.id)} title='Reset state for network addresses' />\n  </>]\n\n deleteList = (id) => (window.confirm('Really delete network') && post_call('api/ipam/network_delete', {id:id}).then(result => {\n  if (result.deleted){\n   this.setState({data:this.state.data.filter(row => (row.id !== id))});\n   this.changeContent(null);\n  }}))\n\n resetStatus = (id) => post_call('api/ipam/clear',{network_id:id}).then(result => this.setState({result:result.count}))\n\n render(){\n  return <>\n   <ContentList key='cl' header='Networks' thead={['ID','Network','Description','DHCP','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n    <ReloadButton key='reload'  onClick={() => this.componentDidMount() } />\n    <AddButton key='add' onClick={() => this.changeContent(<NetworkInfo key={'network_new_'+rnd()} id='new' />)} title='Add network' />\n    <LogButton key='leases' onClick={() => this.changeContent(<Leases key='network_leases' />)} title='View IPAM/DHCP leases' />\n   </ContentList>\n   <ContentData key='cda' mountUpdate={(fun) => this.changeContent = fun} />\n  </>\n }\n}\n\n// *************** NetworkInfo ***************\n//\nclass NetworkInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null, found:true };\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n changeContent = (elem) => this.setState({content:elem})\n\n updateInfo = () => post_call('api/ipam/network_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{id:this.props.id, extra:['servers','domains']}).then(result => this.setState(result))\n }\n\n render() {\n  if (this.state.data)\n   return <InfoArticle key='net_article' header='Network'>\n     <InfoColumns key='network_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextInput key='description' id='description'  value={this.state.data.description} onChange={this.onChange} />\n      <TextInput key='network' id='network' value={this.state.data.network} onChange={this.onChange} />\n      <TextInput key='mask' id='mask' value={this.state.data.mask} onChange={this.onChange} />\n      <TextInput key='gateway' id='gateway' value={this.state.data.gateway} onChange={this.onChange} />\n      <SelectInput key='server_id' id='server_id' label='Server' value={this.state.data.server_id} onChange={this.onChange}>\n       {this.state.servers.map((row,idx) => <option key={idx} value={row.id}>{`${row.service}@${row.node}`}</option>)}\n      </SelectInput>\n      <SelectInput key='reverse_zone_id' id='reverse_zone_id' label='Reverse Zone' value={this.state.data.reverse_zone_id} onChange={this.onChange}>\n       {this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{`${row.server} (${row.name})`}</option>)}\n      </SelectInput>\n     </InfoColumns>\n     <SaveButton key='network_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    </InfoArticle>\n  else\n   return <Spinner />\n }\n}\n\n// *************** Network Layout ***************\n//\nclass Layout extends Component {\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,dict:'ip_integer',extra:['device_id','reservation','ip_integer']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n changeDevice = (id) => import('./device.jsx').then(lib => this.changeContent(<lib.Info key={'di_'+id} id={id} />))\n\n createDevice = (network,ip) => import('./device.jsx').then(lib =>  this.changeContent(<lib.New key={'dn_new'} ipam_network_id={network} ip={ip} />))\n\n render(){\n  if (!this.state)\n   return <Spinner />\n  else {\n   const data = this.state.data;\n   const start = ip2int(this.state.network);\n   const layout = [];\n   for (let cnt = 0; cnt < this.state.size; cnt++){\n    const pos = start + cnt;\n    if (!(pos in data))\n     layout.push(<IpamGreenButton key={'btn_' + pos} onClick={() => this.createDevice(this.props.network_id,int2ip(pos))} text={cnt%256} />)\n    else if (data[pos].device_id)\n     layout.push(<IpamRedButton key={'btn_' + pos} onClick={() => this.changeDevice(data[pos].device_id)} text={cnt%256} />)\n    else\n     layout.push(<IpamGreyButton key={'btn_' + pos} text={cnt%256} />)\n   }\n   return <Article key='il_art' header={this.state.network + '/' + this.state.mask}>\n    {layout}\n   </Article>\n  }\n }\n}\n\n// *************** Leases ***************\n//\nclass Leases extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/server_leases',{type:'active'}).then(result => this.setState(result))\n }\n\n listItem = (row) => [row.ip,row.mac,row.hostname,row.oui,row.starts,row.ends]\n\n render(){\n  return <ContentReport key='lease_cr' header='Leases' thead={['IP','Mac','Hostname','OUI','Starts','End']} trows={this.state.data} listItem={this.listItem} />\n }\n}\n\n// *************** Address List ***************\n//\nclass AddressList extends Component{\n constructor(props){\n  super(props)\n  this.state = {data:null,result:null}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_list',{network_id:this.props.network_id,extra:['hostname','a_domain_id','device_id']}).then(result => this.setState(result))\n }\n\n changeContent = (elem) => this.props.changeSelf(elem)\n\n listItem = (row) => [row.id,row.ip,row.hostname,row.domain,<>\n   <StateLeds key='state' state={row.state} />\n   <ConfigureButton key='info' onClick={() => this.changeContent(<AddressInfo key={'address_info_'+row.id} id={row.id} changeSelf={this.changeContent} />)} title='Edit address entry' />\n   <DeleteButton key='del' onClick={() => this.deleteList(row.id)} title='Delete address entry' />\n  </>]\n\n deleteList = (id) => (window.confirm('Delete address?') && post_call('api/ipam/address_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))})))\n\n render(){\n  return <ContentReport key='al_cr' header='Allocated IP Addresses' thead={['ID','IP','Hostname','Domain','']} trows={this.state.data} listItem={this.listItem} result={this.state.result}>\n   <ReloadButton key='al_btn_reload' onClick={() => this.componentDidMount() } />\n   <AddButton key='al_btn_add' onClick={() => this.changeContent(<AddressInfo key={'address_new_' + rnd()} network_id={this.props.network_id} id='new' />)} title='Add address entry' />\n  </ContentReport>\n }\n}\n\n// *************** Address Info ***************\n//\nexport class AddressInfo extends Component {\n constructor(props){\n  super(props);\n  this.state = {data:null};\n }\n\n onChange = (e) => this.setState({data:{...this.state.data, [e.target.name]:e.target.value}});\n\n updateInfo = () => {\n  this.setState({status:undefined});\n  post_call('api/ipam/address_info',{op:'update', ...this.state.data}).then(result => this.setState(result))\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_info',{id:this.props.id,network_id:this.props.network_id}).then(result => this.setState(result))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n render() {\n  if (this.state && this.state.data && this.state.domains){\n   let result = '';\n   if (this.state.status) {\n    if (this.state.status === 'OK')\n     result = 'OK';\n    else\n     result = this.state.info\n   }\n   return <InfoArticle key='ip_article' header='IP Address'>\n     <InfoColumns key='ip_content'>\n      <TextLine key='id' id='id' label='ID' text={this.state.data.id} />\n      <TextLine key='network' id='network' text={this.state.extra.network} />\n      <TextInput key='ip' id='ip' label='IP'  value={this.state.data.ip} onChange={this.onChange} />\n      <TextInput key='hostname' id='hostname' value={this.state.data.hostname} onChange={this.onChange} title='Hostname when creating FQDN for DNS entry' />\n      <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.data.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n     </InfoColumns>\n     <SaveButton key='ip_btn_save' onClick={() => this.updateInfo()} title='Save' />\n     {'changeSelf' in this.props && <HealthButton key='ip_btn_events' onClick={() => this.props.changeSelf(<AddressEvents key='address_events' id={this.state.data.id} changeSelf={this.props.changeSelf} />)} title='IPAM events - graphical' />}\n     {'changeSelf' in this.props && <LogButton key={'ip_btn_logs'} onClick={() => this.props.changeSelf(<AddressLogs key='address_logs' id={this.state.data.id} />)} title='IPAM events - logs' />}\n     <Result key='ip_operation' result={result} />\n    </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Address Logs ***************\n//\nclass AddressLogs extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/address_events',{id:this.props.id}).then(result => this.setState(result))\n }\n\n listItem = (row,idx) => [row.time,<StateLeds state={row.state} />]\n\n clearList = () => post_call('api/ipam/address_events',{op:'clear', id:this.props.id}).then(result => this.setState({events:[]}))\n\n render(){\n  return <ContentReport key={'alo_cr_'+this.props.id} header='State changes' thead={['Time','']} trows={this.state.events} listItem={this.listItem}>\n   <DeleteButton key='alo_btn_clear' onClick={() => this.clearList()} title='clear logs' />\n  </ContentReport>\n }\n}\n\n// *************** Address Events ****************\n//\nexport class AddressEvents extends Component {\n constructor(props){\n  super(props)\n  this.state = {}\n  this.canvas = React.createRef()\n  this.timeline = null\n }\n\ncomponentDidMount(){\n import('vis-timeline/standalone/esm/vis-timeline-graph2d').then(vis => post_call('api/ipam/address_events',{id:this.props.id}).then(result => {\n   if (result.count > 0){\n    const events = result.events.map(({state, time}) => ({content:state, start:time, style:(state === 'up') ? 'background-color:#26CB20;' : 'background-color:#CB2026;', title:time}));\n    const dataset = new vis.DataSet(events);\n    this.timeline = new vis.Timeline(this.canvas.current, dataset, { locale:'en', min:events[events.length - 1].start, align:'left', width:'100%', height:150, zoomMin:60000, zoomMax:1209600000, clickToUse:true});\n   } else\n    this.canvas.current.innerHTML = 'no events';\n  }))\n }\n\n clearList = () => post_call('api/ipam/address_events',{op:'clear', id:this.props.id}).then(result => { this.setState({timeline:null}); this.canvas.current.innerHTML = 'no events';})\n\n gotoNow = () => {\n  const today = new Date()\n  this.timeline.moveTo(today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' '+today.getHours()+':'+today.getMinutes());\n }\n\n render(){\n  return <Article key='ae_art' header='Events'>\n   <div className={styles.events} ref={this.canvas} />\n   <RevertButton key='ae_btn_reset' onClick={() => this.gotoNow()} title='Go to now' />\n   {'changeSelf' in this.props && <ItemsButton key='ae_btn_list' onClick={() => this.props.changeSelf(<AddressLogs key='address_logs' id={this.props.id} />)} title='List' />}\n   <DeleteButton key='ae_btn_clear' onClick={() => this.clearList()} title='clear logs' />\n  </Article>\n }\n}\n\n// *************** Reservation List ***************\n//\nclass ReservationList extends Component {\n constructor(props){\n  super(props);\n  this.state = {}\n }\n\n componentDidMount(){\n  post_call('api/ipam/reservation_list',{network_id:this.props.network_id}).then(result => this.setState(result))\n }\n\n deleteList = (id) => post_call('api/ipam/reservation_delete', {id:id}).then(result => result.deleted && this.setState({data:this.state.data.filter(row => (row.id !== id))}))\n\n listItem = (row,idx) => [row.ip,row.type,<DeleteButton key={'resv_list_delete_'+row.id} onClick={() => this.deleteList(row.id)} />]\n\n addEntry = () => this.props.changeSelf(<ReservationNew key={'resv_new_'+this.props.network_id} network_id={this.props.network_id} changeSelf={this.props.changeSelf} />);\n\n render() {\n  if(this.state.data){\n   return <ContentReport key={'resv_list_'+this.props.server_id} header='Reservations' thead={['IP','Type','']} trows={this.state.data} listItem={this.listItem}>\n    <AddButton key='resv_list_add_btn' onClick={() => this.addEntry()} />\n   </ContentReport>\n  } else\n   return <Spinner />\n }\n}\n\n// *************** Reservation New ****************\n//\nclass ReservationNew extends Component {\n  constructor(props){\n  super(props);\n  this.state = {ip:'',start:'',end:'', result:undefined,type:'dhcp'}\n }\n\n onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n componentDidMount(){\n  post_call('api/ipam/network_info',{'id':this.props.network_id}).then(result => this.setState({...result.data}))\n  post_call('api/dns/domain_list',{'filter':'forward'}).then(result => this.setState({domains:result.data}))\n }\n\n updateInfo = () => post_call('api/ipam/reservation_new',{network_id:this.props.network_id, ip:this.state.ip, type:this.state.type, a_domain_id:this.state.a_domain_id, start:this.state.start, end:this.state.end}).then(result => this.setState({result:result}))\n\n render() {\n  if (this.state.domains){\n   const network_id = this.props.network_id;\n   const result = (this.state.result) ? JSON.stringify(this.state.result.resv) : '';\n   return <InfoArticle key='dn_article' header='Reservation Address/Scope'>\n    <span>Allocate address with either 'ip' or 'start' to 'end' (e.g. a scope)</span>\n    <InfoColumns key='dn_content'>\n     <TextLine key='id' id='network_id' label='Network ID' text={network_id} />\n     <TextLine key='network' id='network' text={this.state.network + '/' + this.state.mask} />\n     <TextInput key='ip' id='ip' label='IP' value={this.state.ip} onChange={this.onChange} />\n     <TextInput key='start' id='start' label='Start IP' value={this.state.start} onChange={this.onChange} />\n     <TextInput key='end' id='end' label='End IP' value={this.state.end} onChange={this.onChange} />\n     <SelectInput key='type' id='type' label='Type' value={this.state.type} onChange={this.onChange}>\n      <option key='dhcp' value='dhcp'>dhcp</option>\n      <option key='reservation' value='reservation'>reservation</option>\n     </SelectInput>\n     <SelectInput key='a_domain_id' id='a_domain_id' label='Domain' value={this.state.a_domain_id} onChange={this.onChange}>{this.state.domains.map((row,idx) => <option key={idx} value={row.id}>{row.name}</option>)}</SelectInput>\n    </InfoColumns>\n    {this.props.changeSelf && <BackButton key='dn_btn_back' onClick={() => this.props.changeSelf(<ReservationList key={'resv_list_' + network_id} network_id={network_id} changeSelf={this.props.changeSelf} />)} />}\n    <SaveButton key='dn_btn_save' onClick={() => this.updateInfo()} title='Save' />\n    <Result key='dn_operation' result={result} />\n   </InfoArticle>\n  } else\n   return <Spinner />\n }\n}\n"],"sourceRoot":""}